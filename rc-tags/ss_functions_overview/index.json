
{
    "kind": "term",
    "name": "ss_functions_overview",
    "count": 6,
    "items": [

    
        {
            "weight": "5",
            "url": "https://docs.tealium.com/server-side/functions/about/",
            "title": "About functions",
            "body":"<h2 id=\"function-types\">Function types</h2><p>Tealium currently supports the following function types:</p><ul><li><strong>Data Transformation Functions</strong> – Functions that are triggered after an event is received by Tealium Collect and when the trigger conditions for the function are met.For more information, see <a href=\"/server-side/functions/data-transformation-functions/about/\">About Data Transformation Functions</a></li><li><strong>Event Functions</strong> – Functions that are triggered after an event is processed. For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.To use functions that are triggered by processed events, you must have EventStream enabled. For more information, see <a href=\"/server-side/getting-started/eventstream-api-hub/introduction/\">Introduction to EventStream</a>.</li><li><strong>Visitor Functions</strong> – Functions that are triggered after a visitor is processed. For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.To use functions that are triggered by processed visitors, you must have AudienceStream enabled. For more information, see <a href=\"/server-side/getting-started/audiencestream-cdp/introduction/\">Introduction to AudienceStream</a>.</li></ul><h2 id=\"key-benefits\">Key benefits</h2><p>Functions provides a serverless environment that allows you to extend the functionality of the Customer Data Hub to suit your needs.</p><h3 id=\"serverless-environment\">Serverless environment</h3><p>In the serverless functions environment, functions are hosted on the Tealium Platform. Tealium manages the servers and platform software and you can focus on implementing functions for your unique data needs. Resources, such as memory, are allocated automatically each time a function is invoked. For more information, see <a href=\"/server-side/functions/environment/\">execution environment and rate limits</a>.</p><h3 id=\"extend-the-customer-data-hub\">Extend the Customer Data Hub</h3><p>You can use data transformation functions to modify incoming event data. For example, a data transformation function can use the <code>flatten()</code> utility to convert a nested object to an object with all data on a single level.</p><p>You can use event and visitor functions to retrieve data from other systems, augment Tealium data, or send data to other endpoints. If a function modifies visitor or event data, the changes are local to the function and do not affect the Tealium data. Functions can send the modified data to Tealium Collect, where it is processed again and the changes are reflected in Tealium data.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>There is a cost associated with sending event or visitor data to the Tealium Collect endpoint because the number of events is increased each time data is sent.</p>"
        }  

    , 
        {
            "weight": "10",
            "url": "https://docs.tealium.com/server-side/functions/triggers/",
            "title": "Function triggers",
            "body":"<p>Functions are triggered by events at different points in the data pipeline, depending on the function type.</p><h2 id=\"data-transformation-functions\">Data transformation functions</h2><p>Data transformation functions have custom triggers, which are rules that specify the conditions that trigger execution of a function. If the trigger conditions for a data transformation function are met, the function is invoked after the event is collected from the data source and before the event is processed, as shown in the following data pipeline diagram. Data transformation functions support all event types except for file import events.</p><figure><img src=\"https://community.tealiumiq.com/t5/image/serverpage/image-id/12031iA86BB735DCA537C3/image-size/large?v=v2&amp;amp;px=999\"         alt=\"data-source-event-collected.png\"         title=\"data-source-event-collected.png\"/></figure><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Only one function can be triggered by a custom trigger. If an event matches more than one function trigger, the function with the oldest <strong>Date Modified</strong> is the only function that is triggered.</p><p>For more information, see <a href=\"/server-side/functions/data-transformation-functions/about/\">About Data Transformation Functions</a>.</p><h2 id=\"event-and-visitor-functions\">Event and visitor functions</h2><p>Event and visitor functions are invoked after the event or visitor has been processed, as shown in the following data pipeline diagram.</p><figure><img src=\"https://community.tealiumiq.com/t5/image/serverpage/image-id/11379i0D7894A08CC524CB/image-size/large?v=v2&amp;amp;px=999\"         alt=\"ProcessedEventFeed_Full.png\"         title=\"ProcessedEventFeed_Full.png\"/></figure><p>For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.</p>"
        }  

    , 
        {
            "weight": "15",
            "url": "https://docs.tealium.com/server-side/functions/environment/",
            "title": "Environment and rate limits",
            "body":"<h2 id=\"execution-environment\">Execution environment</h2><p>The functions execution environment is built on the <a href=\"https://www.graalvm.org/%22\">GraalVM</a> JavaScript runtime and runs ECMAScript 2020 compatible code. If an error occurs, the error message is written to the log file. Functions can also write messages to the log.</p><p>Functions have the following limitations:</p><ul><li>Functions cannot use third-party libraries.</li><li>Functions have 32 MB of memory.<br>If a function attempts to use more than 32 MB, the following error is written to the log:<br><code>Exception 400 BAD REQUEST - OutOfMemoryError: memory limit 32 mb is exceeded.</code></li></ul><h2 id=\"rate-limits-for-data-transformation-functions\">Rate limits for data transformation functions</h2><p>Data transformation functions have the following execution limits:</p><ul><li>1 hour of execution time per minute OR</li><li>250,000 invocations per minute (15 mm per hour)</li></ul><p>These execution limits are based on the account and the region. The sum of the execution time and the number of invocations for all functions in an account for a region cannot exceed these limits.</p><p>If either limit is exceeded, function execution is briefly stopped (throttled). The following message is displayed in the <strong>Functions Overview</strong> and a yellow alert icon is displayed next to a throttled function, as follows:</p><figure><img src=\"https://community.tealiumiq.com/t5/image/serverpage/image-id/12683iB51D7CD34A2AEF80/image-size/large?v=v2&amp;amp;px=999\"         alt=\"throttle-msg.png\"         title=\"throttle-msg.png\"/></figure><p>For information on how to view details for throttled functions, see <a href=\"/server-side/functions/manage-functions/view-function-statistics/\">View function statistics</a>.</p><h2 id=\"execution-time-limits-for-event-and-visitor-functions\">Execution time limits for event and visitor functions</h2><p>Event and visitor functions have the following execution limits:</p><ul><li>Execution rate: 180,000 events per minute</li><li>Execution time: 8 hours per minute</li><li>Execution time for each function invocation: 10 seconds<br>If a function exceeds the 10 seconds execution time, the following error is written to the log:<br><code>Exception 504 - Invocation timeout limit exceeded.</code></li></ul><h2 id=\"execution-rate-and-execution-time-example-1\">Execution rate and execution time: example 1</h2><p>In this example, we assume that function that communicates with external APIs takes about 100 ms per invocation. In addition, we assume there is only one function configured for the account and the average execution rate of this function is 1000 invocations per second.</p><p>The execution rate and execution time within a 1-minute time window are as follows:</p><p>Events per second = 1000 * 60 * 1 min = <strong>execution rate of 60,000 invocations per minute</strong></p><p>Execution time = 1000 invocations/second * 100 ms / 1000 = 100 minutes = <strong>1.66 hours execution time per minute</strong></p><p>In this case, the execution rate and execution time are both below the limits.</p><h2 id=\"execution-rate-and-execution-time-example-2\">Execution rate and execution time: example 2</h2><p>In this example, we assume that external API performance temporarily degrades, and the function execution time is 800 ms per invocation. That means that our execution time is increased by 8.</p><p>Execution time = (1000 inv/s * 100 ms / 1000) * 8 = 800 minutes = <strong>13.28 hours of execution time per minute</strong>.</p><p>The execution time in this case is 13.28 hours per minute, which is greater than 8 hours/minute maximum. Function invocations may be throttled.</p>"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/server-side/functions/code-editor/",
            "title": "Functions code editor",
            "body":"<p>The Tealium Functions code editor provides tabs for creating, configuring, testing, and monitoring functions, as well as viewing logs and getting an authentication token.</p><figure><img src=\"https://community.tealiumiq.com/t5/image/serverpage/image-id/11380i197FEEE890FC29C6/image-size/large?v=v2&amp;amp;px=999\"         alt=\"functions-code-editor.png\"         title=\"functions-code-editor.png\"/></figure><h2 id=\"code-tab\">Code tab</h2><p>When you create a new function, the <strong>Code</strong> tab displays example function code with explanations in comments. You can modify the example code, or replace it with your own code.</p><h2 id=\"monitoring-tab\">Monitoring tab</h2><p>The <strong>Monitoring</strong> tab displays the following function statistics for the last hour, 12 hours, day, 7 days, or 30 days:</p><ul><li>Invocations</li><li>Average Execution Time</li><li>Errors</li></ul><h2 id=\"logs-tab\">Logs tab</h2><p>The <strong>Logs</strong> tab displays a list of log files from function execution. Log files are kept for 30 days.</p><h2 id=\"configuration-tab\">Configuration tab</h2><p>Use the <strong>Configuration</strong> tab to change the function name, add or change notes about the function, or change the event or audience that triggers the function. The feed cannot be changed after the initial function configuration.</p><h2 id=\"test-tab\">Test tab</h2><p>Use the <strong>Test</strong> tab to create a test payload and test your function. You can modify the example payload shown in the <strong>Test</strong> tab, or use test data from your website. For more information on obtaining test data from your website, see <a href=\"/server-side/functions/manage-functions/test-functions/\">Test Functions</a>. Test results and log files are available after the function is executed.</p><h2 id=\"advanced-tab\">Advanced tab</h2><p>Use the <strong>Advanced</strong> tab to assign authentication tokens to a function.</p>"
        }  

    , 
        {
            "weight": "25",
            "url": "https://docs.tealium.com/server-side/functions/modules/",
            "title": "APIs and libraries for functions",
            "body":"<p>Functions can use the following APIs and libraries:</p><ul><li>Crypto-ES.js</li><li>TweetNaCl.js</li><li>JavaScript Console API</li></ul><h2 id=\"crypto-esjs\">Crypto-ES.js</h2><p>Crypto-ES.js is a library of encryption algorithms available that provides hashing, encoding, and cipher algorithms. For more information, see <a href=\"https://www.npmjs.com/package/crypto-es/v/1.2.7\">Crypto-ES</a>.</p><p>The following example shows how to encrypt and decrypt text:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">encrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">encrypt</span>(<span style=\"color:#e6db74\">&#34;Message&#34;</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">encrypted</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">decrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">decrypt</span>(<span style=\"color:#a6e22e\">encrypted</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">decrypted</span>));</span></span></code></pre></div><h2 id=\"tweetnacljs\">TweetNaCl.js</h2><p>TweetNaCl is a crypto library that implements secret-key authenticated encryption, public-key authenticated encryption, and hashing and public-key signatures. The TweetNaCl library is available only for event and visitor functions.</p><p>Import the TweetNaCl.js module into your event or visitor function as follows:</p><p><code>import nacl from 'tweetnacl';</code></p><p>For more information, see <a href=\"https://www.npmjs.com/package/tweetnacl\">NPM TweetNaCl.js</a>.</p><h2 id=\"javascript-console-api\">JavaScript console API</h2><p>Use the JavaScript console functions to write messages and errors to the log.</p><p><code>console.log()</code> , <code>console.info(),</code> and <code>console.debug()</code> log messages go to the info output stream. <code>console.warn()</code> and <code>console.error()</code> log messages go to the error output stream.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>The info and error output streams are each limited to 10 Kb of data per function invocation. If log messages exceed this limit, the log file will contain the first 10 Kb of data and end with the following message:<br><code>Output was too large and has been truncated.</code></p><p>The console object provides other methods that are supported by functions. For more information, refer to any JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\" title=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\">specification</a> for the console object. The following additional console methods are supported:</p><ul><li><code>assert()</code></li><li><code>count()</code></li><li><code>countReset()</code></li><li><code>group()</code></li><li><code>groupEnd()</code></li><li><code>time()</code></li><li><code>timeEnd()</code></li><li><code>timeLog()</code></li></ul><h3 id=\"console-api-output\">Console API output</h3><p>The output from most console functions is shown in the <strong>Messages</strong> section of the <strong>Logs</strong> display. For example:</p><pre tabindex=\"0\"><code>Messages:Function Start</code></pre><p>Output from <code>console.warn()</code> and <code>console.error()</code> is shown in the <strong>Errors</strong> section, below the <strong>Messages</strong> output, as follows:</p><pre tabindex=\"0\"><code>Errors:Warning - page not foundError - variable not defined</code></pre><h3 id=\"consoleassert\">console.assert()</h3><p>If a function is triggered on EventStream and <code>console.assert()</code> is called as follows:</p><pre tabindex=\"0\"><code>console.assert(visitor, &#34;visitor not defined&#34;);</code></pre><p>The <code>visitor</code> object is only defined when the trigger is AudienceStream, so the assertion is false and the output is as follows:</p><pre tabindex=\"0\"><code>Assertion failed: visitor not defined</code></pre><h3 id=\"consolegroup-and-consolegroupend\">console.group() and console.groupEnd()</h3><p><code>console.group()</code> and <code>console.groupEnd() </code> can be used to format related messages in the log. <code>console.log()</code> messages that follow <code>console.group()</code> are indented in the log. The indentation ends after <code>console.groupEnd()</code> is called.</p><p>If the function code contains the following:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">group</span>(<span style=\"color:#e6db74\">&#34;Event info:&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Account: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Visitor ID: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">visitor_id</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">groupEnd</span>();</span></span></code></pre></div><p>The output is as follows:</p><pre tabindex=\"0\"><code>Event info:  Account:  Acme Mfg  Visitor ID:  017407a1d9e50019633c3cea732703079011607100bd6</code></pre><h3 id=\"consoletime-and-consoletimelog\">console.time() and console.timeLog()</h3><p>When a function calls <code>console.time()</code>, there is no output. The time that <code>console.time()</code> was called with that string is noted. When <code>console.timeLog()</code> is called with the same string, <code>&quot;Current Time: &quot;</code> in this example, the output is the specified string followed by the time elapsed since <code>console.time()</code> was called:</p><pre tabindex=\"0\"><code>Current Time: : 1ms</code></pre><p>After a function calls <code>console.timeEnd()</code>, <code>console.timeLog()</code> cannot be called until <code>console.time()</code> is called again.</p><h3 id=\"consolecount-and-consolecountreset\">console.count() and console.countReset()</h3><p>Each time <code>console.count()</code> is called with the same string, the count is incremented. The output of <code>console.count()</code> is the string followed by the count. If <code>console.count(&quot;Current count: &quot;); </code> is called twice, the output is as follows:</p><pre tabindex=\"0\"><code>Current count: : 1Current count: : 2</code></pre><p><code>console.countReset()</code> resets the count for the specified string to zero.</p>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/server-side/functions/best-practices/",
            "title": "Functions best practices",
            "body":"<h2 id=\"run-tests-to-determine-execution-time\">Run tests to determine execution time</h2><p>Data transformation functions are limited to 150 ms of execution time. Event and visitor functions are limited to 10 seconds of execution time.</p><p>There are a lot of factors that affect function execution time. To verify that a function can execute in the allowed time, run several tests with the expected event payload.</p><h2 id=\"normalize-the-universal-data-object-udo\">Normalize the universal data object (UDO)</h2><p>The data layer contains basic information about the page where the event occurred. The UDO is a more dynamic structure that contains information for specific event type, which means the size of the event may vary. The recommended maximum event size is 50 KB. To keep the data compact, remove redundant data entries. If the same data occurs in multiple fields (for example, in the data layer and in the UDO), it is a candidate for removal from the UDO. If a chunk of data is not required for a particular event type, it is also a candidate for removal from the event UDO.</p><h2 id=\"use-partial-import-for-standard-modules\">Use partial import for standard modules</h2><p>The execution environment provides standard modules that support partial import, including CryptoES.</p><p>Import only the required functionality for a module, instead of importing the entire module. For example:</p><pre tabindex=\"0\"><code>import { MD5 } from &#39;crypto-es/lib/md5.js&#39;;</code></pre><h2 id=\"avoid-the-use-of-debugging-log-messages\">Avoid the use of debugging log messages</h2><p>Before publishing a function to your production environment, remove or comment out <code>console.log</code> messages that are used for debugging purposes.</p><p>For example, avoid using <code>JSON.stringify</code> to send the entire event to the log. Use log messages for specific variables instead, as shown in the following example:</p><pre tabindex=\"0\"><code>console.log(event.data.udo.property_to_track);</code></pre><h2 id=\"use-the-flatten-built-in-module\">Use the flatten() built-in module</h2><p>The built-in <code>flatten()</code> module can be used to flatten any nested object, which is particularly useful for data transformation functions. Transformation functions can work with nested data structures, such as arrays of objects or nested objects, but need to flatten the incoming event so that it does not contain nested data structures.</p><h2 id=\"use-javascript-optimizations\">Use JavaScript optimizations</h2><p>Use JavaScript optimizations for intensive tasks, such as iterating over an array or object properties.</p><h3 id=\"example-of-iterating-over-an-array\">Example of iterating over an array</h3><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">array</span> <span style=\"color:#f92672\">=</span> [<span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#ae81ff\">3</span>];</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>.<span style=\"color:#a6e22e\">length</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">arrayLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayItem</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>[<span style=\"color:#a6e22e\">i</span>];</span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div><h3 id=\"example-of-iterating-over-object-properties\">Example of iterating over object properties</h3><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">obj</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">a</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">1</span>, <span style=\"color:#a6e22e\">b</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#a6e22e\">c</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">3</span> };</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keys</span> <span style=\"color:#f92672\">=</span> Object.<span style=\"color:#a6e22e\">getOwnPropertyNames</span>(<span style=\"color:#a6e22e\">obj</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keysLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>.<span style=\"color:#a6e22e\">length</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">keysLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keyName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>[<span style=\"color:#a6e22e\">i</span>];</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">value</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">obj</span>[<span style=\"color:#a6e22e\">keyName</span>];</span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div>"
        }  

    ]
}
