
{
    "kind": "term",
    "name": "ss_functions_overview",
    "count": 11,
    "items": [

    
        {
            "weight": "5",
            "url": "https://docs.tealium.com/server-side/functions/about/",
            "title": "About functions",
            "body": "<h2 id=\"function-types\">Function types</h2>\n<p>Tealium currently supports the following function types:</p>\n<ul>\n<li><strong>Data Transformation Functions</strong> – Functions that are triggered after an event is received by Tealium Collect and when the trigger conditions for the function are met.\nFor more information, see <a href=\"/server-side/functions/data-transformation-functions/about/\">About Data Transformation Functions</a>.</li>\n<li><strong>Event Functions</strong> – Functions that are triggered after an event is processed. For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.\nTo use functions that are triggered by processed events, you must have Tealium EventStream API Hub enabled. For more information, see <a href=\"/server-side/getting-started/eventstream-api-hub/introduction/\">Introduction to EventStream</a>.</li>\n<li><strong>Visitor Functions</strong> – Functions that are triggered after a visitor is processed. For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.\nTo use functions that are triggered by processed visitors, you must have Tealium AudienceStream CDP enabled. For more information, see <a href=\"/server-side/getting-started/audiencestream-cdp/introduction/\">Introduction to AudienceStream</a>.</li>\n</ul>\n<h2 id=\"key-benefits\">Key benefits</h2>\n<p>Functions provides a serverless environment that allows you to extend the functionality of the Customer Data Hub to suit your needs.</p>\n<h3 id=\"serverless-environment\">Serverless environment</h3>\n<p>In the serverless functions environment, functions are hosted on the Tealium Platform. Tealium manages the servers and platform software and you can focus on implementing functions for your unique data needs. Resources, such as memory, are allocated automatically each time a function is invoked. For more information, see <a href=\"/server-side/functions/environment/\">execution environment and rate limits</a>.</p>\n<h3 id=\"extend-the-customer-data-hub\">Extend the Customer Data Hub</h3>\n<p>You can use data transformation functions to modify incoming event data. For example, a data transformation function can flatten nested objects, remove sensitive data, or populate variables in the event object.</p>\n<p>You can use event and visitor functions to retrieve data from other systems, augment Tealium data, or send data to other endpoints. If a function modifies visitor or event data, the changes are local to the function and do not affect the Tealium data. Functions can send the modified data to Tealium Collect, where it is processed again and the changes are reflected in Tealium data.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>There is a cost associated with sending event or visitor data to the Tealium Collect endpoint because the number of events is increased each time data is sent. For more information, see <a href=\"/server-side/administration/understanding-the-usage-report/#billing-estimation\">Billing estimation</a>.</p>\n"
        }  

    , 
        {
            "weight": "10",
            "url": "https://docs.tealium.com/server-side/functions/triggers/",
            "title": "Function triggers",
            "body": "<p>Functions are triggered by events at different points in the data pipeline, depending on the function type.</p>\n<h2 id=\"data-transformation-functions\">Data transformation functions</h2>\n<p>Data transformation functions have custom triggers, which are rules that specify the conditions that trigger execution of a function. If the trigger conditions for a data transformation function are met, the function is invoked after the event is collected from the data source and before the event is processed, as shown in the following data pipeline diagram. Data transformation functions support all event types except for file import events.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/data-source-event-collected.png\"><img src=\"https://docs.tealium.com/images/server-side/data-source-event-collected.png\"\n         alt=\"data-source-event-collected.png\"\n         title=\"data-source-event-collected.png\"/>\n    </a>\n</figure>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Only one function can be triggered by a custom trigger. If an event matches more than one function trigger, the function with the oldest <strong>Date Modified</strong> is the only function that is triggered.</p>\n<p>For more information, see <a href=\"/server-side/functions/data-transformation-functions/about/\">About Data Transformation Functions</a>.</p>\n<h2 id=\"event-and-visitor-functions\">Event and visitor functions</h2>\n<p>Event and visitor functions are invoked after the event or visitor has been processed, as shown in the following data pipeline diagram.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/processedeventfeed-full.png\"><img src=\"https://docs.tealium.com/images/server-side/processedeventfeed-full.png\"\n         alt=\"ProcessedEventFeed_Full.png\"\n         title=\"ProcessedEventFeed_Full.png\"/>\n    </a>\n</figure>\n<p>For more information, see <a href=\"/server-side/functions/event-visitor-functions/about/\">About Event and Visitor Functions</a>.</p>\n"
        }  

    , 
        {
            "weight": "15",
            "url": "https://docs.tealium.com/server-side/functions/environment/",
            "title": "Execution environment and rate limits",
            "body": "<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>On June 15, 2024, we will introduce limits on log messages allowed per function per account and on the total log messages allowed per account for all functions. For more information, see <a href=\"#function-limitations\">Function limitations</a>.</p>\n<h2 id=\"execution-environment\">Execution environment</h2>\n<p>The functions execution environment is built on the <a href=\"https://www.graalvm.org/%22\">GraalVM</a> JavaScript runtime and runs ECMAScript 2020 compatible code.</p>\n<h3 id=\"function-limitations\">Function limitations</h3>\n<ul>\n<li>Functions cannot use third-party libraries except the libraries listed in <a href=\"/server-side/functions/modules/\">APIs and libraries for functions</a>.</li>\n<li>Functions have 32 MB of memory.<br>\nIf a function attempts to use more than 32 MB, the following error is written to the log:<br>\n<code>Exception 400 BAD REQUEST - OutOfMemoryError: memory limit 32 mb is exceeded.</code></li>\n<li>Maximum function size is 64 KB, which is approximately 1500 lines of code.<br>\nFunctions larger than 64 KB cannot be saved until the size has been reduced.</li>\n<li>Function log messages are limited as follows:\n<ul>\n<li><strong>Limit per function per account</strong>: 5MB of log messages per minute. If this limit is reached, logging for the function is throttled for 1 minute. When a function is throttled, information messages are not written to the log. Error and warning messages continue to be written to the log. Full logging resumes after 1 minute.</li>\n<li><strong>Account limit for all functions</strong>: 50MB of log messages per minute. Currently, logging will not be throttled. If this limit is exceeded, Tealium may request that you limit the number of log messages.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"runtime-versions\">Runtime Versions</h3>\n<p>The execution environment for functions, referred to as the runtime version, varies depending on the function type, as follows:</p>\n<ul>\n<li><strong>Data Transformation Functions</strong> – The current runtime version is Transformation V0. For more information, see <a href=\"/server-side/functions/data-transformation-functions/about/\">About Data Transformation Functions</a>.</li>\n<li><strong>Event and Visitor Functions</strong> – The latest runtime version is Action V3. Existing functions use Action V2, which is deprecated. For more information, see the following:\n<ul>\n<li><a href=\"/server-side/functions/event-visitor-functions/v2-functions/\">Event and visitor functions V2</a></li>\n<li><a href=\"/server-side/functions/event-visitor-functions/event-visitor-v3/\">Event and visitor functions V3</a></li>\n<li><a href=\"/server-side/functions/event-visitor-functions/migrate-v2-to-v3/\">Migrate a V2 function to V3</a></li>\n</ul>\n</li>\n</ul>\n<p>The runtime version for a function is shown in the code tab of the code editor, as shown below: <figure><a class=\"slb\" href=\"/images/server-side/functions-runtime-version-location.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-runtime-version-location.png\"/>\n    </a>\n</figure></p>\n<p>Runtime versions may be updated to provide new features. When a new runtime version is available, a message similar to the following is displayed on the <strong>Functions Overview</strong> page: <figure><a class=\"slb\" href=\"/images/server-side/functions-new-runtime-available.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-new-runtime-available.png\"\n         alt=\"Alert message that says new runtime version is available and includes the name and a summary of the updates.\"\n         title=\"Alert message that says new runtime version is available and includes the name and a summary of the updates.\"/>\n    </a>\n</figure></p>\n<p>As Tealium releases new runtime versions, older versions will be deprecated, and will eventually become obsolete. A message is displayed on the <strong>Functions Overview</strong> screen and on the <strong>Code</strong> tab for a function when the runtime version in use is deprecated or becomes obsolete.</p>\n<h2 id=\"execution-time-limits-for-data-transformation-functions\">Execution time limits for data transformation functions</h2>\n<p>Data transformation functions have the following execution limits:</p>\n<ul>\n<li>1 hour of execution time per minute OR</li>\n<li>250,000 invocations per minute (15 mm per hour)</li>\n<li>150 milliseconds of execution time for each function invocation<br>\nIf a function exceeds the 150 milliseconds execution time, the following error is written to the log:<br>\n<code>Invocation timeout limit of 150 milliseconds is exceeded</code></li>\n</ul>\n<p>These execution limits are based on the account and the region. The sum of the execution time and the number of invocations for all functions in an account for a region cannot exceed these limits.</p>\n<p>If either limit is exceeded, function execution is briefly stopped (throttled). The following message is displayed in the <strong>Functions Overview</strong> and a yellow alert icon is displayed next to a throttled function, as follows:</p>\n<figure><a class=\"slb\" href=\"/images/server-side/throttle-msg.png\"><img src=\"https://docs.tealium.com/images/server-side/throttle-msg.png\"\n         alt=\"In the last 24 hours, some functions in your profile have reached their rate limits and are being throttled.\"\n         title=\"In the last 24 hours, some functions in your profile have reached their rate limits and are being throttled.\"/>\n    </a>\n</figure>\n<p>For information on how to view details for throttled functions, see <a href=\"/server-side/functions/manage-functions/view-function-statistics/\">View function statistics</a>.</p>\n<h2 id=\"execution-time-limits-for-event-and-visitor-functions\">Execution time limits for event and visitor functions</h2>\n<p>Event and visitor functions have the following execution limits:</p>\n<ul>\n<li>Execution rate: 180,000 invocations per minute</li>\n<li>Execution time: 8 hours per minute</li>\n<li>Execution time for each function invocation: 10 seconds<br>\nIf a function exceeds the 10 seconds execution time, the following error is written to the log:<br>\n<code>Exception 504 - Invocation timeout limit of 10000 milliseconds is exceeded.</code></li>\n</ul>\n<h2 id=\"execution-rate-and-execution-time-example-1\">Execution rate and execution time: example 1</h2>\n<p>In this example, we assume that function that communicates with external APIs takes about 100 ms per invocation. In addition, we assume there is only one function configured for the account and the average execution rate of this function is 1000 invocations per second.</p>\n<p>The execution rate and execution time within a 1-minute time window are as follows:</p>\n<p>Execution rate = 1000 * 60 * 1 min = <strong>execution rate of 60,000 invocations per minute</strong></p>\n<p>Execution time = 1000 invocations/second * 100 ms / 1000 = 100 minutes = <strong>1.66 hours execution time per minute</strong></p>\n<p>In this case, the execution rate and execution time are both below the limits.</p>\n<h2 id=\"execution-rate-and-execution-time-example-2\">Execution rate and execution time: example 2</h2>\n<p>In this example, we assume that external API performance temporarily degrades, and the function execution time is 800 ms per invocation. That means that our execution time is increased by 8.</p>\n<p>Execution time = (1000 inv/s * 100 ms / 1000) * 8 = 800 minutes = <strong>13.28 hours of execution time per minute</strong>.</p>\n<p>The execution time in this case is 13.28 hours per minute, which is greater than 8 hours/minute maximum. Function invocations may be throttled.</p>\n"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/server-side/functions/code-editor/",
            "title": "Functions code editor",
            "body": "<p>The Tealium Functions code editor provides tabs for creating, configuring, testing, and monitoring functions, as well as viewing logs and getting an authentication token.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/functions-code-editor.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-code-editor.png\"\n         alt=\"functions-code-editor.png\"\n         title=\"functions-code-editor.png\"/>\n    </a>\n</figure>\n<h2 id=\"code-tab\">Code tab</h2>\n<p>When you create a new function, the <strong>Code</strong> tab displays example function code with explanations in comments. You can modify the example code, or replace it with your own code.</p>\n<h2 id=\"monitoring-tab\">Monitoring tab</h2>\n<p>The <strong>Monitoring</strong> tab displays the following function statistics for the last hour, 12 hours, day, 7 days, or 30 days:</p>\n<ul>\n<li>Invocations</li>\n<li>Average Execution Time</li>\n<li>Errors</li>\n</ul>\n<h2 id=\"logs-tab\">Logs tab</h2>\n<p>The <strong>Logs</strong> tab displays a list of log files from function execution. Log files are kept for 30 days. Functions can use the JavaScript console functions to write messages and errors to the log. For more information, see <a href=\"/server-side/functions/modules/#javascript-console-api\">JavaScript console API</a>.</p>\n<h2 id=\"configuration-tab\">Configuration tab</h2>\n<p>Use the <strong>Configuration</strong> tab to change the function name, add or change notes about the function, or change the event or audience that triggers the function. The feed cannot be changed after the initial function configuration.</p>\n<h2 id=\"test-tab\">Test tab</h2>\n<p>Use the <strong>Test</strong> tab to create a test payload and test your function. You can modify the example payload shown in the <strong>Test</strong> tab, or use test data from your website. For more information on obtaining test data from your website, see <a href=\"/server-side/functions/manage-functions/test-functions/\">Test Functions</a>. Test results and log files are available after the function is executed.</p>\n<h2 id=\"advanced-tab\">Advanced tab</h2>\n<p>Use the <strong>Advanced</strong> tab to assign authentication tokens to a function.</p>\n"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/server-side/functions/event-visitor-functions/v2-functions/",
            "title": "Event and visitor functions V2",
            "body": "<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>The Action V2 runtime is obsolete and is no longer supported. Functions that use the V2 runtime are still executing but you cannot save code changes. To save code changes, you need to update the runtime version, which may require changes to the function code. For information on the required code changes, see <a href=\"/server-side/functions/event-visitor-functions/migrate-v2-to-v3/\">Migrate a V2 function to the V3 runtime</a>.</p>\n<p>New functions use the V3 runtime by default. For more information, see <a href=\"/server-side/functions/event-visitor-functions/event-visitor-v3/\">Event and Visitor Functions V3</a>.</p>\n<h2 id=\"named-exports\">Named exports</h2>\n<p>The Tealium module exports five named exports for event and visitor functions: <code>auth</code>, <code>event</code>, <code>visitor</code>, <code>store</code>, and <code>tealium</code>. Functions import these named exports as follows:</p>\n<pre tabindex=\"0\"><code>import { auth, visitor, event, store, tealium } from &#34;tealium&#34;; \n</code></pre><h2 id=\"auth-object-authget\">Auth object: auth.get()</h2>\n<p>Event and visitor functions require authentication to access some service providers, such as Facebook or Google. For more information, see <a href=\"/server-side/functions/event-visitor-functions/authentication/\">Adding an Authentication to a Function</a>. When you add an authentication, an access token is returned.</p>\n<p>The access token is passed to the <code>auth.get()</code> method, which returns an ID for the authentication that can be used in HTTP requests.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>authName</td>\n<td>string</td>\n<td>Specifies the name of the authentication, which is the name entered when the authentication was added to the function.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"event-object\">Event object</h2>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Event functions cannot change an event because these functions are invoked after Tealium has processed the event. To change an event, use either event attribute enrichments or an event transformation function. You can also change the event at the data source before it is sent to Tealium.</p>\n<p>The <code>event</code> object is available when a function is triggered by the event feed and contains the event data.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Property</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>event.id</code></td>\n<td>string</td>\n<td>Tealium Event ID.</td>\n</tr>\n<tr>\n<td><code>event.visitor_id</code></td>\n<td>string</td>\n<td>Tealium Visitor ID.</td>\n</tr>\n<tr>\n<td><code>event.account</code></td>\n<td>string</td>\n<td>Tealium Account.</td>\n</tr>\n<tr>\n<td><code>event.profile</code></td>\n<td>string</td>\n<td>Tealium Profile.</td>\n</tr>\n<tr>\n<td><code>event.data</code></td>\n<td>object</td>\n<td>An object that contains event attribute data, such as <code>event.data.udo.page_category</code> or <code>event.data.udo.order_id</code>.</td>\n</tr>\n<tr>\n<td><code>function getAttributeNameById(id)</code></td>\n<td>string</td>\n<td>Returns a string containing the name of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeValueById(id)</code></td>\n<td>any</td>\n<td>Returns the value of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"event-object-example\">Event object example</h3>\n<p>The following shows an example of event object data:</p>\n<pre tabindex=\"0\"><code>{\n  &#34;account&#34;: &#34;your-account&#34;,\n  &#34;profile&#34;: &#34;main&#34;,\n  &#34;event_id&#34;: &#34;run-test-event-id&#34;,\n  &#34;visitor_id&#34;: &#34;run-test-visitor-id&#34;,\n  &#34;data&#34;: {\n    &#34;dom&#34;: {\n      &#34;viewport_height&#34;: 766,\n      &#34;referrer&#34;: &#34;&#34;,\n      &#34;viewport_width&#34;: 1440,\n      &#34;domain&#34;: &#34;www.example.com&#34;,\n      &#34;title&#34;: &#34;Home Page&#34;,\n      &#34;query_string&#34;: &#34;q=help&#34;,\n      &#34;hash&#34;: &#34;&#34;,\n      &#34;url&#34;: &#34;https://www.example.com/?q=help&#34;,\n      &#34;pathname&#34;: &#34;/&#34;\n    },\n    &#34;udo&#34;: {\n      &#34;tealium_event&#34;: &#34;page_view&#34;,\n      &#34;ut.account&#34;: &#34;your-account&#34;,\n      &#34;ut.visitor_id&#34;: &#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;,\n      &#34;page_name&#34;: &#34;Home Page&#34;,\n      &#34;ut.event&#34;: &#34;view&#34;,\n      &#34;search_keyword&#34;: &#34;help&#34;,\n      &#34;ut.domain&#34;: &#34;example.com&#34;,\n      &#34;tealium_profile&#34;: &#34;main&#34;,\n      &#34;ut.version&#34;: &#34;ut4.46.202006020705&#34;,\n      &#34;tealium_session_id&#34;: &#34;1609910608323&#34;,\n      &#34;tealium_account&#34;: &#34;your-account&#34;,\n      &#34;ut.profile&#34;: &#34;main&#34;,\n    },\n    &#34;firstparty_tealium_cookies&#34;: {\n      &#34;utag_main__sn&#34;: &#34;12&#34;,\n      &#34;utag_main_dc_visit&#34;: &#34;12&#34;,\n      &#34;utag_main_ses_id&#34;: &#34;1609910610822&#34;,\n      &#34;utag_main_dc_region&#34;: &#34;us-east-1&#34;,\n      &#34;utag_main__st&#34;: &#34;1609913306118&#34;,\n      &#34;utag_main_v_id&#34;: &#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;,\n      &#34;utag_main__se&#34;: &#34;66&#34;,\n      &#34;utag_main__ss&#34;: &#34;0&#34;,\n      &#34;utag_main_dc_event&#34;: &#34;60&#34;,\n      &#34;utag_main__pn&#34;: &#34;5&#34;\n    }\n  },\n  &#34;env&#34;: &#34;prod&#34;,\n  &#34;post_time&#34;: 1537305808000\n}\n</code></pre><p>Event data can be accessed in a function as follows:</p>\n<pre tabindex=\"0\"><code>const data = {};\n    // DOM variables are stored in event.dom\n    data.current_url = event?.dom?.url;\n    // Standard UDO event variables are stored in event.data.udo\n    data.session_id = event?.data?.udo?.tealium_session_id;\n    // First Party cookies are stored in event.firstparty_tealium_cookies\n    data.trace_id = event?.firstparty_tealium_cookies?.trace_id;\n    // Meta variables are stored in event.meta\n    data.meta_description = event?.meta?.description;\n    data.tealium_event = event?.data?.udo?.tealium_event;\n    data.tealium_account = event?.data?.udo?.tealium_account;\n    data.tealium_profile = event?.data?.udo?.tealium_profile;\n</code></pre><h2 id=\"store-object-storeget\">Store object: store.get()</h2>\n<p>The <code>store</code> object is used to store key-value pairs, referred to as global variables, which can be used to share data with multiple functions. The key is the name of the variable. The value can be a numeric or string constant. You can add, edit, and delete global variables on the <strong>Code</strong> tab of the functions code editor. Functions can retrieve the value of a global variable, but cannot modify it.</p>\n<p>V2 functions can retrieve a value for a key by calling the <code>store.get()</code> method and passing the key as the parameter.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>globalParameterKey</td>\n<td>string</td>\n<td>Specifies the key of the global variable to get.</td>\n</tr>\n</tbody>\n</table>\n<p>For more information on adding, editing, and using global variables, see <a href=\"/server-side/functions/manage-functions/manage-global-variables/\">Manage global variables</a>.</p>\n<h2 id=\"tealium-object-sendcollectevent\">Tealium object: sendCollectEvent()</h2>\n<p>The <code>sendCollectEvent()</code> method sends an event to Tealium Collect HTTP API and returns a string.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Parameter</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>event</td>\n<td>EventsClientEventObject</td>\n<td>An event object to send to Tealium Collect HTTP API.</td>\n</tr>\n<tr>\n<td>account</td>\n<td>string</td>\n<td>Optional. If specified, replaces the value of event.tealium_account.</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>string</td>\n<td>Optional. If specified, replaces the value of event.tealium_profile.</td>\n</tr>\n<tr>\n<td>dataSourceId</td>\n<td>string</td>\n<td>Optional. If specified, replaces the value of event.tealium_datasource.</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>Response</code> interface of the Tealium Collect HTTP API represents the response to a request. The <code>Response</code> model is the same as for <code>fetch</code> API, except that the URL is not available in the result from the collect client.</p>\n<h2 id=\"visitor-object\">Visitor object</h2>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Visitor functions cannot change a visitor profile because these functions are invoked after Tealium has processed the visitor profile. To change a visitor profile, use visit or visitor attribute enrichments.</p>\n<p>The <code>visitor</code> object is available when a function is triggered by the audience feed and contains the visitor data.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Property</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>visitor.metrics</code></td>\n<td>Record&lt;string, number&gt;</td>\n<td>Visitor metrics.</td>\n</tr>\n<tr>\n<td><code>visitor.metrics_sets</code></td>\n<td>Tally&lt;string, number&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td><code>visitor.dates</code></td>\n<td>Record&lt;string, number&gt;</td>\n<td>Visitor dates.</td>\n</tr>\n<tr>\n<td><code>visitor.audiences_joined_at</code></td>\n<td>Record&lt;string, number&gt;</td>\n<td>Timestamp when the visitor joined audiences.</td>\n</tr>\n<tr>\n<td><code>visitor.properties</code></td>\n<td>Record&lt;string, any&gt;</td>\n<td>Visitor properties.</td>\n</tr>\n<tr>\n<td><code>visitor.properties.account</code></td>\n<td>string</td>\n<td>Tealium Account.</td>\n</tr>\n<tr>\n<td><code>visitor.properties.profile</code></td>\n<td>string</td>\n<td>Tealium Profile.</td>\n</tr>\n<tr>\n<td><code>visitor.properties.visitor_id</code></td>\n<td>string</td>\n<td>Tealium Visitor ID.</td>\n</tr>\n<tr>\n<td><code>visitor.property_sets</code></td>\n<td>Set&lt;string, any&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td><code>visitor.audiences</code></td>\n<td>string[]</td>\n<td>List of joined audiences.</td>\n</tr>\n<tr>\n<td><code>visitor.badges</code></td>\n<td>string[]</td>\n<td>List of badges.</td>\n</tr>\n<tr>\n<td><code>visitor.creation_ts</code></td>\n<td>number</td>\n<td>Visitor creation timestamp.</td>\n</tr>\n<tr>\n<td><code>visitor.flags</code></td>\n<td>Map&lt;string, Boolean&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td><code>visitor.current_visit</code></td>\n<td>Record&lt;string, any&gt;</td>\n<td>Current visit object.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.metrics</code></td>\n<td>Record&lt;string, number&gt;</td>\n<td>Current visit metrics.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.metrics_sets</code></td>\n<td>Tally&lt;string, number&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.dates</code></td>\n<td>Record&lt;string, number&gt;</td>\n<td>Current visit dates.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.properties</code></td>\n<td>Record&lt;string, any&gt;</td>\n<td>Current visit properties.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.flags</code></td>\n<td>Map&lt;string, Boolean&gt;</td>\n<td>Current visit flags.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.property_sets</code></td>\n<td>Set&lt;string, any&gt;</td>\n<td>Current visit property sets.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.creation_ts</code></td>\n<td>number</td>\n<td>Current visit creation timestamp.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.total_event_count</code></td>\n<td>number</td>\n<td>Current visit total event count.</td>\n</tr>\n<tr>\n<td><code>visitor.current_visit.events_compressed</code></td>\n<td>boolean</td>\n<td>Current visit events compressed.</td>\n</tr>\n<tr>\n<td><code>function getAttributeNameById(id)</code></td>\n<td>string</td>\n<td>Returns a string containing the name of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeValueById(id)</code></td>\n<td>any</td>\n<td>Returns the value of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"visitor-object-example\">Visitor object example</h3>\n<p>The following is an example of visitor object data:</p>\n<pre tabindex=\"0\"><code>{\n  &#34;metrics&#34;: {\n    &#34;Metric 1&#34;: 1,\n    &#34;Metric 2&#34;: 2\n  },\n  &#34;dates&#34;: {\n    &#34;Date 1&#34;: 1603373790000,\n    &#34;Date 2&#34;: 1603373522000,\n  },\n  &#34;properties&#34;: {\n    &#34;profile&#34;: &#34;username&#34;,\n    &#34;visitor_id&#34;: &#34;017560818b67001bc185a07f1cd703078003405000b7e&#34;,\n    &#34;account&#34;: &#34;user-account&#34;,\n  },\n  &#34;audiences&#34;: [\n    &#34;Audience 1&#34;,\n    &#34;Audience 2&#34;\n  ],\n  &#34;badges&#34;: [\n    &#34;Badge 1&#34;,\n    &#34;Badge 2&#34;\n  ],\n  &#34;creation_ts&#34;: 1603373522000,\n  &#34;current_visit&#34;: {\n    &#34;metrics&#34;: {\n      &#34;Metric 1&#34;: 1.3,\n      &#34;Metric 2&#34;: 6,\n    },\n    &#34;dates&#34;: {\n      &#34;Date 1&#34;: 1603373868000,\n      &#34;Date 2&#34;: 1603373790000,\n    },\n    &#34;properties&#34;: {\n      &#34;Property 1&#34;: &#34;Chrome&#34;,\n      &#34;Property 2&#34;: &#34;https://URL-for-website &#34;,\n    },\n    &#34;flags&#34;: {\n      &#34;Flag 1&#34;: true,\n      &#34;Flag 2&#34;: false\n    },\n    &#34;property_sets&#34;: {\n      &#34;Property Set 1&#34;: [\n        &#34;Mac desktop&#34;\n      ],\n      &#34;Property Set 2&#34;: [\n        &#34;Chrome&#34;\n      ]\n    },\n    &#34;creation_ts&#34;: 1603373790000,\n    &#34;total_event_count&#34;: 2,\n    &#34;events_compressed&#34;: false\n  },\n  &#34;audiences_joined_at&#34;: {\n    &#34;Audience 1&#34;: 1603363523014,\n    &#34;Audience 2&#34;: 1603363523014\n  }\n}\n</code></pre>"
        }  

    , 
        {
            "weight": "25",
            "url": "https://docs.tealium.com/server-side/functions/modules/",
            "title": "APIs and libraries for functions",
            "body": "<p>Functions can use the following APIs and libraries:</p>\n<ul>\n<li>Crypto-ES.js</li>\n<li>TweetNaCl.js</li>\n<li>JavaScript Console API</li>\n</ul>\n<h2 id=\"crypto-esjs\">Crypto-ES.js</h2>\n<p>Crypto-ES.js is a library of encryption algorithms available that provides hashing, encoding, and cipher algorithms. For more information, see <a href=\"https://www.npmjs.com/package/crypto-es/v/1.2.7\">Crypto-ES</a>.</p>\n<p>The following example shows how to encrypt and decrypt text:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">encrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">encrypt</span>(<span style=\"color:#e6db74\">&#34;Message&#34;</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">encrypted</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">decrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">decrypt</span>(<span style=\"color:#a6e22e\">encrypted</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">decrypted</span>));\n</span></span></code></pre></div><h3 id=\"gcm-mode-for-aes-encryption\">GCM mode for AES encryption</h3>\n<p>The Crypto-ES library supports GCM mode for AES encryption. The following example shows how to encrypt and decrypt text using AES GCM mode:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// import as part of crypto-es lib\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es&#34;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// import as named export in order to safe computing resources (doesn&#39;t work if whole library is imported as above)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">GCM</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/mode-gcm.js&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Encrypt\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">msg</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;Original Message&#34;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">key</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Hex</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;0123456789ABCDEF11113333555577770123456789ABCDEF1111333355557777&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">iv</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Hex</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;0102030405060708090A0B0C&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">authData</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;Additional authentication data&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">encrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">encrypt</span>(<span style=\"color:#a6e22e\">msg</span>, <span style=\"color:#a6e22e\">key</span>, { <span style=\"color:#a6e22e\">iv</span>, <span style=\"color:#a6e22e\">mode</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span> });\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">authTag</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span>.<span style=\"color:#a6e22e\">mac</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">algo</span>.<span style=\"color:#a6e22e\">AES</span>, <span style=\"color:#a6e22e\">key</span>, <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">iv</span>,  <span style=\"color:#a6e22e\">authData</span>, <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">ciphertext</span>, <span style=\"color:#ae81ff\">16</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">enveloped</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">iv</span>.<span style=\"color:#a6e22e\">toString</span>() <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">ciphertext</span>.<span style=\"color:#a6e22e\">toString</span>() <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">authTag</span>.<span style=\"color:#a6e22e\">toString</span>();\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;encrypted: &#34;</span>, <span style=\"color:#a6e22e\">encrypted</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;authTag: &#34;</span>, <span style=\"color:#a6e22e\">authTag</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;enveloped: &#34;</span>, <span style=\"color:#a6e22e\">enveloped</span>);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Decrypt\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">decrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">decrypt</span>(<span style=\"color:#a6e22e\">encrypted</span>, <span style=\"color:#a6e22e\">key</span>, { <span style=\"color:#a6e22e\">iv</span>, <span style=\"color:#a6e22e\">mode</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span> });\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;decrypted: &#34;</span>, <span style=\"color:#a6e22e\">decrypted</span>.<span style=\"color:#a6e22e\">toString</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>));\n</span></span></code></pre></div><h3 id=\"sha3-algorithm\">SHA3 algorithm</h3>\n<p>The crypto-ES library provides the original SHA3 algorithm. The following example shows how to use the SHA3 algorithm:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">SHA3</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/sha3-original.js&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">SHA3</span>(<span style=\"color:#e6db74\">&#34;Original Message&#34;</span>, { <span style=\"color:#a6e22e\">outputLength</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">256</span> });\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;hash: &#34;</span>, <span style=\"color:#a6e22e\">hash</span>);\n</span></span></code></pre></div><h3 id=\"crc32-algorithm\">CRC32 algorithm</h3>\n<p>The crypto-ES library provides the CRC32 algorithm. Each CRC32 function takes an argument representing data and an optional second argument representing the starting seed (for rolling CRC). The return value is a signed 32-bit integer. The supported functions are as follows:</p>\n<ul>\n<li><code>CRC32.buf(byte array[, seed])</code> – The first argument is a sequence of 8-bit unsigned integers (<code>Uint8Array</code> or array of bytes).</li>\n<li><code>CRC32.bstr(binary string[, seed])</code> – The first argument is a binary string where byte <code>i</code> is the low byte of the UCS-2 char: <code>str.charCodeAt(i) &amp; 0xFF</code></li>\n<li><code>CRC32.str(string[, seed])</code> – The first argument is a standard JS string and calculates the hash of the UTF-8 encoding.</li>\n</ul>\n<p>The following example shows how to use the CRC32 algorithm:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CRC32</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/crc32.js&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CRC32</span>.<span style=\"color:#a6e22e\">str</span>(<span style=\"color:#e6db74\">&#34;Original Message&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;hex value: &#34;</span>, (<span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">&gt;&gt;&gt;</span> <span style=\"color:#ae81ff\">0</span>).<span style=\"color:#a6e22e\">toString</span>(<span style=\"color:#ae81ff\">16</span>));\n</span></span></code></pre></div><h2 id=\"tweetnacljs\">TweetNaCl.js</h2>\n<p>TweetNaCl is a crypto library that implements secret-key authenticated encryption, public-key authenticated encryption, and hashing and public-key signatures. The TweetNaCl library is available only for event and visitor functions.</p>\n<p>Import the TweetNaCl.js module into your event or visitor function as follows:</p>\n<p><code>import nacl from 'tweetnacl';</code></p>\n<p>For more information, see <a href=\"https://www.npmjs.com/package/tweetnacl\">NPM TweetNaCl.js</a>.</p>\n<h2 id=\"javascript-console-api\">JavaScript console API</h2>\n<p>Use the JavaScript console functions to write messages and errors to the log.</p>\n<p><code>console.log()</code> , <code>console.info(),</code> and <code>console.debug()</code> log messages go to the info output stream. <code>console.warn()</code> and <code>console.error()</code> log messages go to the error output stream.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>The info and error output streams are each limited to 10 Kb of data per function invocation. If log messages exceed this limit, the log file will contain the first 10 Kb of data and end with the following message:<br>\n<code>Output was too large and has been truncated.</code></p>\n<p>The console object provides other methods that are supported by functions. For more information, refer to any JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\" title=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\">specification</a> for the console object. The following additional console methods are supported:</p>\n<ul>\n<li><code>assert()</code></li>\n<li><code>count()</code></li>\n<li><code>countReset()</code></li>\n<li><code>group()</code></li>\n<li><code>groupEnd()</code></li>\n<li><code>time()</code></li>\n<li><code>timeEnd()</code></li>\n<li><code>timeLog()</code></li>\n</ul>\n<h3 id=\"console-api-output\">Console API output</h3>\n<p>The output from most console functions is shown in the <strong>Messages</strong> section of the <strong>Logs</strong> display. For example:</p>\n<pre tabindex=\"0\"><code>Messages:\n\nFunction Start\n</code></pre><p>Output from <code>console.warn()</code> and <code>console.error()</code> is shown in the <strong>Errors</strong> section, below the <strong>Messages</strong> output, as follows:</p>\n<pre tabindex=\"0\"><code>Errors:\n\nWarning - page not found\nError - variable not defined\n</code></pre><h3 id=\"consoleassert\">console.assert()</h3>\n<p>If a function is triggered on EventStream and <code>console.assert()</code> is called as follows:</p>\n<pre tabindex=\"0\"><code>console.assert(visitor, &#34;visitor not defined&#34;);\n</code></pre><p>The <code>visitor</code> object is only defined when the trigger is AudienceStream, so the assertion is false and the output is as follows:</p>\n<pre tabindex=\"0\"><code>Assertion failed: visitor not defined\n</code></pre><h3 id=\"consolegroup-and-consolegroupend\">console.group() and console.groupEnd()</h3>\n<p><code>console.group()</code> and <code>console.groupEnd() </code> can be used to format related messages in the log. <code>console.log()</code> messages that follow <code>console.group()</code> are indented in the log. The indentation ends after <code>console.groupEnd()</code> is called.</p>\n<p>If the function code contains the following:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">group</span>(<span style=\"color:#e6db74\">&#34;Event info:&#34;</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Account: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Visitor ID: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">visitor_id</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">groupEnd</span>();\n</span></span></code></pre></div><p>The output is as follows:</p>\n<pre tabindex=\"0\"><code>Event info:\n  Account:  Acme Mfg\n  Visitor ID:  017407a1d9e50019633c3cea732703079011607100bd6\n</code></pre><h3 id=\"consoletime-and-consoletimelog\">console.time() and console.timeLog()</h3>\n<p>When a function calls <code>console.time()</code>, there is no output. The time that <code>console.time()</code> was called with that string is noted. When <code>console.timeLog()</code> is called with the same string, <code>&quot;Current Time: &quot;</code> in this example, the output is the specified string followed by the time elapsed since <code>console.time()</code> was called:</p>\n<pre tabindex=\"0\"><code>Current Time: : 1ms\n</code></pre><p>After a function calls <code>console.timeEnd()</code>, <code>console.timeLog()</code> cannot be called until <code>console.time()</code> is called again.</p>\n<h3 id=\"consolecount-and-consolecountreset\">console.count() and console.countReset()</h3>\n<p>Each time <code>console.count()</code> is called with the same string, the count is incremented. The output of <code>console.count()</code> is the string followed by the count. If <code>console.count(&quot;Current count: &quot;); </code> is called twice, the output is as follows:</p>\n<pre tabindex=\"0\"><code>Current count: : 1\nCurrent count: : 2\n</code></pre><p><code>console.countReset()</code> resets the count for the specified string to zero.</p>\n"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/server-side/functions/best-practices/",
            "title": "Functions best practices",
            "body": "<h2 id=\"run-tests-to-determine-execution-time\">Run tests to determine execution time</h2>\n<p>Data transformation functions are limited to 150 ms of execution time. Event and visitor functions are limited to 10 seconds of execution time.</p>\n<p>There are a lot of factors that affect function execution time. To verify that a function can execute in the allowed time, run several tests with the expected event payload.</p>\n<h2 id=\"normalize-the-universal-data-object-udo\">Normalize the universal data object (UDO)</h2>\n<p>The data layer contains basic information about the page where the event occurred. The UDO is a more dynamic structure that contains information for specific event type, which means the size of the event may vary. The recommended maximum event size is 50 KB. To keep the data compact, remove redundant data entries. If the same data occurs in multiple fields (for example, in the data layer and in the UDO), it is a candidate for removal from the UDO. If a chunk of data is not required for a particular event type, it is also a candidate for removal from the event UDO.</p>\n<h2 id=\"use-partial-import-for-standard-modules\">Use partial import for standard modules</h2>\n<p>The execution environment provides standard modules that support partial import, including CryptoES.</p>\n<p>Import only the required functionality for a module, instead of importing the entire module. For example:</p>\n<pre tabindex=\"0\"><code>import { MD5 } from &#39;crypto-es/lib/md5.js&#39;;\n</code></pre><h2 id=\"avoid-the-use-of-debugging-log-messages\">Avoid the use of debugging log messages</h2>\n<p>Before publishing a function to your production environment, remove or comment out <code>console.log</code> messages that are used for debugging purposes.</p>\n<p>For example, avoid using <code>JSON.stringify</code> to send the entire event to the log. Use log messages for specific variables instead, as shown in the following example:</p>\n<pre tabindex=\"0\"><code>console.log(event.data.udo.property_to_track);\n</code></pre><h2 id=\"use-the-flatten-built-in-module\">Use the flatten() built-in module</h2>\n<p>The built-in <code>flatten()</code> module can be used to flatten any nested object, which is particularly useful for data transformation functions. Transformation functions can work with nested data structures, such as arrays of objects or nested objects, but need to flatten the incoming event so that it does not contain nested data structures.</p>\n<h2 id=\"use-javascript-optimizations\">Use JavaScript optimizations</h2>\n<p>Use JavaScript optimizations for intensive tasks, such as iterating over an array or object properties.</p>\n<h3 id=\"example-of-iterating-over-an-array\">Example of iterating over an array</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">array</span> <span style=\"color:#f92672\">=</span> [<span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#ae81ff\">3</span>];\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>.<span style=\"color:#a6e22e\">length</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">arrayLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayItem</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>[<span style=\"color:#a6e22e\">i</span>];\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><h3 id=\"example-of-iterating-over-object-properties\">Example of iterating over object properties</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">obj</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">a</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">1</span>, <span style=\"color:#a6e22e\">b</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#a6e22e\">c</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">3</span> };\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keys</span> <span style=\"color:#f92672\">=</span> Object.<span style=\"color:#a6e22e\">getOwnPropertyNames</span>(<span style=\"color:#a6e22e\">obj</span>);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keysLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>.<span style=\"color:#a6e22e\">length</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">keysLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keyName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>[<span style=\"color:#a6e22e\">i</span>];\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">value</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">obj</span>[<span style=\"color:#a6e22e\">keyName</span>];\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/server-side/functions/event-visitor-functions/event-visitor-v3/",
            "title": "Event and visitor functions V3",
            "body": "<h2 id=\"input-data\">Input data</h2>\n<p>The input parameters vary depending on function type, as follows:</p>\n<ul>\n<li>Event functions have an <code>event</code> parameter. The <code>visit</code> and <code>visitor</code> parameters are null.</li>\n<li>Visitor functions have <code>visitor</code> and <code>visit</code> parameters. The <code>event</code> parameter is null.</li>\n</ul>\n<p>Event and visitor functions have additional parameters, <code>helper</code>, which provides <code>helper.getAuth()</code> and <code>helper.getGlobalVariable()</code> for getting authorization and retrieving global variables.</p>\n<h2 id=\"activate-function\">activate() function</h2>\n<p>When you create a V3 event or visitor function, default code is shown in the <strong>Code</strong> tab of the functions code editor. This code contains a global <code>activate</code> function. The input parameters for your function are passed to the <code>activate()</code> function. The following example shows <code>activate()</code> for an event function:</p>\n<pre tabindex=\"0\"><code>activate(async ({ event, helper }) =&gt; {\n\n  ...\n\n});\n</code></pre><p>Change the code between the first and last lines of the default code to suit your needs.</p>\n<h2 id=\"track-function\">track() function</h2>\n<p>Functions can use the global <code>track()</code> function to send an event to Tealium Collect. <code>track()</code> has two input parameters, as follows:</p>\n<ul>\n<li><code>data</code> object – The event data to be sent to Tealium Collect.</li>\n<li><code>config</code> object – Optional. Contains the following fields:\n<ul>\n<li><code>tealium_account</code> – Specifies the account name.</li>\n<li><code>tealium_profile</code> – Specifies the profile.</li>\n<li><code>tealium_datasource</code> – Specifies the data source.<br>\nIf the account, profile, and datasource fields are included in the <code>data</code> object, the <code>config</code> object is not required.</li>\n</ul>\n</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Each function invocation can make a maximum of six calls to <code>track()</code>.</p>\n<p>The following example shows <code>track()</code> called with the <code>data</code> and <code>config</code> parameters:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">data</span>, {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;x3p4b7&#39;</span>\n</span></span><span style=\"display:flex;\"><span>        })  \n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// Code to process the response goes here\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>        })\n</span></span></code></pre></div><p>The following example shows <code>track()</code> called with only the <code>data</code> parameter:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">data</span>)  \n</span></span><span style=\"display:flex;\"><span>  .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Code to process the response goes here\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>  })\n</span></span></code></pre></div><p>For a more detailed example for the <code>track()</code> function, see <a href=\"/server-side/functions/event-visitor-functions/v3-function-examples/#send-an-event-to-the-tealium-collect-http-api\">Send an event to the Tealium Collect HTTP API</a>.</p>\n<h2 id=\"event-object\">Event object</h2>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Event functions cannot change an event because these functions are invoked after Tealium has processed the event. To change an event, use either event attribute enrichments or an event transformation function. You can also change the event at the data source before it is sent to Tealium.</p>\n<p>The <code>event</code> object is available for event functions and contains the event data.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>account</code></td>\n<td>string</td>\n<td>Tealium account.</td>\n</tr>\n<tr>\n<td><code>data</code></td>\n<td>object</td>\n<td>Data layer, which contains event data.</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>string</td>\n<td>Execution environment. Value can be <code>qa</code>, <code>dev</code>, or <code>prod</code>.</td>\n</tr>\n<tr>\n<td><code>event_id</code></td>\n<td>string</td>\n<td>Tealium event ID.</td>\n</tr>\n<tr>\n<td><code>post_time</code></td>\n<td>number</td>\n<td>Timestamp indicating when the event occurred.</td>\n</tr>\n<tr>\n<td><code>profile</code></td>\n<td>string</td>\n<td>Tealium profile.</td>\n</tr>\n<tr>\n<td><code>useragent</code></td>\n<td>string</td>\n<td>A string that represents the user agent, such as the browser.</td>\n</tr>\n<tr>\n<td><code>visitor_id</code></td>\n<td>string</td>\n<td>Tealium visitor ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeNameById(id)</code></td>\n<td>string</td>\n<td>Returns a string containing the name of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeValueById(id)</code></td>\n<td>any</td>\n<td>Returns the value of the specified attribute. <code>id</code> is a string that specifies the attribute ID.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"data-object\">Data object</h3>\n<p>The <code>data</code> object contains the data for the incoming event.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>dom</code></td>\n<td>Object</td>\n<td>Standard page data.</td>\n</tr>\n<tr>\n<td><code>firstparty_tealium_cookies</code></td>\n<td>Object</td>\n<td>All the cookies from the browser.</td>\n</tr>\n<tr>\n<td><code>js</code></td>\n<td>Object</td>\n<td>JavaScript variables from the page.</td>\n</tr>\n<tr>\n<td><code>meta</code></td>\n<td>Object</td>\n<td>Data from the meta tags on the web page.</td>\n</tr>\n<tr>\n<td><code>udo</code></td>\n<td>Object</td>\n<td>Universal Data Object that contains the properties of the incoming event.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"event-object-example\">Event object example</h3>\n<p>The following shows an example of event object data:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;event_id&#34;</span>: <span style=\"color:#e6db74\">&#34;run-test-event-id&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;run-test-visitor-id&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;data&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dom&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;viewport_height&#34;</span>: <span style=\"color:#ae81ff\">766</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;referrer&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;viewport_width&#34;</span>: <span style=\"color:#ae81ff\">1440</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;domain&#34;</span>: <span style=\"color:#e6db74\">&#34;www.example.com&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;title&#34;</span>: <span style=\"color:#e6db74\">&#34;Home Page&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;query_string&#34;</span>: <span style=\"color:#e6db74\">&#34;q=help&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;hash&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;url&#34;</span>: <span style=\"color:#e6db74\">&#34;https://www.example.com/?q=help&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;pathname&#34;</span>: <span style=\"color:#e6db74\">&#34;/&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;udo&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_event&#34;</span>: <span style=\"color:#e6db74\">&#34;page_view&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;page_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Home Page&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.event&#34;</span>: <span style=\"color:#e6db74\">&#34;view&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;search_keyword&#34;</span>: <span style=\"color:#e6db74\">&#34;help&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.domain&#34;</span>: <span style=\"color:#e6db74\">&#34;example.com&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.version&#34;</span>: <span style=\"color:#e6db74\">&#34;ut4.46.202006020705&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_session_id&#34;</span>: <span style=\"color:#e6db74\">&#34;1609910608323&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;firstparty_tealium_cookies&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__sn&#34;</span>: <span style=\"color:#e6db74\">&#34;12&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_visit&#34;</span>: <span style=\"color:#e6db74\">&#34;12&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_ses_id&#34;</span>: <span style=\"color:#e6db74\">&#34;1609910610822&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_region&#34;</span>: <span style=\"color:#e6db74\">&#34;us-east-1&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__st&#34;</span>: <span style=\"color:#e6db74\">&#34;1609913306118&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_v_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__se&#34;</span>: <span style=\"color:#e6db74\">&#34;66&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__ss&#34;</span>: <span style=\"color:#e6db74\">&#34;0&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_event&#34;</span>: <span style=\"color:#e6db74\">&#34;60&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__pn&#34;</span>: <span style=\"color:#e6db74\">&#34;5&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>  },\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;env&#34;</span>: <span style=\"color:#e6db74\">&#34;prod&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;post_time&#34;</span>: <span style=\"color:#ae81ff\">1537305808000</span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><h2 id=\"helper-object\">Helper object</h2>\n<p>The <code>helper</code> object provides the <code>helper.getGlobalVariable()</code> and <code>helper.getAuth()</code> methods.</p>\n<h3 id=\"helpergetglobalvariable\"><code>helper.getGlobalVariable()</code></h3>\n<p>Functions use <code>helper.getGlobalVariable()</code> to retrieve global variables, passing the global variable key as a parameter, as follows:</p>\n<pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {\n  console.log(helper.getGlobalVariable(&#34;TEST_GLOBAL_VAR&#34;));\n});\n</code></pre><p>For more information on adding and editing global variables, see <a href=\"/server-side/functions/manage-functions/manage-global-variables/\">Manage global variables</a>.</p>\n<h3 id=\"helpergetauth\"><code>helper.getAuth()</code></h3>\n<p>Functions use <code>helper.getAuth()</code> to retrieve an authentication that has been added to the function. The function passes the authentication token to <code>helper.getAuth()</code>, as follows:</p>\n<pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {\n    console.log(helper.getAuth(&#34;auth_token_name&#34;));\n})\n</code></pre><p>The authentication token is created when the authentication is added to the function. For information on adding authentication to a function, see <a href=\"/server-side/functions/event-visitor-functions/authentication/\">Add authentication to an event or visitor function</a>.</p>\n<h2 id=\"visitor-object\">Visitor object</h2>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Visitor functions are invoked after the visitor has been processed. Visitor functions cannot change a visitor object after the visitor has been processed. To change visitor data, use visitor attribute enrichments.</p>\n<p>The <code>visitor</code> object is available for visitor functions and contains the visitor data.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Property</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>badges</code></td>\n<td>string[]</td>\n<td>Badge attributes.</td>\n</tr>\n<tr>\n<td><code>metrics</code></td>\n<td>object(key, number)</td>\n<td>Number attributes.</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>object(key, string)</td>\n<td>String attributes.</td>\n</tr>\n<tr>\n<td><code>dates</code></td>\n<td>object(key, epoch)</td>\n<td>Dates attributes in epoch format.</td>\n</tr>\n<tr>\n<td><code>flags</code></td>\n<td>object(key, boolean)</td>\n<td>Boolean attributes.</td>\n</tr>\n<tr>\n<td><code>metrics_sets</code></td>\n<td>object(key, object(key, number))</td>\n<td>Tally attributes.</td>\n</tr>\n<tr>\n<td><code>property_sets</code></td>\n<td>object(key, string[])</td>\n<td>Set of strings attributes.</td>\n</tr>\n<tr>\n<td><code>funnels</code></td>\n<td>object (see example)</td>\n<td>Funnel attributes.</td>\n</tr>\n<tr>\n<td><code>sequences</code></td>\n<td>object (see example)</td>\n<td>Timeline attributes.</td>\n</tr>\n<tr>\n<td><code>property_lists</code></td>\n<td>object(key, string[])</td>\n<td>Array of strings attributes.</td>\n</tr>\n<tr>\n<td><code>metric_lists</code></td>\n<td>object(key, number[])</td>\n<td>Array of numbers attributes.</td>\n</tr>\n<tr>\n<td><code>flag_lists</code></td>\n<td>object(key, boolean[])</td>\n<td>Array of booleans attributes.</td>\n</tr>\n<tr>\n<td><code>secondary_ids</code></td>\n<td>string</td>\n<td>User identifiers such as email address, social media ID, or customer ID.</td>\n</tr>\n<tr>\n<td><code>audiences</code></td>\n<td>string[]</td>\n<td>Audiences that the visitor is currently in.</td>\n</tr>\n<tr>\n<td><code>creation_ts</code></td>\n<td>epoch</td>\n<td>Visitor creation timestamp.</td>\n</tr>\n<tr>\n<td><code>new_visitor</code></td>\n<td>boolean</td>\n<td>Indicates whether this is a new visitor.</td>\n</tr>\n<tr>\n<td><code>audiences_joined_at</code></td>\n<td>number</td>\n<td>Timestamps for when the visitor joined audiences.</td>\n</tr>\n<tr>\n<td><code>current_visit</code></td>\n<td>visit object</td>\n<td>Data for the current visit.</td>\n</tr>\n<tr>\n<td><code>function getAttributeNameById(id)</code></td>\n<td>string</td>\n<td>Returns a string containing the name of the specified attribute ID. <code>id</code> is a string that contains the attribute ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeValueById(id)</code></td>\n<td>any</td>\n<td>Returns the value of the specified attribute ID. <code>id</code> is a string that contains the attribute ID.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"visitor-object-example\">Visitor object example</h3>\n<p>The following is an example of <code>visitor</code> object data:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">2</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dates&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373522000</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;properties&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;profile&#34;</span>: <span style=\"color:#e6db74\">&#34;username&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;017560818b67001bc185a07f1cd703078003405000b7e&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;account&#34;</span>: <span style=\"color:#e6db74\">&#34;user-account&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics_sets&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Product Categories Purchased&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shoes&#34;</span>: <span style=\"color:#ae81ff\">1</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Pants&#34;</span>: <span style=\"color:#ae81ff\">3</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shirts&#34;</span>: <span style=\"color:#ae81ff\">7</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shorts&#34;</span>: <span style=\"color:#ae81ff\">2</span>\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;sequences&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Hotel Search Timeline&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681858801598</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Paradise Island&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            },\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860398985</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Skokie&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            },\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860423335</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Las Vegas&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        ]\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;funnels&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Purchase Funnel&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;completed&#34;</span>: <span style=\"color:#66d9ef\">true</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;steps&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;1&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624226</span>,\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;product_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Skinny Jeans&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                    }\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;2&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624227</span>\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;3&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624228</span>\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;4&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624229</span>,\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;order_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0123456789&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;order_total&#34;</span>: <span style=\"color:#e6db74\">&#34;34.98&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                    }\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;audiences&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Audience 1&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Audience 2&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    ],\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;badges&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Badge 1&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Badge 2&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    ],\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373522000</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;current_visit&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1.3</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">6</span>\n</span></span><span style=\"display:flex;\"><span>        },\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;dates&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373868000</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>\n</span></span><span style=\"display:flex;\"><span>        },\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;properties&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Property 1&#34;</span>: <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Property 2&#34;</span>: <span style=\"color:#e6db74\">&#34;https://URL-for-website &#34;</span>\n</span></span><span style=\"display:flex;\"><span>        },\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;flags&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Flag 1&#34;</span>: <span style=\"color:#66d9ef\">true</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Flag 2&#34;</span>: <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>        },\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;property_sets&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Property Set 1&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#e6db74\">&#34;Mac desktop&#34;</span>\n</span></span><span style=\"display:flex;\"><span>            ],\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Property Set 2&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>\n</span></span><span style=\"display:flex;\"><span>            ]\n</span></span><span style=\"display:flex;\"><span>        },\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;total_event_count&#34;</span>: <span style=\"color:#ae81ff\">2</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;events_compressed&#34;</span>: <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;audiences_joined_at&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Audience 1&#34;</span>: <span style=\"color:#ae81ff\">1603363523014</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Audience 2&#34;</span>: <span style=\"color:#ae81ff\">1603363523014</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><h2 id=\"visit-object\">Visit object</h2>\n<p>The <code>visit</code> object is available for visitor functions and contains the data for the current visit.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Visitor functions are invoked after the visitor has been processed. Visitor functions cannot change a visit object after the visitor has been processed. To change the visit data, use visit attribute enrichments.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Property</strong></th>\n<th><strong>Data Type</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>metrics</code></td>\n<td>object(key, number)</td>\n<td>Number attributes.</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>object(key, string)</td>\n<td>String attributes.</td>\n</tr>\n<tr>\n<td><code>dates</code></td>\n<td>object(key, epoch)</td>\n<td>Dates attributes in epoch format.</td>\n</tr>\n<tr>\n<td><code>flags</code></td>\n<td>object(key, boolean)</td>\n<td>Boolean attributes.</td>\n</tr>\n<tr>\n<td><code>metrics_sets</code></td>\n<td>object(key, object(key, number))</td>\n<td>Tally attributes.</td>\n</tr>\n<tr>\n<td><code>property_sets</code></td>\n<td>object(key, string[])</td>\n<td>Set of strings attributes.</td>\n</tr>\n<tr>\n<td><code>funnels</code></td>\n<td>object (see example)</td>\n<td>Funnel attributes.</td>\n</tr>\n<tr>\n<td><code>sequences</code></td>\n<td>object (see example)</td>\n<td>Timeline attributes.</td>\n</tr>\n<tr>\n<td><code>property_lists</code></td>\n<td>object(key, string[])</td>\n<td>Array of strings attributes.</td>\n</tr>\n<tr>\n<td><code>metric_lists</code></td>\n<td>object(key, number[])</td>\n<td>Array of numbers attributes.</td>\n</tr>\n<tr>\n<td><code>flag_lists</code></td>\n<td>object(key, boolean[])</td>\n<td>Array of booleans attributes.</td>\n</tr>\n<tr>\n<td><code>events_compressed</code></td>\n<td>boolean</td>\n<td>Indicates whether events are compressed.</td>\n</tr>\n<tr>\n<td><code>total_event_count</code></td>\n<td>number</td>\n<td>Total number of events.</td>\n</tr>\n<tr>\n<td><code>creation_ts</code></td>\n<td>number</td>\n<td>Visitor creation timestamp.</td>\n</tr>\n<tr>\n<td><code>function getAttributeNameById(id)</code></td>\n<td>string</td>\n<td>Returns a string containing the name of the specified attribute ID. <code>id</code> is a string that contains the attribute ID.</td>\n</tr>\n<tr>\n<td><code>function getAttributeValueById(id)</code></td>\n<td>any</td>\n<td>Returns the value of the specified attribute ID. <code>id</code> is a string that contains the attribute ID.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"visit-object-example\">Visit object example</h3>\n<p>The following is an example of <code>visit</code> object data:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1.3</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">6</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dates&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373868000</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;properties&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Property 1&#34;</span>: <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Property 2&#34;</span>: <span style=\"color:#e6db74\">&#34;https://URL-for-website &#34;</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;flags&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Flag 1&#34;</span>: <span style=\"color:#66d9ef\">true</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Flag 2&#34;</span>: <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics_sets&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Product Categories Purchased&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shoes&#34;</span>: <span style=\"color:#ae81ff\">1</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Pants&#34;</span>: <span style=\"color:#ae81ff\">3</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shirts&#34;</span>: <span style=\"color:#ae81ff\">7</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Shorts&#34;</span>: <span style=\"color:#ae81ff\">2</span>\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;property_sets&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Property Set 1&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#e6db74\">&#34;Mac desktop&#34;</span>\n</span></span><span style=\"display:flex;\"><span>        ],\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Property Set 2&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>\n</span></span><span style=\"display:flex;\"><span>        ]\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;sequences&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Hotel Search Timeline&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681858801598</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Paradise Island&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            },\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860398985</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Skokie&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            },\n</span></span><span style=\"display:flex;\"><span>            {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860423335</span>,\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Las Vegas&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        ]\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;funnels&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Purchase Funnel&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;completed&#34;</span>: <span style=\"color:#66d9ef\">true</span>,\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;steps&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;1&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624226</span>,\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;product_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Skinny Jeans&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                    }\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;2&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624227</span>\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;3&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624228</span>\n</span></span><span style=\"display:flex;\"><span>                },\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#f92672\">&#34;4&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624229</span>,\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;order_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0123456789&#34;</span>,\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#f92672\">&#34;order_total&#34;</span>: <span style=\"color:#e6db74\">&#34;34.98&#34;</span>\n</span></span><span style=\"display:flex;\"><span>                    }\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>    },\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;total_event_count&#34;</span>: <span style=\"color:#ae81ff\">2</span>,\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;events_compressed&#34;</span>: <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div>"
        }  

    , 
        {
            "weight": "40",
            "url": "https://docs.tealium.com/server-side/functions/event-visitor-functions/migrate-v2-to-v3/",
            "title": "Migrate a V2 function to the V3 runtime",
            "body": "<h2 id=\"how-v3-and-v2-functions-differ\">How V3 and V2 functions differ</h2>\n<p>Event and visitor functions that use the V3 runtime differ from V2 functions as follows:</p>\n<ul>\n<li><strong>Parameters and named exports</strong> – Input data is provided as parameters instead of named exports.\n<ul>\n<li>An event function has two parameters: <code>event</code> and <code>helper</code>.</li>\n<li>A visitor function has three parameters: <code>visitor</code>, <code>visit</code>, and <code>helper</code>.</li>\n</ul>\n</li>\n<li><strong>Helper functions</strong> – The <code>helper</code> object is used to get an authentication token ID or retrieve global variables.\n<ul>\n<li><code>auth.get()</code> has been replaced with <code>helper.getAuth()</code>.</li>\n<li><code>store.get()</code> has been replaced with <code>helper.getGlobalVariable()</code>.</li>\n</ul>\n</li>\n<li><strong>Collect event</strong>\n<ul>\n<li><code>tealium.sendCollectEvent()</code> has been replaced by <code>track()</code>, which uses named parameters.</li>\n</ul>\n</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Data transformation functions use the <strong>Transformation V0</strong> runtime and are not affected by the release of the V3 runtime.</p>\n<h3 id=\"example-v2-function\">Example V2 function</h3>\n<p>The following code examples show a V2 event function that sends an event to the collect endpoint and the V3 version of this event function.</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;tealium&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> () =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">searchQuery</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">URLSearchParams</span>({ <span style=\"color:#a6e22e\">path</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">pathname</span>, <span style=\"color:#a6e22e\">query</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">search_query</span> });\n</span></span><span style=\"display:flex;\"><span>    \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">fetch</span>(<span style=\"color:#e6db74\">`https://getnew.event.com?</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">searchQuery</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">`</span>)\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">json</span>();\n</span></span><span style=\"display:flex;\"><span>        });\n</span></span><span style=\"display:flex;\"><span>    \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tealium</span>.<span style=\"color:#a6e22e\">sendCollectEvent</span>(\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">newEvent</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;abc123&#39;</span>)\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>){\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">text</span>();\n</span></span><span style=\"display:flex;\"><span>        })\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">data</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Result : &#39;</span>, <span style=\"color:#a6e22e\">data</span>))\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#66d9ef\">catch</span>(<span style=\"color:#a6e22e\">error</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">error</span>(<span style=\"color:#e6db74\">&#39;Error:&#39;</span>, <span style=\"color:#a6e22e\">error</span>.<span style=\"color:#a6e22e\">message</span>));\n</span></span><span style=\"display:flex;\"><span>})();\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {  \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">searchQuery</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">URLSearchParams</span>({ <span style=\"color:#a6e22e\">path</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">pathname</span>, <span style=\"color:#a6e22e\">query</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">search_query</span> });\n</span></span><span style=\"display:flex;\"><span>        \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">fetch</span>(<span style=\"color:#e6db74\">`https://getnew.event.com?</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">searchQuery</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">`</span>)\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">json</span>();\n</span></span><span style=\"display:flex;\"><span>        });\n</span></span><span style=\"display:flex;\"><span>        \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">newEvent</span>, {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;abc123&#39;</span>\n</span></span><span style=\"display:flex;\"><span>        })\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>){\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">text</span>();\n</span></span><span style=\"display:flex;\"><span>        })\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">data</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Result : &#39;</span>, <span style=\"color:#a6e22e\">data</span>))\n</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#66d9ef\">catch</span>(<span style=\"color:#a6e22e\">error</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">error</span>(<span style=\"color:#e6db74\">&#39;Error:&#39;</span>, <span style=\"color:#a6e22e\">error</span>.<span style=\"color:#a6e22e\">message</span>));\n</span></span><span style=\"display:flex;\"><span>})();\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n\n<h2 id=\"create-a-v3-function\">Create a V3 function</h2>\n<p>To migrate an event or visitor function to V3, create a V3 event or visitor function, depending on the type of function to be migrated. For more information, see <a href=\"/server-side/functions/manage-functions/create-function/\">Create a function</a>. Then do the following:</p>\n<ol>\n<li>\n<p>In the code editor, delete all of the the default code for the V3 function, then add the following event or visitor code, which is an empty function.<br>\nWe will add the function code in the next step, then modify the code.\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"Event function\" title=\"Event function\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {  \n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>});\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"Visitor function\" title=\"Visitor function\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">visitor</span>, <span style=\"color:#a6e22e\">visit</span> }) =&gt; {  \n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>});\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n</p>\n</li>\n<li>\n<p>Copy the code from the V2 function, starting after the first line of the function, shown below:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> (<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span>) =&gt; {\n</span></span></code></pre></div><p>and ending above the last line of the function:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>})();\n</span></span></code></pre></div></li>\n<li>\n<p>Paste the copied code into the empty V3 function, between the <code>activate</code> line and the ending line <code>});</code>.</p>\n</li>\n</ol>\n<h2 id=\"update-the-function-code\">Update the function code</h2>\n<p>If your function uses libraries or helper functions, or sends events to Tealium Collect, the code copied into the empty function needs to be modified as described in the following sections.</p>\n<h3 id=\"send-events-to-tealium-collect\">Send events to Tealium Collect</h3>\n<p>The example function uses <code>tealium.sendCollectEvent()</code>. This call needs to be replaced with a <code>track()</code> call. The examples below show the V2 <code>tealium.sendCollectEvent()</code> call and the V3 <code>track()</code> call.</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> () =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">udo</span> };\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tealium</span>.<span style=\"color:#a6e22e\">sendCollectEvent</span>(<span style=\"color:#a6e22e\">newEvent</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;abc123&#39;</span>)\n</span></span><span style=\"display:flex;\"><span>    ...\n</span></span><span style=\"display:flex;\"><span>})();\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">udo</span> };\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">newEvent</span>, {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;abc123&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>    ...\n</span></span><span style=\"display:flex;\"><span>})\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n\n<p>In the <code>track()</code> call, replace <code>'abc123'</code> with your data source key.</p>\n<h3 id=\"use-libraries\">Use libraries</h3>\n<p>If your V2 function uses libraries, such as CrytpoES, add the import line before the <code>activate</code> line.</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;tealium&#34;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>...\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {  \n</span></span><span style=\"display:flex;\"><span>    ...\n</span></span><span style=\"display:flex;\"><span>});\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n\n<h3 id=\"authentication-tokens-and-global-variables\">Authentication tokens and global variables</h3>\n<p>If your V2 function uses authentication tokens or global variables, add <code>helper</code> to the function parameters in the <code>activate</code> line of the V3 function. For example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {\n</span></span><span style=\"display:flex;\"><span>});\n</span></span></code></pre></div><p>Replace any instances of <code>auth.get()</code> in the V2 code with <code>helper.getAuth()</code>. For example:</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">auth</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">token</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">auth</span>.<span style=\"color:#a6e22e\">get</span>(<span style=\"color:#e6db74\">&#34;myAuthToken&#34;</span>);\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">token</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">helper</span>.<span style=\"color:#a6e22e\">getAuth</span>(<span style=\"color:#e6db74\">&#34;myAuthToken&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>})\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n\n<p>Replace any instances of <code>store.get()</code> with <code>helper.getGlobalVariable()</code>. For example:</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> {<span style=\"color:#a6e22e\">store</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">gVar</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">store</span>.<span style=\"color:#a6e22e\">get</span>(<span style=\"color:#e6db74\">&#34;myGlobalVar&#34;</span>);\n</span></span></code></pre></div>\n</div>\n<div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">\n  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {    \n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">gVar</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">helper</span>.<span style=\"color:#a6e22e\">getGlobalVariable</span>(<span style=\"color:#e6db74\">&#34;myGlobalVar&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>})\n</span></span></code></pre></div>\n</div>\n</div>\n</div>\n\n"
        }  

    , 
        {
            "weight": "50",
            "url": "https://docs.tealium.com/server-side/functions/event-visitor-functions/function-examples-v2/",
            "title": "Event and visitor function examples (V2)",
            "body": "<h2 id=\"send-event-data-with-http-post\">Send event data with HTTP POST</h2>\n<p>The following example shows how to make an HTTP POST request to an endpoint with event data in the request body JSON.</p>\n<pre tabindex=\"0\"><code>// Send event data - HTTP POST\nimport {event} from &#39;tealium&#39;;\n\nconsole.log(JSON.stringify(event));\n\nfetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,\n    {\n        method: &#39;POST&#39;,\n        body: JSON.stringify(event),\n        headers: {\n            &#39;Content-Type&#39;: &#39;application/json&#39;\n        }\n    })\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error(&#39;Network response was not ok. Status code: ${response.status}.&#39;);\n        }\n        return response.json();\n    })\n    .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n    .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"send-event-data-with-http-get\">Send event data with HTTP GET</h2>\n<p>The following example shows how to make an HTTP GET request to an endpoint with event data as query string parameters.</p>\n<pre tabindex=\"0\"><code>// Send event data - HTTP GET\nimport {event} from &#39;tealium&#39;;\n\nconsole.log(JSON.stringify(event));\n\nfetch(encodeURI(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${event.data}&#39;))\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error(&#39;Network response was not ok. Status code: ${response.status}.&#39;);\n        }\n        return response.json();\n    })\n    .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n    .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"send-visitor-data-with-http-post\">Send visitor data with HTTP POST</h2>\n<p>The following example shows how to make an HTTP POST request to an endpoint with visitor profile data in the request body JSON.</p>\n<pre tabindex=\"0\"><code>// Send visitor data - HTTP POST\nimport {visitor} from &#39;tealium&#39;;\n\nconsole.log(JSON.stringify(visitor));\nfetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,\n    {\n        method: &#39;POST&#39;,\n        body: JSON.stringify(visitor), \n        headers: {\n            &#39;Content-Type&#39;: &#39;application/json&#39;\n        }\n    })\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error(&#39;Network response was not ok. Status code: ${response.status}.&#39;);\n        }\n        return response.json();\n    })\n    .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n    .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"send-visitor-data-with-http-get\">Send visitor data with HTTP GET</h2>\n<p>The following example shows how to make an HTTP GET request to an endpoint with visitor profile data as query string parameters.</p>\n<pre tabindex=\"0\"><code>// Send visitor data - HTTP GET\nimport {visitor} from &#39;tealium&#39;;\n\nconsole.log(JSON.stringify(visitor));\n\nfetch(encodeURI(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${visitor.data}&#39;))\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error(&#39;Network response was not ok. Status code: ${response.status}.&#39;);\n        }\n        return response.json();\n    })\n    .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n    .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"send-an-event-to-tealium-collect\">Send an event to Tealium Collect</h2>\n<p>The following example shows how to send an event to the Tealium Collect HTTP API.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> {<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span>} <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> {<span style=\"color:#960050;background-color:#1e0010\">‘</span><span style=\"color:#a6e22e\">key</span><span style=\"color:#960050;background-color:#1e0010\">’</span><span style=\"color:#f92672\">:</span> <span style=\"color:#960050;background-color:#1e0010\">‘</span><span style=\"color:#a6e22e\">value</span><span style=\"color:#960050;background-color:#1e0010\">’</span>};\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">tealium</span>.<span style=\"color:#a6e22e\">sendCollectEvent</span>(<span style=\"color:#a6e22e\">newEvent</span>, <span style=\"color:#e6db74\">&#39;newAccount&#39;</span>, <span style=\"color:#e6db74\">&#39;newProfile&#39;</span>, <span style=\"color:#e6db74\">&#39;datasourceId&#39;</span>)\n</span></span><span style=\"display:flex;\"><span>    .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Status code:&#39;</span>, <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span>);\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">text</span>();\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>    .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">data</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Result:&#39;</span>, <span style=\"color:#a6e22e\">data</span>))\n</span></span><span style=\"display:flex;\"><span>    .<span style=\"color:#66d9ef\">catch</span>(<span style=\"color:#a6e22e\">error</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">error</span>(<span style=\"color:#e6db74\">&#39;Error:&#39;</span>, <span style=\"color:#a6e22e\">error</span>.<span style=\"color:#a6e22e\">message</span>));\n</span></span></code></pre></div><h2 id=\"retrieve-visitor-data-and-send-it-to-tealium-collect\">Retrieve visitor data and send it to Tealium Collect</h2>\n<p>In this example, the function uses the IP address to get the location city, gets weather information for that city, and sends the city and weather information to the Tealium Collect HTTP API.</p>\n<pre tabindex=\"0\"><code>import { auth, visitor, event } from &#34;tealium&#34;;\n\nconsole.log(JSON.stringify(visitor));\n\nconst ip_stack_api_key = &#39;your_api_key&#39;,\n      weather_api_key = &#39;your_weather_api_key&#39;,\n      ip_address = visitor?.current_visit?.properties?.ip_address;\n\nconsole.log(ip_address);\n(async function() {\n    if(ip_address) {\n    try {\n        // Use IP address to get location city\n        let city_response = await fetch(&#39;https://api.ipstack.com/${ip_address}?access_key=${ip_stack_api_key}&amp;format=1&#39;),\n        city_data = await city_response.json();\n        console.log(JSON.stringify(city_data));\n        // Use location city to get local weather\n        let weather_response = await fetch(encodeURI(&#39;https://api.openweathermap.org/data/2.5/weather?q=${city_data.city}&amp;appid=${weather_api_key}&#39;)),\n            weather_data = await weather_response.json();\n            console.log(JSON.stringify(weather_data));\n        // Send city and weather description back into collect endpoint\n        await fetch(encodeURI(&#39;https://collect.tealiumiq.com/event?tealium_account=cloud-functions-usecases&amp;tealium_profile=main&amp;tealium_visitor_id=${visitor._id}&amp;lookup_city=${weather_data?.name}&amp;weather=${weather_data?.weather?.[0]?.description}&amp;country=isp=${city_data?.connection?.isp}&#39;));\n    } catch(e) {\n        console.error(e);\n        return false;\n    }\n    } else {\n        console.error(&#34;Could not locate users IP address&#34;)\n    }\n})();\n</code></pre><h2 id=\"get-a-facebook-authentication-token\">Get a Facebook authentication token</h2>\n<p>The following code example shows how to get a Facebook authentication token:</p>\n<pre tabindex=\"0\"><code>import { auth } from &#39;tealium&#39;;\nconst token = auth.get(&#39;facebook_token&#39;);\n\nfetch(&#39;https://graph.facebook.com/v8.0/act_12345678/customaudiences??access_token=${token}&amp;fields=approximate_count%2Csubtype%2Cname%2Cdata_source&amp;limit=10&#39;)\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(&#39;Data:&#39;, data))\n  .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"send-data-to-facebook\">Send data to Facebook</h2>\n<p>This example shows how to send event data to the Facebook Graph or Marketing API to create a campaign. For more information on Facebook campaigns, see <a href=\"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group\">https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group).</a>.</p>\n<pre tabindex=\"0\"><code>import {auth, event} from &#39;tealium&#39;;\n\nconst ACT_ID = 11111111111;\nconst ACCESS_TOKEN = auth.get(&#34;facebook_token&#34;);\n\nfetch(&#39;https://graph.facebook.com/v8.0/act_${ACT_ID}/campaigns?access_token=${ACCESS_TOKEN}&#39;,\n    {\n        method: &#39;POST&#39;,\n        body: &#39;name=${event.data}&amp;objective=PAGE_LIKES&amp;status=PAUSED&amp;special_ad_categories=[]&#39;\n    })\n    .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error(&#39;Network response was not ok. Status code: ${response.status}.&#39;);\n            }\n            return response.json();\n        })\n    .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n    .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><h2 id=\"create-a-facebook-campaign\">Create a Facebook campaign</h2>\n<p>This example shows how to create a Facebook campaign.</p>\n<pre tabindex=\"0\"><code>import { auth } from &#34;tealium&#34;;\n\nconst ACT_ID = 11111111111;\nconst ACCESS_TOKEN = auth.get(&#34;facebook_token&#34;);\n\n(async function () {\n    console.time(&#39;function&#39;);\n    try {\n        console.log(&#39;Creating campaign...&#39;);\n        let campaignId = await createCampaign({ campaignName: &#39;My Campaign&#39; });\n        console.log(&#39;Campaign ID&#39;, campaignId);\n\n        console.log(&#39;Creating custom audience...&#39;);\n        let customAudienceId = await createCustomAudience({ caName: &#39;My_Audience&#39; });\n        console.log(&#39;Custom Audience ID&#39;, customAudienceId);\n\n        console.log(&#39;Creating ad set...&#39;);\n        customAudienceId = 23846304008770411;\n        let adSetId = await createAdSet({ campaignId: campaignId, customAudienceId: customAudienceId });\n        console.log(&#39;Ad Set ID&#39;, adSetId);\n\n        console.log(&#39;Creating ad creative...&#39;);\n        // let adCreativeId = await createAdCreative();\n        // current API call not working, use an ID created manually before\n        let adCreativeId = &#39;adCreativeId&#39;;\n        console.log(&#39;AdCreative ID &#39;, adCreativeId);\n\n        console.log(&#39;Creating ad...&#39;);\n        let adId = await createAd({ adsetId: adSetId, adCreativeId: adCreativeId });\n        console.log(&#39;Ad ID&#39;, adId);\n        console.timeEnd(&#39;function&#39;);\n    } catch (error) {\n        console.log(error);\n    }\n})();\n\nasync function createAd({ adsetId, adCreativeId }) {\n    const params = {\n        &#39;status&#39;: &#39;PAUSED&#39;,\n        &#39;adset_id&#39;: adsetId,\n        &#39;name&#39;: &#39;My Ad&#39;,\n        &#39;creative&#39;: { &#39;creative_id&#39;: adCreativeId },\n    };\n\n    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/ads?access_token=${ACCESS_TOKEN}&#39;,\n        {\n            method: &#39;POST&#39;,\n            body: jsonToRequestBodyString(params)\n        });\n    let json = await result.json();\n    return json.id;\n}\n\nasync function createAdSet({ campaignId, customAudienceId }) {\n    const params = {\n        &#39;name&#39;: &#39;AdSet&#39;,\n        &#39;lifetime_budget&#39;: &#39;1000&#39;,\n        &#39;start_time&#39;: &#39;2020-07-01T23:41:41-0800&#39;,\n        &#39;end_time&#39;: &#39;2020-07-07T23:41:41-0800&#39;,\n        &#39;campaign_id&#39;: campaignId,\n        &#39;bid_amount&#39;: &#39;1&#39;,\n        &#39;billing_event&#39;: &#39;IMPRESSIONS&#39;,\n        &#39;optimization_goal&#39;: &#39;LINK_CLICKS&#39;,\n        &#39;targeting&#39;: {\n            &#34;geo_locations&#34;: {\n                &#34;countries&#34;: [&#34;US&#34;],\n            },\n            &#34;age_min&#34;: 25,\n            &#34;age_max&#34;: 40,\n            &#34;custom_audiences&#34;: [{ &#34;id&#34;: customAudienceId }]\n        },\n        &#39;status&#39;: &#39;PAUSED&#39;\n    };\n    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/adsets?access_token=${ACCESS_TOKEN}&#39;,\n        {\n            method: &#39;POST&#39;,\n            body: jsonToRequestBodyString(params)\n        });\n    let json = await result.json();\n    return json.id;\n}\n\nasync function createCustomAudience({ caName }) {\n    const params = {\n        &#39;name&#39;: caName,\n        &#39;subtype&#39;: &#39;CUSTOM&#39;,\n        &#39;description&#39;: &#39;People who purchased on my website&#39;,\n        &#39;customer_file_source&#39;: &#39;USER_PROVIDED_ONLY&#39;,\n    };\n    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/customaudiences?access_token=${ACCESS_TOKEN}&#39;,\n        {\n            method: &#39;POST&#39;,\n            body: jsonToRequestBodyString(params)\n        });\n    let json = await result.json();\n    return json.id;\n}\n\nasync function createCampaign({ campaignName }) {\n    const params = {\n        &#39;objective&#39;: &#39;LINK_CLICKS&#39;,\n        &#39;status&#39;: &#39;PAUSED&#39;,\n        &#39;buying_type&#39;: &#39;AUCTION&#39;,\n        &#39;name&#39;: campaignName,\n        &#39;special_ad_categories&#39;: &#39;NONE&#39;\n    };\n    let result = await fetch(&#39;https://graph.facebook.com/v8.0/act_${ACT_ID}/campaigns?access_token=${ACCESS_TOKEN}&#39;,\n        {\n            method: &#39;POST&#39;,\n            body: jsonToRequestBodyString(params)\n        });\n    let json = await result.json();\n    return json.id;\n}\n\nfunction jsonToRequestBodyString(json) {\n    return Object.keys(json).map(function (key) {\n        return encodeURIComponent(key) + &#39;=&#39; +\n            ((typeof json[key] === &#39;string&#39; || json[key] instanceof String) ? encodeURIComponent(json[key]) : JSON.stringify(json[key]));\n    }).join(&#39;&amp;&#39;);\n}\n</code></pre><h2 id=\"use-the-fetch-api-to-make-http-requests\">Use the fetch() API to make HTTP requests</h2>\n<p>The fetch API is available for functions to make HTTP requests, as shown in the following example. For more information, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">Fetch</a>.</p>\n<pre tabindex=\"0\"><code>fetch(&#39;https://restcountries.eu/rest/v2/name/usa&#39;)\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(&#39;Capital:&#39;, data[0].capital))\n  .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n</code></pre><p>The following example shows fetching a resource from the network, returning a promise that is fulfilled when the response is available.</p>\n<pre tabindex=\"0\"><code>const fetchResponsePromise = fetch(resource [, init])\n</code></pre><p>The Request interface of the Fetch API represents a resource request and is defined as follows:</p>\n<pre tabindex=\"0\"><code>const myRequest = new Request(input[, init]);\n</code></pre><p>Functions can use the Headers interface of the Fetch API to perform various actions on HTTP request and response headers. Headers() is defined as follows:</p>\n<pre tabindex=\"0\"><code>const myHeaders = new Headers(init);\n</code></pre><p>The Response interface of the Fetch API represents the response to a request and is defined as follows:</p>\n<pre tabindex=\"0\"><code>const myResponse = new Response(body, init);\n</code></pre><p>The following browser-specific functionality is not supported:</p>\n<ul>\n<li>cache</li>\n<li>credentials</li>\n<li>referrer</li>\n<li>referrerPolicy</li>\n<li>signal</li>\n<li>keepalive</li>\n<li>redirect</li>\n<li>mode</li>\n</ul>\n<h2 id=\"use-urlsearchparams-methods-to-build-a-url-query-string\">Use URLSearchParams methods to build a URL query string</h2>\n<p>The URLSearchParams interface defines utility methods to work with the query string of a URL. This example shows using URLSearchParams to build a query string for a URL.</p>\n<pre tabindex=\"0\"><code>function jsonToURLSearchParams(data) {    const params = new URLSearchParams();    buildURLSearchParams(params, data);    return params;}function buildURLSearchParams(params, data, parentKey) {\n    if (data &amp;&amp; typeof data === &#39;object&#39; &amp;&amp; !(data instanceof Date)) {\n        Object.keys(data).forEach(key =&gt; {\n            buildURLSearchParams(params, data[key], parentKey ? `${parentKey}[${key}]` : key);\n        });\n    } else {\n        const value = data == null ? &#39;&#39; : data;\n\n        params.append(parentKey, value);\n    }\n}\n</code></pre><h2 id=\"get-the-value-of-a-global-variable\">Get the value of a global variable</h2>\n<p>The following code example shows how to use <code>store.get()</code> to retrieve a global variable, <code>Cloud_function_URL</code>, that contains the URL for a Google cloud function, and then use this URL to invoke the Google cloud function.</p>\n<pre tabindex=\"0\"><code>const cfunction_url = store.get(&#34;Cloud_function_URL&#34;);\n \nlet headers = {\n            &#34;content-type&#34;: &#34;application/json&#34;,\n            &#34;mute-http-exceptions&#34;: &#34;true&#34;\n        };\n \n// code to populate body parameter goes here\n\nconst response = await fetch(cfunction_url, {\n            method: &#34;POST&#34;,\n            headers: headers,\n            body: body\n        });\n</code></pre><h2 id=\"get-an-attribute-name-or-value-by-attribute-id\">Get an attribute name or value by attribute ID</h2>\n<p>Attribute names can be changed, which can cause problems when code references attributes by name. When  the attribute name is changed, the attribute ID is not changed. To avoid problems with attribute names changing, you can reference attributes by ID by using the <code>getAttrNameById()</code> and <code>getAttrValueByID()</code> methods provided by the <code>event</code> and <code>visitor</code> objects. The following example shows how this works.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>We recommend using the <code>getAttrValueByID()</code> method sparingly. This method recursively searches the properties of the event or visitor object to locate the value. If your event or visitor object is complex, this operation may increase the computation time of your function invocation.</p>\n<p>When you add <code>getAttrNameById()</code> or <code>getAttrValueByID()</code> to a function, the code completion feature helps you select the attribute ID to use in the method. For example, if you enter the following in the code editor, when you enter the opening parenthesis, the code completion feature shows a list of attributes and associated IDs: <figure><a class=\"slb\" href=\"/images/server-side/functions-code-completion-attr-name.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-code-completion-attr-name.png\"\n         alt=\"code completion attribute name\"\n         title=\"code completion attribute name\"/>\n    </a>\n</figure></p>\n<p>You can enter part of the attribute name to filter the list. When you select an attribute, its ID is added to your code after the parenthesis.</p>\n"
        }  

    , 
        {
            "weight": "60",
            "url": "https://docs.tealium.com/server-side/functions/event-visitor-functions/v3-function-examples/",
            "title": "Event and visitor functions examples (V3)",
            "body": "<h2 id=\"send-event-data-with-http-get\">Send event data with HTTP GET</h2>\n<p>The following example shows how to make an HTTP GET request to an endpoint with event data as query string parameters.</p>\n<pre tabindex=\"0\"><code>activate(({ event }) =&gt; {\n    console.log(JSON.stringify(event));\n\n    fetch(encodeURI(`https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${event.data}`))\n        .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n            }\n            return response.json();\n        })\n        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message)); \n})\n</code></pre><h2 id=\"send-visitor-data-with-http-post\">Send visitor data with HTTP POST</h2>\n<p>The following example shows how to make an HTTP POST request to an endpoint with visitor profile data in the request body JSON.</p>\n<pre tabindex=\"0\"><code>activate(({ visitor }) =&gt; {\n    console.log(JSON.stringify(visitor));\n\n    fetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,\n        {\n            method: &#39;POST&#39;,\n            body: JSON.stringify(visitor), \n            headers: {\n                &#39;Content-Type&#39;: &#39;application/json&#39;\n            }\n        })\n        .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n            }\n            return response.json();\n        })\n        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n})\n</code></pre><h2 id=\"send-visitor-data-with-http-get\">Send visitor data with HTTP GET</h2>\n<p>The following example shows how to make an HTTP GET request to an endpoint with visitor profile data as query string parameters.</p>\n<pre tabindex=\"0\"><code>activate(({ visit }) =&gt; {\n    console.log(JSON.stringify(visit)); // notice separate visit property\n\n    fetch(encodeURI(`https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${visit.creation_ts}`))\n        .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n            }\n            return response.json();\n        })\n        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))\n        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));\n})\n</code></pre><h2 id=\"send-an-event-to-the-tealium-collect-http-api\">Send an event to the Tealium Collect HTTP API</h2>\n<p>The following example shows how to fetch data and send an event to Tealium Collect.</p>\n<pre tabindex=\"0\"><code>activate(async ({ event }) =&gt; {\n    const searchQuery = new URLSearchParams({ path: event.data.dom.pathname, query: event.data.dom.search_query });\n    \n    const newEvent = await fetch(`https://getnew.event.com?${searchQuery}`)\n        .then(response =&gt; {\n            if (!response.ok) {\n                throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n            }\n            return response.json();\n        });\n        \n    track(newEvent, {\n            tealium_account: event.account,\n            tealium_profile: event.profile,\n            tealium_datasource: &#39;p9v81m&#39;\n        })\n        .then(response =&gt; {\n            if(!response.ok){\n                throw new Error(`Network response was not ok. Status code: ${response.status}.`);\n            }\n            return response.text();\n        })\n        .then(data =&gt; console.log(&#39;Result : &#39;, data))\n        .catch(error =&gt; console.error(&#39;Error:&#39;, error.message));\n})\n</code></pre><h2 id=\"use-an-authentication-access-token-in-a-call-to-a-service-provider\">Use an authentication access token in a call to a service provider</h2>\n<p>This example uses OAuth 2.0 authentication to make API calls to Google Firebase Cloud Messaging. The access token, which is created when you add OAuth2.0 authentication to a function, is passed as a parameter to <code>helper.getAuth()</code>. The following figure shows the access token for this example function:\n<figure><a class=\"slb\" href=\"/images/server-side/functions-editor-advanced-tab.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-editor-advanced-tab.png\"\n         alt=\"functions advanced tab showing the access token returned after adding authentication to a function\"\n         title=\"functions advanced tab showing the access token returned after adding authentication to a function\"/>\n    </a>\n</figure></p>\n<p>The following code examples show how to call <code>helper.getAuth()</code> to retrieve the authentication when making an API call to send a message with firebase cloud messaging:</p>\n\n<div class=\"code-tabs\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"Action V3\" title=\"Action V3\">\n  <pre tabindex=\"0\"><code>const response = await fetch(\n  &#34;https://fcm.googleapis.com/v1/projects/YOURPROJECT/messages:send&#34;,\n  {\n    method: &#34;POST&#34;,\n    headers: {\n      `Authorization&#39;: &#39;Bearer &#39;+helper.getAuth(&#39;firebase_cloud_messaging&#39;),\n      &#39;Content-Type&#39;: &#39;application/json&#39;\n    },\n    body:body\n  }\n);\n</code></pre>\n</div>\n<div class=\"tab-pane\" data-lang=\"Action V2\" title=\"Action V2\">\n  <pre tabindex=\"0\"><code>const response = await fetch(\n  &#34;https://fcm.googleapis.com/v1/projects/YOURPROJECT/messages:send&#34;,\n  {\n    method: &#34;POST&#34;,\n    headers: {\n      `Authorization&#39;: &#39;Bearer &#39;+auth.get(&#39;firebase_cloud_messaging&#39;),\n      &#39;Content-Type&#39;: &#39;application/json&#39;\n    },\n    body:body\n  }\n);\n</code></pre>\n</div>\n</div>\n</div>\n\n<h2 id=\"get-the-value-of-a-global-variable\">Get the value of a global variable</h2>\n<p>The following code example shows how to use <code>helper.getGlobalVariable()</code> to retrieve a global variable, <code>Cloud_function_URL</code>, that contains the URL for a Google cloud function, and then use this URL to invoke the Google cloud function.</p>\n<pre tabindex=\"0\"><code>const cfunction_url = helper.getGlobalVariable(&#34;Cloud_function_URL&#34;);\n\nlet headers = {\n            &#34;content-type&#34;: &#34;application/json&#34;,\n            &#34;mute-http-exceptions&#34;: &#34;true&#34;\n        };\n\n// code to populate body parameter goes here\n\nconst response = await fetch(cfunction_url, {\n            method: &#34;POST&#34;,\n            headers: headers,\n            body: body\n        });\n</code></pre><p>For information on creating a global variable, see <a href=\"/server-side/functions/manage-functions/manage-global-variables/#add-a-global-variable-for-event-or-visitor-functions\">Add a global variable for event or visitor functions</a>.</p>\n<h2 id=\"get-an-attribute-name-or-attribute-value-by-attribute-id\">Get an attribute name or attribute value by attribute ID</h2>\n<p>Attribute names can be changed, which can cause problems when code references attributes by name. When  the attribute name is changed, the attribute ID is not changed. To avoid problems with attribute names changing, you can reference attributes by ID by using the <code>getAttrNameById()</code> and <code>getAttrValueByID()</code> methods provided by the <code>event</code>, <code>visitor</code>, and <code>visit</code> objects.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>We recommend using the <code>getAttrValueByID()</code> method sparingly. This method recursively searches the properties of the event or visitor object to locate the value. If your event or visitor object is complex, this operation may increase the computation time of your function invocation.</p>\n<p>When you add <code>getAttrNameById()</code> or <code>getAttrValueByID()</code> to a function, the code completion feature helps you select the attribute ID to use in the method. For example, if you enter the following in the code editor, when you enter the opening parenthesis, the code completion feature shows a list of attributes and associated IDs: <figure><a class=\"slb\" href=\"/images/server-side/functions-code-completion-attr-name.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-code-completion-attr-name.png\"\n         alt=\"code completion attribute name\"\n         title=\"code completion attribute name\"/>\n    </a>\n</figure></p>\n<p>You can enter part of the attribute name to filter the list. When you select an attribute, its ID is added to your code after the parenthesis.</p>\n"
        }  

    ]
}
