
{
    "kind": "term",
    "name": "da_audiencedb",
    "count": 4,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/about/",
            "title": "About AudienceDB and EventDB",
            "body":"<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>To have EventDB and AudienceDB enabled for your account and profile, contact your account manager.</p><h2 id=\"how-it-works\">How it works</h2><p>AudienceDB and EventDB services store structured audience and event data in Amazon Redshift, a data warehouse based on PostgreSQL. You can query and analyze the data in Amazon Redshift using your preferred SQL client or Business Intelligence (BI) tool.</p><h3 id=\"prerequisites\">Prerequisites</h3><p>When EventDB and AudienceDB are enabled, a database is created in Amazon Redshift to store your data. New data is stored in EventDB and AudienceDB within one hour after it reaches EventStore or AudienceStore.</p><p>Each profile has its own database schema within the same Redshift instance, which means that each user has a their own username and password for each database schema (profile). The database schemas for AudienceDB and EventDB are created automatically when EventDB or AudienceDB are enabled for a userâ€™s profile.</p><p>After AudienceDB and EventDB have been enabled, you must select the attributes to be stored. For more information, see <a href=\"/server-side/data-storage/audiencedb-eventdb/config-audiencedb-eventdb/\">Configure AudienceDB and EventDB</a>.</p><h3 id=\"data-retention\">Data retention</h3><p>The data stored in EventDB and AudienceDB remains available in Amazon RedShift for the length of time stated in your contract, usually 90 days. Contact your account manager to review the terms of your contract that determine the length of time your data is stored.</p><h2 id=\"tables-views-and-normalized-views\">Tables, views, and normalized views</h2><p>The columns in the Redshift database tables are named according to the attribute type and the internal attribute ID. Views and normalized views of data contain the same data as tables, but have user friendly names that make it easier to write queries. The normalized view name is similar to the view name but with the attribute ID omitted from the table name. Table names and view names are created as follows:</p><ul><li><strong>Table names</strong><br>Column names are a combination of the attribute type and the attribute ID.<br>For example: <code>badge_30</code></li><li><strong>View names</strong><br>Column names are a combination of a user-friendly name and the attribute ID.<br>For example: <code>visitor - badge - fan (30)</code></li><li><strong>Normalized view names</strong><br>Column names are user-friendly names without attribute IDs.<br>For example: <code>visitor - badge - fan</code></li></ul><p>Views and normalized views simplify the process of running queries with aggregations such as <code>SUM()</code> , <code>MIN()</code>, and <code>MAX()</code>.</p><h2 id=\"audiencedb-tables\">AudienceDB tables</h2><p>Visit and visitor attributes are stored in database table columns according to their attribute type and name. Audiences are stored as columns in the visitors table. The keys for the tables are <code>visit_id</code> or <code>visitor_id</code>.</p><p>The following tables are available for visit and visitor data:</p><ul><li>Visit/Session Data: <code>visits</code></li><li>Visitor Data: <code>visitors</code></li></ul><p>In addition, the following tables exist for special attribute types:</p><ul><li>Arrays: <code>visit_arrays</code>, <code>visitor_arrays</code></li><li>Set of Strings: <code>visit_lists</code>, <code>visitor_lists</code></li><li>Tally: <code>visit_tallies</code>, <code>visitor_tallies</code></li></ul><p>For detailed information, see the <a href=\"/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/\">AudienceDB data guide</a>.</p><h2 id=\"eventdb-tables\">EventDB tables</h2><p>EventDB table data includes event attributes for all events in the event feed. Table columns are named according to the attribute type and name, with only some attributes referencing internal ID&rsquo;s. Standard Universal Data Object (UDO) variables are named with a <code>udo_</code> prefix and most column names match their corresponding attribute names, for example: <code>udo_event_name</code>. For additional information, see <a href=\"/server-side/live-events-feeds/\">Live Events and Feeds</a>.</p><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Event data coming from the Tealium Collect tag also includes information about which tags executed on the page and page performance metrics. For more information, see <a href=\"/client-side-tags/tealium-collect-tag/\">Tealium Collect</a>.</p><p>The following tables are available for event data:</p><ul><li>Event Feed Data: <code>events_{FEED}</code></li></ul>"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/config-audiencedb-eventdb/",
            "title": "Configure AudienceDB and EventDB",
            "body":"<h2 id=\"requirements\">Requirements</h2><ul><li>To send data to EventDB, event feeds must be configured and EventStore must be enabled.</li><li>To send data to AudienceDB, AudienceStore must be enabled.</li></ul><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>To have EventDB and AudienceDB enabled for your account and profile, contact your account manager.</p><h2 id=\"how-it-works\">How it works</h2><p>Data storage is controlled at the attribute level. When you create event attributes, visitor attributes, and visit attributes, there is an option you can select to send the attribute to EventDB or AudienceDB.<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-attribute-checkbox.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-attribute-checkbox.png\"         alt=\"Edit attribute screen showing checkbox to add attribute to EventDB\"         title=\"Edit attribute screen showing checkbox to add attribute to EventDB\"/>    </a></figure></p><h3 id=\"visit-and-visitor-attributes\">Visit and visitor attributes</h3><p>All audiences in your account are sent to AudienceDB by default. You can select the audiences and attributes that are sent to AudienceDB on the <strong>AudienceDB</strong> screen. For more information, see <a href=\"#configure-audiencedb-attributes\">Configure AudienceDB attributes</a>.</p><h3 id=\"event-attributes\">Event attributes</h3><p>All preloaded attributes (attributes defined by Tealium and available for all accounts) are sent to EventDB by default. You can select the custom attributes that are sent to EventDB on the <strong>EventDB Attributes</strong> screen.</p><p>Preloaded attributes cannot be changed on the <strong>EventDB Attributes</strong> screen. Use the <strong>DataAccess Console</strong> to adjust the preloaded attributes that are stored in EventDB. For more information, see <a href=\"#configure-eventdb-attributes\">Configure EventDB attributes</a>.</p><p>DOM attributes (for example, URL, domain, referrer, and user agent) are always sent and cannot be excluded from EventDB. In addition, Tealium event attributes, such as <code>tealium_account</code>, <code>tealium_profile</code>, <code>tealium_event</code> are always sent and cannot be excluded.</p><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>We recommend that you only enable EventDB for the specific event feeds that you need because the amount of data can become very large depending on your volume. For additional information, see <a href=\"/server-side/live-events-feeds/about-event-feeds/\">Live Events and Feeds</a>.</p><p>For more information on attributes, see <a href=\"/server-side/attributes/about/\">Using Attributes</a>.</p><h2 id=\"configure-audiencedb-attributes\">Configure AudienceDB attributes</h2><p>By default, all audiences are selected for AudienceDB. You can deselect audiences to remove them from AudienceDB. You can also select or deselect visit and visitor attributes as needed.</p><p>Use the following steps to configure the attributes and audiences that are stored in AudienceDB:</p><ol><li>Go to <strong>DataAccess &gt; AudienceDB</strong>.<br>The list of audiences and attributes available for your account is displayed, as shown below.<br><figure><a class=\"slb\" href=\"/images/server-side/data-access/audiencedb-screen.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/audiencedb-screen.png\"         alt=\"list of audiences and attributes in AudienceDB\"         title=\"list of audiences and attributes in AudienceDB\"/>    </a></figure><br>You can filter the list of attributes by <strong>Scope</strong>, <strong>Type</strong>, or <strong>Data Type</strong>.</li><li>Deselect audiences to remove them from AudienceDB, if needed.</li><li>Select or deselect attributes to add or remove them from AudienceDB.</li><li>Save and publish.</li></ol><h2 id=\"configure-eventdb-attributes\">Configure EventDB attributes</h2><p>By default, your event streams contain all of the event attributes defined in your account. For streams collecting data from the Tealium Collect tag, additional Boolean attributes are included for each tag that fires during an event. For example, if you have Google Analytics in your Tealium iQ Tag Management account along with the Tealium Collect tag, your event streams include a Boolean attribute named <code>Google Analytics</code> indicating whether or not it fired for each event.</p><p>Follow these steps to configure the attributes that are stored in EventDB:</p><ol><li><p>Go to <strong>DataAccess &gt; EventDB</strong>.</p></li><li><p>Click <strong>Show EventDB Attributes</strong>.<br>The list of event attributes available for your account is displayed.</p>   <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Attributes marked as Restricted Data are excluded by default, but you may check the box to include them.</p></li><li><p>Select or deselect attributes to add or remove them from EventDB.<br>All preloaded EventDB attributes are selected by default.<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-attr-select.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-attr-select.png\"         alt=\"List of attributes to select for EventDB\"         title=\"List of attributes to select for EventDB\"/>    </a></figure></p></li><li><p>Click <strong>Save</strong>.</p></li><li><p>Save and Publish.</p></li></ol><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>After you have configured EventDB attributes, it may take up to an hour for data to begin populating your database.</p>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/",
            "title": "AudienceDB data guide",
            "body":"<h2 id=\"how-it-works\">How it works</h2><p>AudienceDB stores both visit-level and visitor-level data to a Postgres-like database in Amazon Redshiftâ„¢ where you can query and analyze the data directly using your preferred SQL client or Business Intelligence (BI) tool.</p><p>When AudienceDB is activated, a database is created in Amazon Redshiftâ„¢ to store your AudienceStream data. The new database contains a table for each data type that it can store. Data associated with visit-level data is stored in tables prefixed with <code>visit_</code>. Data associated with visitor-level data is stored in tables prefixed with <code>visitor_</code>. In addition to the tables, several views are also created to make it easier to write queries.</p><p>If you are new to AudienceDB, review the basics in <a href=\"/server-side/data-storage/audiencedb-eventdb/about/\">Working with AudienceDB and EventDB</a>.</p><h2 id=\"eventdb-and-audiencedb-diagram\">EventDB and AudienceDB diagram</h2><p>Event, visitor, and visit attributes work together in EventDB and AudienceDB. The following diagram illustrates the relationships between the EventDB and AudienceDB attributes. These relationships are important when writing queries that return event data for a specific visit or visitor.</p><figure><a class=\"slb\" href=\"/images/server-side/eventdb-and-audiencedb-diagram-update-for-tlc.jpg\"><img src=\"https://docs.tealium.com/images/server-side/eventdb-and-audiencedb-diagram-update-for-tlc.jpg\"         alt=\"EventDB and AudienceDB Diagram Update for TLC\"         title=\"EventDB and AudienceDB Diagram Update for TLC\"/>    </a></figure><h2 id=\"attributes-and-column-names\">Attributes and column names</h2><p>Each visit and visitor attribute that is enabled for AudienceDB appears as a column in one or more of the database tables.</p><p>The following is a list of the attribute data types and the corresponding naming convention of the columns where &ldquo;###&rdquo; represents the attribute ID. The examples shown in the table indicate visitor attributes. Visit attributes use the word &ldquo;visit&rdquo; in place of &ldquo;visitor&rdquo;.</p><table><thead><tr><th>Attribute data type</th><th>Table column name</th></tr></thead><tbody><tr><td>Array</td><td><ul><li><strong>Table</strong>: <code>array_###</code></li><li><strong>View</strong>: <code>visitor array - array_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor array - array_name</code></li></ul></td></tr><tr><td>Audience<br> Values <code>t</code> for true and <code>f</code> for false indicate the presence in audience.</td><td><ul><li><strong>Table</strong>: <code>audience_account_profile_###</code></li><li><strong>View</strong>: <code>visitor - audience - audience_name (account_profile_###)</code></li><li><strong>Normalized</strong>: <code>visitor - audience - audience_name</code></li></ul></td></tr><tr><td>Badge<br> Values <code>t</code> for true and <code>f</code> for false indicate presence of badge.</td><td><ul><li><strong>Table</strong>: <code>badge_###</code></li><li><strong>View</strong>: <code>visitor - badge - badge_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - badge - badge_name</code></li></ul></td></tr><tr><td>Boolean</td><td><ul><li><strong>Table</strong>: <code>flag_###</code></li><li><strong>View</strong>: <code>visitor - flag - boolean_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - flag - boolean_name</code></li></ul></td></tr><tr><td>Date</td><td><ul><li><strong>Table</strong>: <code>date_###</code></li></ul> <ul><li><strong>View</strong>: <code>visitor - date - date_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - date - date_name</code></li></ul></td></tr><tr><td>Number</td><td><ul><li><strong>Table</strong>: <code>metric_###</code></li><li><strong>View</strong>: <code>visitor - metric - metric_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - metric - metric_name</code></li></ul></td></tr><tr><td>Set of Strings</td><td><ul><li><strong>Table</strong>: <code>list_###</code></li><li><strong>View</strong>: <code>visitor list - set_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor list - set_name</code></li></ul></td></tr><tr><td>String</td><td><ul><li><strong>Table</strong>: <code>property_###</code></li><li><strong>View</strong>: <code>visitor - property - property_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - property - property_name</code></li></ul></td></tr><tr><td>Tally</td><td><ul><li><strong>Table</strong>: <code>visitor_tally_###_key</code> <code>visitor_tally_###_value</code></li><li><strong>View</strong>: <code>visitor tally - tally_name (###) - key</code> &ldquo;visitor tally - tally_name (###) - value&rdquo;</li><li><strong>Normalized</strong>: <code>visitor tally - tally_name - key</code> &ldquo;visitor tally - tally_name - value&rdquo;</li></ul></td></tr></tbody></table><h2 id=\"audiencedb-tables\">AudienceDB tables</h2><p>The following table describes AudienceDB table types used for audience data and the name of the corresponding &ldquo;view&rdquo; and &ldquo;normalized&rdquo; tables:</p><table><thead><tr><th>Data type and description</th><th>Table/View/Normalized name</th></tr></thead><tbody><tr><td><strong>Arrays</strong><br> Each item in the array is a row in the table with an additional column named <code>index</code> for the zero-based array position.</td><td><code>visit_arrays</code><br> <code>visit_arrays_view</code><br> <code>visitor_arrays</code><br> <code>visitor_arrays_view</code><br> <code>visitor_arrays_view_normalized</code></td></tr><tr><td><strong>Set of Strings</strong><br> Each item in the set is a row in the table.</td><td><code>visit_lists</code><br> <code>visit_lists_view</code><br> <code>visitor_lists</code><br> <code>visitor_lists_view</code><br> <code>visitor_lists_view_normalized</code></td></tr><tr><td><strong>Tally</strong><br> Each item in the tally is a row in the table with one column for the key (suffix <code>_key</code>) and one column for the value (suffix <code>_value</code>).</td><td><code>visit_tallies</code><br> <code>visit_tallies_view</code><br> <code>visitor_tallies</code><br> <code>visitor_tallies_view</code><br> <code>visitor_tallies_view_normalized</code></td></tr><tr><td><strong>Stitched Visitors</strong><br> Visitor IDs that are stitched in the profile as part of <a href=\"/server-side/visitor-stitching/about/\">visitor stitching</a>.</td><td><code>visitor_replaces</code><br> <code>visitor_replaces_view</code></td></tr><tr><td><strong>Visits</strong><br> Current visit attributes and any audiences they belong to.</td><td><code>visits</code><br> <code>visits_view</code></td></tr><tr><td><strong>Visitors</strong><br> Visitor attributes and any audiences they belong to.</td><td><code>visitors</code><br> <code>visitors_view</code><br> <code>visitors_view_normalized</code></td></tr><tr><td><strong>Visitor Batches</strong></td><td>For internal use only</td></tr></tbody></table><h2 id=\"sample-database-structures\">Sample database structures</h2><p>The following sections provide sample structure examples for each view to assist in determining what is unique about each view and how the view differs from other views.</p><h3 id=\"visit-arrays\">Visit arrays</h3><p>The following example shows the the basic formatting for the <code>visit_arrays</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\"> visit_id                          | index | updated                 | visit_array_421 ----------------------------------+-------------------------------------------------------------------------- 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | Smartphone 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | Phone Charger 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | Smartphone Case</code></pre><h3 id=\"visit-lists\">Visit lists</h3><p>The following example shows the the basic formatting for the <code>visit_lists</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_list_284 from visit_lists; visit_id                          | updated                 | visit_list_284 ----------------------------------+------------------------------------------------------------------------- 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Cell Phones &amp; Accessories 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Computers and Tablets 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Office Supplies</code></pre><h3 id=\"visit-tallies\">Visit tallies</h3><p>The following example shows the the basic formatting for the <code>visitor_tallies</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_tally_5144_key, visit_tally_5144_value from visit_tallies;                        visit_id                                 | updated                 | visit_tally_5144_key | visit_tally_5144_value-----------------------------------------------------------------+-------------------------+----------------------+-----------------------19fd8716d2f8341b81f84f471b5f950873d5c88acee9c61089f286fb8b5d4903 | 2017-09-04 20:39:05.303 | Furniture            | 206db172cf2a8fd7f9ff882a28a14ad266ee67824c9bc3ee0b1fcc451b42cec68 | 2017-09-05 06:20:16.209 | Furniture            | 14162e22ba6c168bff2385bcfba9d4ba8e15767d1ad8b519b3a872a2ad89d3f3dd | 2017-09-05 06:04:59.671 | Search               | 24225575ce21a7f9454c56c269eccfee9782e03c6f647a743f058b7b667dd3bbb | 2017-09-20 06:30:14.63  | Home                 | 1e1e5dd5e58bc97056f8340e242205e1ec2ab0a88c94c890563399f55828638f7 | 2017-09-09 14:22:08.575 | Furniture            | 3(5 rows)</code></pre><h3 id=\"visitor-arrays-view\">Visitor arrays view</h3><p>The following example shows the the basic formatting for the <code>visitor_arrays_view</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select &#34;visitor - id&#34;, &#34;index&#34;, &#34;updated&#34;, &#34;visitor array - cart product name (421)&#34; from visitor_arrays_view; &#34;visitor array - visitor id&#34;      | index | updated                 | &#34;visitor array - cart product name (421)&#34; ----------------------------------+-------------------------------------------------------------------------- 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | Smartphone 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | Phone Charger 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | Smartphone Case</code></pre><h3 id=\"visitor-lists\">Visitor lists</h3><p>The following example shows the the basic formatting for the <code>visitor_lists</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_list_5168 from visitor_lists;                  visitor_id                   |         updated         | visitor_list_5168-----------------------------------------------+-------------------------+------------------- 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Cell Phones 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Phone Accessories 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Office Supplies</code></pre><h3 id=\"visitor-replaces\">Visitor replaces</h3><p>The following example shows the the basic formatting for the <code>visitor_replaces</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_replaces_id, visitor_id, updated from visitor_replaces where updated is not null;                visitor_replaces_id           | visitor_id                                      | updated----------------------------------------------+-------------------------------------------------+------------------------015f8d82498b00132b921ecf890d00089001c08100432 | myexample_main__5216_username@gmail.com         | 2017-11-23 15:32:28.81015f4a0302b9009e17205a49027005079001c07100c48 | myexample_main__5216_username@myexample.com     | 2017-11-24 22:50:31.105015feb1537cc00305e319fca622400085001d07d00720 | myexample_main__5216_username@yahoo.com         | 2017-11-26 01:22:27.57015decf4f3170011afb0979834420007e007b07600720 | myexample_main__5216_username@hotmail.com       | 2018-01-03 22:03:20.837015e3b903e48000c7944f6af4b8e00087016907f0049e | myexample_main__5216_username@cox.net           | 2018-01-28 03:59:45.031(5 rows)</code></pre><h3 id=\"visitor-tallies\">Visitor tallies</h3><p>The following example shows the the basic formatting for the <code>visitor_tallies</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_tally_57_key, visitor_tally_57_value from visitor_tallies;                 visitor_id                   |         updated         | visitor_tally_57_key | visitor_tally_57_value----------------------------------------------+-------------------------+----------------------+------------------------015dcd068996007c1f95a24aa47002075008d06d0093c | 2017-09-01 03:14:18.519 | Safari               |                      8015e40b27e55004ec842e2b9d0f800090001c08800408 | 2017-09-02 13:35:40.834 | Chrome               |                      2015e34c9fd270014a6799597769a00088008808000408 | 2017-08-31 05:44:14.013 | Chrome               |                      1(5 rows)</code></pre><h3 id=\"visitors-view\">Visitors view</h3><p>The following example shows the the basic formatting for the <code>visitors_view</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">select &#34;visitor - id&#34;, &#34;visitor - created&#34;, &#34;updated&#34;, &#34;visitor - audience - bedroom shoppers (myexample_main_102)&#34; from visitors_view limit 1;                 visitor - id                  |  visitor - created  |        updated         | visitor - audience - bedroom shoppers (myexample_main_102)-----------------------------------------------+---------------------+------------------------+--------------------------------------------------------------- 015de32cbb1e00265733c8c3c5bc00080001c07800976 | 2017-08-14 23:55:46 | 2017-08-20 15:27:48.75 | f(1 rows)</code></pre><h3 id=\"visits-table\">Visits table</h3><p>The following example shows the the basic formatting for the <code>visits</code> table:</p><pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, visitor_id, start_time, last_event_time, updated, property_5300, flag_5432 from visits limit 5;                       visit_id                                  | visitor_id                                    |     start_time      | last_event_time     | updated                 | property_5300 | flag_5432-----------------------------------------------------------------+-----------------------------------------------+---------------------+---------------------+-------------------------+---------------+-----------4af5f070998b6e471d05a809d55c62811784c57ee196c39a599c0a352e925e01 | 015c9e257f220048ebb26bfdb68405072001c06a00bd0 | 2017-07-18 17:04:31 | 2017-07-18 17:39:27 | 2017-07-18 18:09:28.994 |               |42fd5d3067b5472a57aa7fe6e8cf12d5d60ea2a9399d54de01bfb0b06e33bd73 | 015cc166a9b100028f7070a6e51d01049003e00d00bd0 | 2017-07-18 21:10:21 | 2017-07-18 21:13:32 | 2017-07-18 21:43:32.948 |               |9729e709ec80bc476dc6c36c6bf33f998f92c3f2e3af5509078c6402ceff29bf | 015d56a5ec3d00128011a73f446404079001c07100838 | 2017-07-19 18:28:26 | 2017-07-19 18:28:26 | 2017-07-19 18:38:27.903 |               |6d1c801fb894234347d27a61b9b0f82ac918bfdc36a0510ab3be8ea6a72b9038 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 19:30:08 | 2017-07-19 19:30:08 | 2017-07-19 19:40:12.802 |               |c97a0a0c9dfc4cb58e23dbfdb98528cddc8a989c9d65f0e6fd89ffdc5e82c727 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 21:33:00 | 2017-07-19 21:33:00 | 2017-07-19 21:43:02.803 |               |(5 rows)</code></pre><h2 id=\"understanding-stitched-visitors\">Understanding stitched visitors</h2><p>In AudienceDB, only one visitor profile is maintained in the visitors table for visitors that become stitched. The visitor profiles for stitched visitors are viewed as one, but with different IDs. The <code>visitor_replaces</code> table provides a lookup method to view the replaced <code>visitor_ids</code> to accomplish this.</p><p>Visitor Replaces table example:</p><table><thead><tr><th><code>visitor_replaces_id</code></th><th><code>visitor_id</code></th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>3</td></tr><tr><td>4</td><td>6</td></tr><tr><td>5</td><td>6</td></tr></tbody></table><p>In this table:</p><ul><li>Visitor1 and Visitor2 are stitched into Visitor 3.</li><li>Visitor 4 and Visitor 5 are stitched into Visitor 6.</li></ul><p>The above information can be used to join the <code>visitors</code> table to the <code>visits</code> table or the EventDB tables, if needed.</p><p>To join events from EventDB to AudienceDB:</p><ul><li>Join <code>events_x</code> directly to the <code>visitors</code> table for non-stitched visitors, and;</li><li>Join through the <code>visitor_replaces</code> table for those that have been stitched, as shown in the following example:</li></ul><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-sql\" data-lang=\"sql\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">SELECT</span> e.<span style=\"color:#e6db74\">&#34;event - id&#34;</span>, v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">FROM</span> account__profile.events_view__all_events__all_events e</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">LEFT</span> <span style=\"color:#66d9ef\">JOIN</span> account__profile.visitor_replaces_view r <span style=\"color:#66d9ef\">ON</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - replaces id&#34;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">JOIN</span> account__profile.visitors_view_normalized v <span style=\"color:#66d9ef\">ON</span> (v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#66d9ef\">or</span> v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span>)</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">limit</span> <span style=\"color:#ae81ff\">1000</span>;</span></span></code></pre></div><ul><li>This example accounts for visitor IDs in <code>events_all_events</code> being in <code>visitors</code> OR <code>visitor_replaces</code>.</li></ul><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Visitors attributed to single event sessions will not be stored in the visitors table.</p><h2 id=\"additional-resources\">Additional resources</h2><ul><li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_designing-queries-best-practices.html\">(Amazon Redshiftâ„¢) Best Practices for Designing Queries</a>.</li><li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c-optimizing-query-performance.html\">(Amazon Redshiftâ„¢) Tuning Query Performance</a>.</li></ul>"
        }  

    , 
        {
            "weight": "50",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/connect/",
            "title": "Connect to EventDB and AudienceDB",
            "body":"<h2 id=\"connect-to-redshift\">Connect to Redshift</h2><p>To access to your EventDB and AudienceDB data, a third-party tool with the ability to connect to a Postgres-style database is required.</p><ul><li><strong>First Time Users</strong>After EventDB and AudienceDB are enabled for your account, Redshift Spectrum is automatically enabled.</li><li><strong>Existing Customers</strong>Before enabling Spectrum for existing customers that have been using DataAccess, a data migration is needed to ensure all existing and new data are written to the correct location. Coordinate with your team in advance to proceed.</li></ul><h2 id=\"get-database-credentials\">Get database credentials</h2><p>Third-party tools with Postgres support require authentication credentials to connect. Authentication credentials are provided in the DataAccess Console.</p><p>Database Credentials are now generated for each user. Previously, all users shared the credentials generated for an account and profile. If someone regenerated global credentials, all user connections were terminated, and all users had to reconnect.</p><p>For user-specific credentials, the generated credentials are based on the account, profile, and the user&rsquo;s email address. Users can regenerate their own credentials without terminating other connections. You can remove access for a specific user without terminating other connections. To deactivate a specific user&rsquo;s credentials, contact Tealium Support.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Previously-generated global credentials can still be used, but cannot be regenerated.</p><p>Use the following steps to get database authentication credentials:</p><ol><li>Navigate to <strong>DataAccess &gt; EventDB</strong> or <strong>DataAccess &gt; AudienceDB</strong>.</li><li>Click <strong>Get DB Connection Details</strong>.</li><li>Click <strong>Regenerate DB Credentials</strong>.<br>You need to regenerate credentials even if this is your first time getting credentials.<br><figure><a class=\"slb\" href=\"/images/server-side/connection-details.png\"><img src=\"https://docs.tealium.com/images/server-side/connection-details.png\"         alt=\"connection details\"         title=\"connection details\"/>    </a></figure></li><li>Click <strong>Yes</strong> to confirm that you want to delete your existing credentials and generate new ones.<br>The <strong>DB Connection Details</strong> screen displays the following fields:<ul><li><strong>Username</strong><br>The username for the database connection, which is a combination of your account, profile names, and your email address. For example, <code>account__profile__email</code>.</li><li><strong>Password</strong><br>The password for the database connection.</li><li><strong>Database</strong><br>The name of the database, usually the name of your account.</li><li><strong>Host</strong><br>The host name of the database server, specific to your data storage region.</li><li><strong>Port</strong><br>The port number for the connection.</li></ul></li><li>Save the connection details for future use, then click <strong>Close</strong>.</li></ol><h3 id=\"browse-the-redshift-database\">Browse the Redshift database</h3><p>After you have your database authentication credentials, you can connect to the database using a third-party tool. The following example uses SQL Workbench/J, which is a freeware application (see <a href=\"/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">Connecting to EventDB with SQL Workbench</a>). The schema naming convention is <code>account__profile</code>.</p><p>The example below shows a view that joins all the related tables and columns.</p><figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-db-explorer.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-db-explorer.jpg\"/>    </a></figure><p>This example shows a raw data table view. The column names are in the same positions in each table, regardless of the view. The main difference between these two views is the readability of the entry.</p><figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-columns.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-columns.jpg\"/>    </a></figure><h2 id=\"writing-sql-queries\">Writing SQL queries</h2><p>The following articles provide best practices and examples of useful queries:</p><ul><li><a href=\"/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">Connecting to EventDB and AudienceDB with SQL Workbench/J</a></li><li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363364-best-practices-for-writing-queries-for-eventdb-and-audiencedb/preview\">Best Practices for Writing Queries for EventDB and AudienceDB</a></li><li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363427-helpful-sql-queries-for-eventdb-and-audiencedb\">Helpful SQL Queries for EventDB and AudienceDB</a></li></ul>"
        }  

    ]
}
