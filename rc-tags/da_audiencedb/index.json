
{
    "kind": "term",
    "name": "da_audiencedb",
    "count": 4,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/about/",
            "title": "About AudienceDB and EventDB",
            "body": "<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>To have EventDB and AudienceDB enabled for your account and profile, contact your customer success manager.</p>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>AudienceDB and EventDB services store structured audience and event data in Amazon Redshift, a data warehouse based on PostgreSQL. You can query and analyze the data in Amazon Redshift using your preferred SQL client or Business Intelligence (BI) tool.</p>\n<p>EventDB uses EventStore as a data source, importing the data from the EventStore S3 bucket into the Amazon Redshift database provided by Tealium.</p>\n<p>AudienceStore is not a prerequisite to activate AudienceDB; these services operate independently. AudienceDB saves visitor profile data at the end of each visitor session.</p>\n<p>After AudienceDB and EventDB have been enabled, you must select the attributes to be stored. For more information, see <a href=\"/server-side/data-storage/audiencedb-eventdb/configure/\">Configure AudienceDB and EventDB</a>.</p>\n<h3 id=\"data-storage-timing\">Data storage timing</h3>\n<p>New data is stored in EventDB and AudienceDB within 30 to 90 minutes, depending on the load for the Redshift cluster.</p>\n<h3 id=\"database-schemas\">Database schemas</h3>\n<p>When EventDB and AudienceDB are enabled, a database is created in Amazon Redshift to store your data. Each profile has its own database schema within the same Redshift instance, which means that each user has their own username and password for each database schema (profile). The database schemas for AudienceDB and EventDB are created automatically when EventDB or AudienceDB are enabled for a profile.</p>\n<h3 id=\"data-retention\">Data retention</h3>\n<p>The data stored in EventDB and AudienceDB remains available in Amazon RedShift for the length of time stated in your contract. Contact your account manager to review the terms of your contract that determine the length of time your data is stored.</p>\n<h4 id=\"changes-to-stored-eventdb-and-audiencedb-attributes\">Changes to stored EventDB and AudienceDB attributes</h4>\n<p>If you remove an attribute that was previously added for EventDB, the attribute is no longer sent to EventDB and is also removed from EventDB. Changes to EventDB attributes have no effect on EventStore files.</p>\n<p>If you remove an attribute that was previously added for AudienceDB, the attribute is no longer sent to AudienceDB and is also removed from AudienceDB. Changes to AudienceDB attributes have no effect on AudienceStore files.</p>\n<h2 id=\"tables-views-and-normalized-views\">Tables, views, and normalized views</h2>\n<p>The columns in the Redshift database tables are named according to the attribute type and the internal attribute ID. Views and normalized views of data contain the same data as tables, but have user friendly names that make it easier to write queries. The normalized view name is similar to the view name but with the attribute ID omitted from the table name. Table names and view names are created as follows:</p>\n<ul>\n<li><strong>Table names</strong><br>\nColumn names are a combination of the attribute type and the attribute ID.<br>\nFor example: <code>badge_30</code></li>\n<li><strong>View names</strong><br>\nColumn names are a combination of a user-friendly name and the attribute ID.<br>\nFor example: <code>visitor - badge - fan (30)</code></li>\n<li><strong>Normalized view names</strong><br>\nColumn names are user-friendly names without attribute IDs.<br>\nFor example: <code>visitor - badge - fan</code></li>\n</ul>\n<p>Views and normalized views simplify the process of running queries with aggregations such as <code>SUM()</code> , <code>MIN()</code>, and <code>MAX()</code>.</p>\n<h2 id=\"audiencedb-tables\">AudienceDB tables</h2>\n<p>Visit and visitor attributes are stored in database table columns according to their attribute type and name. Audiences are stored as columns in the visitors table. The keys for the tables are <code>visit_id</code> or <code>visitor_id</code>.</p>\n<p>The following tables are available for visit and visitor data:</p>\n<ul>\n<li>Visit/Session Data: <code>visits</code></li>\n<li>Visitor Data: <code>visitors</code></li>\n</ul>\n<p>In addition, the following tables exist for special attribute types:</p>\n<ul>\n<li>Arrays: <code>visit_arrays</code>, <code>visitor_arrays</code></li>\n<li>Set of Strings: <code>visit_lists</code>, <code>visitor_lists</code></li>\n<li>Tally: <code>visit_tallies</code>, <code>visitor_tallies</code></li>\n</ul>\n<p>For detailed information, see the <a href=\"/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/\">AudienceDB data guide</a>.</p>\n<h2 id=\"eventdb-tables\">EventDB tables</h2>\n<p>EventDB table data includes event attributes for all events in the event feed. Table columns are named according to the attribute type and name, with only some attributes referencing internal ID&rsquo;s. Standard Universal Data Object (UDO) variables are named with a <code>udo_</code> prefix and most column names match their corresponding attribute names, for example: <code>udo_event_name</code>. For additional information, see <a href=\"/server-side/live-events-feeds/\">Live Events and Feeds</a>.</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Event data coming from the Tealium Collect tag also includes information about which tags executed on the page and page performance metrics. For more information, see <a href=\"/client-side-tags/tealium-collect-tag/\">Tealium Collect</a>.</p>\n<p>The following tables are available for event data:</p>\n<ul>\n<li>Event Feed Data: <code>events_{FEED}</code></li>\n</ul>\n"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/configure/",
            "title": "Configure AudienceDB and EventDB",
            "body": "<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>To send data to EventDB, event feeds must be configured and EventStore must be enabled.</li>\n<li>To send data to AudienceDB, AudienceStore must be enabled.</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>To have EventDB and AudienceDB enabled for your account and profile, contact your account manager.</p>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>Data storage is controlled at the attribute level. When you create event, visitor, or visit attributes, there is an option you can select to send the attribute to EventDB or AudienceDB.\n<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-attribute-checkbox.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-attribute-checkbox.png\"\n         alt=\"Edit attribute screen showing checkbox to add attribute to EventDB\"\n         title=\"Edit attribute screen showing checkbox to add attribute to EventDB\"/>\n    </a>\n</figure></p>\n<p>You can also configure the attributes sent to EventDB and AudienceDB on the <strong>EventDB/AudienceDB</strong> screen, shown in the following figure:\n<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-audiencedb-config-screen.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-audiencedb-config-screen.png\"/>\n    </a>\n</figure></p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>All preloaded attributes (attributes defined by Tealium and available for all accounts) are are selected for EventDB and AudienceDB by default. This behavior cannot be changed.</p>\n<h3 id=\"visit-and-visitor-attributes\">Visit and visitor attributes</h3>\n<p>All audiences in your account are sent to AudienceDB by default. You can select the audiences and attributes that are sent to AudienceDB on the <strong>AudienceDB</strong> tab on the <strong>EventDB/AudienceDB</strong> screen. For more information, see <a href=\"#configure-audiencedb-attributes\">Configure AudienceDB attributes</a>.</p>\n<h3 id=\"event-attributes\">Event attributes</h3>\n<p>DOM attributes (for example, URL, domain, referrer, and user agent) are always sent and cannot be excluded from EventDB. In addition, Tealium event attributes, such as <code>tealium_account</code>, <code>tealium_profile</code>, <code>tealium_event</code> are always sent and cannot be excluded. Other attributes can be selected, or deselected, on the <strong>EventDB</strong> tab on the <strong>EventDB/AudienceDB</strong> screen. For more information, see <a href=\"#configure-eventdb-attributes\">Configure EventDB attributes</a>.</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>We recommend that you only enable EventDB for the specific event feeds that you need because the amount of data can become very large depending on your volume. For additional information, see <a href=\"/server-side/live-events-feeds/about-event-feeds/\">Live Events and Feeds</a>.</p>\n<h4 id=\"event-data-from-the-tealium-collect-tag\">Event data from the Tealium Collect tag</h4>\n<p>For feeds collecting data from the Tealium Collect tag, additional Boolean attributes are included for each tag that fires during an event. For example, if you have Google Analytics in your Tealium iQ Tag Management account along with the Tealium Collect tag, your event feeds include a Boolean attribute named <code>Google Analytics</code> indicating whether or not it fired for each event.</p>\n<p>For more information on attributes, see <a href=\"/server-side/attributes/about/\">Using Attributes</a>.</p>\n<h2 id=\"configure-audiencedb-attributes\">Configure AudienceDB attributes</h2>\n<p>By default, all audiences are selected for AudienceDB. You can deselect audiences to remove them from AudienceDB. You can also select or deselect visit and visitor attributes as needed.</p>\n<p>Use the following steps to configure the attributes and audiences that are stored in AudienceDB:</p>\n<ol>\n<li>\n<p>Go to <strong>DataAccess</strong> &gt; <strong>EventDB/AudienceDB</strong>.</p>\n</li>\n<li>\n<p>Click the <strong>AudienceDB</strong> tab.\nThe list of audiences and attributes available for your account is displayed.<br>\nYou can filter the list of attributes by <strong>Data Type</strong>, <strong>Attribute Type</strong> (Preloaded or Custom), <strong>AudienceDB</strong> (Enabled or Disabled), or <strong>Type</strong> (Audience or Attribute).</p>\n</li>\n<li>\n<p>Select or deselect attributes to add or remove them from AudienceDB.</p>\n <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Attributes marked as Restricted Data are always sent to AudienceDB. This behavior cannot be changed.</p>\n</li>\n<li>\n<p>Save and publish.</p>\n</li>\n</ol>\n<h2 id=\"configure-eventdb-attributes\">Configure EventDB attributes</h2>\n<p>By default, your event feeds contain all of the event attributes defined in your account.</p>\n<p>Follow these steps to configure the attributes that are stored in EventDB:</p>\n<ol>\n<li>\n<p>Go to <strong>DataAccess</strong> &gt; <strong>EventDB/AudienceDB</strong>.<br>\nThe list of event attributes available for your account is displayed. You can filter the list of attributes by <strong>Data Type</strong>, <strong>Attribute Type</strong> (Preloaded or Custom), <strong>EventDB</strong> (Enabled or Disabled).</p>\n <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Attributes marked as Restricted Data are excluded from event feeds by default. This can be changed in the settings for each feed.</p>\n</li>\n<li>\n<p>Select or deselect attributes to add or remove them from EventDB.</p>\n</li>\n<li>\n<p>Save and Publish.</p>\n</li>\n</ol>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>After you configure EventDB attributes and publish the changes, it may take up to one hour for data to begin populating your database.</p>\n<h2 id=\"changes-to-stored-attributes\">Changes to stored attributes</h2>\n<p>If you remove an attribute that was previously added for EventDB or AudienceDB storage, and publish the changes, that attribute will be removed from EventDB or AudienceDB.</p>\n<p>If you remove an attribute, and subsequently add it again and publish the changes, data in EventDB or AudienceDB that was removed cannot be restored.</p>\n"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/",
            "title": "AudienceDB data guide",
            "body": "<h2 id=\"how-it-works\">How it works</h2>\n<p>AudienceDB stores both visit-level and visitor-level data to a Postgres-like database in Amazon Redshift™ where you can query and analyze the data directly using your preferred SQL client or Business Intelligence (BI) tool.</p>\n<p>When AudienceDB is activated, a database is created in Amazon Redshift™ to store your AudienceStream data. The new database contains a table for each data type that it can store. Data associated with visit-level data is stored in tables prefixed with <code>visit_</code>. Data associated with visitor-level data is stored in tables prefixed with <code>visitor_</code>. In addition to the tables, several views are also created to make it easier to write queries.</p>\n<p>If you are new to AudienceDB, review the basics in <a href=\"/server-side/data-storage/audiencedb-eventdb/about/\">Working with AudienceDB and EventDB</a>.</p>\n<h2 id=\"eventdb-and-audiencedb-diagram\">EventDB and AudienceDB diagram</h2>\n<p>Event, visitor, and visit attributes work together in EventDB and AudienceDB. The following diagram illustrates the relationships between the EventDB and AudienceDB attributes. These relationships are important when writing queries that return event data for a specific visit or visitor.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/eventdb-and-audiencedb-diagram.jpg\"><img src=\"https://docs.tealium.com/images/server-side/eventdb-and-audiencedb-diagram.jpg\"\n         alt=\"EventDB and AudienceDB Diagram Update for TLC\"\n         title=\"EventDB and AudienceDB Diagram Update for TLC\"/>\n    </a>\n</figure>\n<h2 id=\"attributes-and-column-names\">Attributes and column names</h2>\n<p>Each visit and visitor attribute that is enabled for AudienceDB appears as a column in one or more of the database tables.</p>\n<p>The following is a list of the attribute data types and the corresponding naming convention of the columns where &ldquo;###&rdquo; represents the attribute ID. The examples shown in the table indicate visitor attributes. Visit attributes use the word &ldquo;visit&rdquo; in place of &ldquo;visitor&rdquo;.</p>\n<table>\n<thead>\n<tr>\n<th>Attribute data type</th>\n<th>Table column name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Array</td>\n<td><ul><li><strong>Table</strong>: <code>array_###</code></li><li><strong>View</strong>: <code>visitor array - array_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor array - array_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Audience<br> Values <code>t</code> for true and <code>f</code> for false indicate the presence in audience.</td>\n<td><ul><li><strong>Table</strong>: <code>audience_account_profile_###</code></li><li><strong>View</strong>: <code>visitor - audience - audience_name (account_profile_###)</code></li><li><strong>Normalized</strong>: <code>visitor - audience - audience_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Badge<br> Values <code>t</code> for true and <code>f</code> for false indicate presence of badge.</td>\n<td><ul><li><strong>Table</strong>: <code>badge_###</code></li><li><strong>View</strong>: <code>visitor - badge - badge_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - badge - badge_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td><ul><li><strong>Table</strong>: <code>flag_###</code></li><li><strong>View</strong>: <code>visitor - flag - boolean_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - flag - boolean_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Date</td>\n<td><ul><li><strong>Table</strong>: <code>date_###</code></li></ul> <ul><li><strong>View</strong>: <code>visitor - date - date_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - date - date_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Number</td>\n<td><ul><li><strong>Table</strong>: <code>metric_###</code></li><li><strong>View</strong>: <code>visitor - metric - metric_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - metric - metric_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Set of Strings</td>\n<td><ul><li><strong>Table</strong>: <code>list_###</code></li><li><strong>View</strong>: <code>visitor list - set_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor list - set_name</code></li></ul></td>\n</tr>\n<tr>\n<td>String</td>\n<td><ul><li><strong>Table</strong>: <code>property_###</code></li><li><strong>View</strong>: <code>visitor - property - property_name (###)</code></li><li><strong>Normalized</strong>: <code>visitor - property - property_name</code></li></ul></td>\n</tr>\n<tr>\n<td>Tally</td>\n<td><ul><li><strong>Table</strong>: <code>visitor_tally_###_key</code> <code>visitor_tally_###_value</code></li><li><strong>View</strong>: <code>visitor tally - tally_name (###) - key</code> &ldquo;visitor tally - tally_name (###) - value&rdquo;</li><li><strong>Normalized</strong>: <code>visitor tally - tally_name - key</code> &ldquo;visitor tally - tally_name - value&rdquo;</li></ul></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"audiencedb-tables\">AudienceDB tables</h2>\n<p>The following table describes AudienceDB table types used for audience data and the name of the corresponding &ldquo;view&rdquo; and &ldquo;normalized&rdquo; tables:</p>\n<table>\n<thead>\n<tr>\n<th>Data type and description</th>\n<th>Table/View/Normalized name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Arrays</strong><br> Each item in the array is a row in the table with an additional column named <code>index</code> for the zero-based array position.</td>\n<td><code>visit_arrays</code><br> <code>visit_arrays_view</code><br> <code>visitor_arrays</code><br> <code>visitor_arrays_view</code><br> <code>visitor_arrays_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>Set of Strings</strong><br> Each item in the set is a row in the table.</td>\n<td><code>visit_lists</code><br> <code>visit_lists_view</code><br> <code>visitor_lists</code><br> <code>visitor_lists_view</code><br> <code>visitor_lists_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>Tally</strong><br> Each item in the tally is a row in the table with one column for the key (suffix <code>_key</code>) and one column for the value (suffix <code>_value</code>).</td>\n<td><code>visit_tallies</code><br> <code>visit_tallies_view</code><br> <code>visitor_tallies</code><br> <code>visitor_tallies_view</code><br> <code>visitor_tallies_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>Stitched Visitors</strong><br> Visitor IDs that are stitched in the profile as part of <a href=\"/server-side/visitor-stitching/about/\">visitor stitching</a>.</td>\n<td><code>visitor_replaces</code><br> <code>visitor_replaces_view</code></td>\n</tr>\n<tr>\n<td><strong>Visits</strong><br> Current visit attributes and any audiences they belong to.</td>\n<td><code>visits</code><br> <code>visits_view</code></td>\n</tr>\n<tr>\n<td><strong>Visitors</strong><br> Visitor attributes and any audiences they belong to.</td>\n<td><code>visitors</code><br> <code>visitors_view</code><br> <code>visitors_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>Visitor Batches</strong></td>\n<td>For internal use only</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sample-database-structures\">Sample database structures</h2>\n<p>The following sections provide sample structure examples for each view to assist in determining what is unique about each view and how the view differs from other views.</p>\n<h3 id=\"visit-arrays\">Visit arrays</h3>\n<p>The following example shows the the basic formatting for the <code>visit_arrays</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\"> visit_id                          | index | updated                 | visit_array_421\n ----------------------------------+--------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | Smartphone\n 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | Phone Charger\n 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | Smartphone Case\n</code></pre><h3 id=\"visit-lists\">Visit lists</h3>\n<p>The following example shows the the basic formatting for the <code>visit_lists</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_list_284 from visit_lists;\n\n visit_id                          | updated                 | visit_list_284\n ----------------------------------+-------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Cell Phones &amp; Accessories\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Computers and Tablets\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | Office Supplies\n</code></pre><h3 id=\"visit-tallies\">Visit tallies</h3>\n<p>The following example shows the the basic formatting for the <code>visitor_tallies</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_tally_5144_key, visit_tally_5144_value from visit_tallies;\n\n                        visit_id                                 | updated                 | visit_tally_5144_key | visit_tally_5144_value\n-----------------------------------------------------------------+-------------------------+----------------------+-----------------------\n19fd8716d2f8341b81f84f471b5f950873d5c88acee9c61089f286fb8b5d4903 | 2017-09-04 20:39:05.303 | Furniture            | 2\n06db172cf2a8fd7f9ff882a28a14ad266ee67824c9bc3ee0b1fcc451b42cec68 | 2017-09-05 06:20:16.209 | Furniture            | 14\n162e22ba6c168bff2385bcfba9d4ba8e15767d1ad8b519b3a872a2ad89d3f3dd | 2017-09-05 06:04:59.671 | Search               | 2\n4225575ce21a7f9454c56c269eccfee9782e03c6f647a743f058b7b667dd3bbb | 2017-09-20 06:30:14.63  | Home                 | 1\ne1e5dd5e58bc97056f8340e242205e1ec2ab0a88c94c890563399f55828638f7 | 2017-09-09 14:22:08.575 | Furniture            | 3\n(5 rows)\n</code></pre><h3 id=\"visitor-arrays-view\">Visitor arrays view</h3>\n<p>The following example shows the the basic formatting for the <code>visitor_arrays_view</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select &#34;visitor - id&#34;, &#34;index&#34;, &#34;updated&#34;, &#34;visitor array - cart product name (421)&#34; from visitor_arrays_view;\n\n &#34;visitor array - visitor id&#34;      | index | updated                 | &#34;visitor array - cart product name (421)&#34;\n ----------------------------------+--------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | Smartphone\n 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | Phone Charger\n 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | Smartphone Case\n</code></pre><h3 id=\"visitor-lists\">Visitor lists</h3>\n<p>The following example shows the the basic formatting for the <code>visitor_lists</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_list_5168 from visitor_lists;\n\n                  visitor_id                   |         updated         | visitor_list_5168\n-----------------------------------------------+-------------------------+-------------------\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Cell Phones\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Phone Accessories\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | Office Supplies\n</code></pre><h3 id=\"visitor-replaces\">Visitor replaces</h3>\n<p>The following example shows the the basic formatting for the <code>visitor_replaces</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_replaces_id, visitor_id, updated from visitor_replaces where updated is not null;\n\n                visitor_replaces_id           | visitor_id                                      | updated\n----------------------------------------------+-------------------------------------------------+------------------------\n015f8d82498b00132b921ecf890d00089001c08100432 | myexample_main__5216_username@gmail.com         | 2017-11-23 15:32:28.81\n015f4a0302b9009e17205a49027005079001c07100c48 | myexample_main__5216_username@myexample.com     | 2017-11-24 22:50:31.105\n015feb1537cc00305e319fca622400085001d07d00720 | myexample_main__5216_username@yahoo.com         | 2017-11-26 01:22:27.57\n015decf4f3170011afb0979834420007e007b07600720 | myexample_main__5216_username@hotmail.com       | 2018-01-03 22:03:20.837\n015e3b903e48000c7944f6af4b8e00087016907f0049e | myexample_main__5216_username@cox.net           | 2018-01-28 03:59:45.031\n(5 rows)\n</code></pre><h3 id=\"visitor-tallies\">Visitor tallies</h3>\n<p>The following example shows the the basic formatting for the <code>visitor_tallies</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_tally_57_key, visitor_tally_57_value from visitor_tallies;\n\n                 visitor_id                   |         updated         | visitor_tally_57_key | visitor_tally_57_value\n----------------------------------------------+-------------------------+----------------------+------------------------\n015dcd068996007c1f95a24aa47002075008d06d0093c | 2017-09-01 03:14:18.519 | Safari               |                      8\n015e40b27e55004ec842e2b9d0f800090001c08800408 | 2017-09-02 13:35:40.834 | Chrome               |                      2\n015e34c9fd270014a6799597769a00088008808000408 | 2017-08-31 05:44:14.013 | Chrome               |                      1\n(5 rows)\n</code></pre><h3 id=\"visitors-view\">Visitors view</h3>\n<p>The following example shows the the basic formatting for the <code>visitors_view</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">select &#34;visitor - id&#34;, &#34;visitor - created&#34;, &#34;updated&#34;, &#34;visitor - audience - bedroom shoppers (myexample_main_102)&#34; from visitors_view limit 1;\n\n                 visitor - id                  |  visitor - created  |        updated         | visitor - audience - bedroom shoppers (myexample_main_102)\n-----------------------------------------------+---------------------+------------------------+---------------------------------------------------------------\n 015de32cbb1e00265733c8c3c5bc00080001c07800976 | 2017-08-14 23:55:46 | 2017-08-20 15:27:48.75 | f\n(1 rows)\n</code></pre><h3 id=\"visits-table\">Visits table</h3>\n<p>The following example shows the the basic formatting for the <code>visits</code> table:</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, visitor_id, start_time, last_event_time, updated, property_5300, flag_5432 from visits limit 5;\n\n                       visit_id                                  | visitor_id                                    |     start_time      | last_event_time     | updated                 | property_5300 | flag_5432\n-----------------------------------------------------------------+-----------------------------------------------+---------------------+---------------------+-------------------------+---------------+-----------\n4af5f070998b6e471d05a809d55c62811784c57ee196c39a599c0a352e925e01 | 015c9e257f220048ebb26bfdb68405072001c06a00bd0 | 2017-07-18 17:04:31 | 2017-07-18 17:39:27 | 2017-07-18 18:09:28.994 |               |\n42fd5d3067b5472a57aa7fe6e8cf12d5d60ea2a9399d54de01bfb0b06e33bd73 | 015cc166a9b100028f7070a6e51d01049003e00d00bd0 | 2017-07-18 21:10:21 | 2017-07-18 21:13:32 | 2017-07-18 21:43:32.948 |               |\n9729e709ec80bc476dc6c36c6bf33f998f92c3f2e3af5509078c6402ceff29bf | 015d56a5ec3d00128011a73f446404079001c07100838 | 2017-07-19 18:28:26 | 2017-07-19 18:28:26 | 2017-07-19 18:38:27.903 |               |\n6d1c801fb894234347d27a61b9b0f82ac918bfdc36a0510ab3be8ea6a72b9038 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 19:30:08 | 2017-07-19 19:30:08 | 2017-07-19 19:40:12.802 |               |\nc97a0a0c9dfc4cb58e23dbfdb98528cddc8a989c9d65f0e6fd89ffdc5e82c727 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 21:33:00 | 2017-07-19 21:33:00 | 2017-07-19 21:43:02.803 |               |\n(5 rows)\n</code></pre><h2 id=\"understanding-stitched-visitors\">Understanding stitched visitors</h2>\n<p>In AudienceDB, only one visitor profile is maintained in the visitors table for visitors that become stitched. The visitor profiles for stitched visitors are viewed as one, but with different IDs. The <code>visitor_replaces</code> table provides a lookup method to view the replaced <code>visitor_ids</code> to accomplish this.</p>\n<p>Visitor Replaces table example:</p>\n<table>\n<thead>\n<tr>\n<th><code>visitor_replaces_id</code></th>\n<th><code>visitor_id</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>6</td>\n</tr>\n<tr>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>In this table:</p>\n<ul>\n<li>Visitor1 and Visitor2 are stitched into Visitor 3.</li>\n<li>Visitor 4 and Visitor 5 are stitched into Visitor 6.</li>\n</ul>\n<p>The above information can be used to join the <code>visitors</code> table to the <code>visits</code> table or the EventDB tables, if needed.</p>\n<p>To join events from EventDB to AudienceDB:</p>\n<ul>\n<li>Join <code>events_x</code> directly to the <code>visitors</code> table for non-stitched visitors, and;</li>\n<li>Join through the <code>visitor_replaces</code> table for those that have been stitched, as shown in the following example:</li>\n</ul>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-sql\" data-lang=\"sql\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">SELECT</span> e.<span style=\"color:#e6db74\">&#34;event - id&#34;</span>, v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">FROM</span> account__profile.events_view__all_events__all_events e\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">LEFT</span> <span style=\"color:#66d9ef\">JOIN</span> account__profile.visitor_replaces_view r <span style=\"color:#66d9ef\">ON</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - replaces id&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">JOIN</span> account__profile.visitors_view_normalized v <span style=\"color:#66d9ef\">ON</span> (v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#66d9ef\">or</span> v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span>)\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">limit</span> <span style=\"color:#ae81ff\">1000</span>;\n</span></span></code></pre></div><ul>\n<li>This example accounts for visitor IDs in <code>events_all_events</code> being in <code>visitors</code> OR <code>visitor_replaces</code>.</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Visitors attributed to single event sessions will not be stored in the visitors table.</p>\n<h2 id=\"additional-resources\">Additional resources</h2>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_designing-queries-best-practices.html\">(Amazon Redshift™) Best Practices for Designing Queries</a>.</li>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c-optimizing-query-performance.html\">(Amazon Redshift™) Tuning Query Performance</a>.</li>\n</ul>\n"
        }  

    , 
        {
            "weight": "50",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-eventdb/connect/",
            "title": "Connect to EventDB and AudienceDB",
            "body": "<h2 id=\"connect-to-redshift\">Connect to Redshift</h2>\n<p>To access to your EventDB and AudienceDB data, a third-party tool with the ability to connect to a Postgres-style database is required.</p>\n<ul>\n<li><strong>First Time Users</strong>\nAfter EventDB and AudienceDB are enabled for your account, Redshift Spectrum is automatically enabled.</li>\n<li><strong>Existing Customers</strong>\nBefore enabling Spectrum for existing customers that have been using DataAccess, a data migration is needed to ensure all existing and new data are written to the correct location. Coordinate with your team in advance to proceed.</li>\n</ul>\n<h2 id=\"get-database-credentials\">Get database credentials</h2>\n<p>Third-party tools with Postgres support require authentication credentials to connect. Authentication credentials are provided in the DataAccess Console.</p>\n<p>Database Credentials are now generated for each user. Previously, all users shared the credentials generated for an account and profile. If someone regenerated global credentials, all user connections were terminated, and all users had to reconnect.</p>\n<p>For user-specific credentials, the generated credentials are based on the account, profile, and the user&rsquo;s email address. Users can regenerate their own credentials without terminating other connections. You can remove access for a specific user without terminating other connections. To deactivate a specific user&rsquo;s credentials, contact Tealium Support.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Previously-generated global credentials can still be used, but cannot be regenerated.</p>\n<p>Use the following steps to get database authentication credentials:</p>\n<ol>\n<li>Navigate to <strong>DataAccess &gt; EventDB</strong> or <strong>DataAccess &gt; AudienceDB</strong>.</li>\n<li>Click <strong>Get DB Connection Details</strong>.</li>\n<li>Click <strong>Regenerate DB Credentials</strong>.<br>\nYou need to regenerate credentials even if this is your first time getting credentials.<br>\n<figure><a class=\"slb\" href=\"/images/server-side/connection-details.png\"><img src=\"https://docs.tealium.com/images/server-side/connection-details.png\"\n               alt=\"connection details\"\n               title=\"connection details\"/>\n          </a>\n      </figure></li>\n<li>Click <strong>Yes</strong> to confirm that you want to delete your existing credentials and generate new ones.<br>\nThe <strong>DB Connection Details</strong> screen displays the following fields:\n<ul>\n<li><strong>Username</strong><br>\nThe username for the database connection, which is a combination of your account, profile names, and your email address. For example, <code>account__profile__email</code>.</li>\n<li><strong>Password</strong><br>\nThe password for the database connection.</li>\n<li><strong>Database</strong><br>\nThe name of the database, usually the name of your account.</li>\n<li><strong>Host</strong><br>\nThe host name of the database server, specific to your data storage region.</li>\n<li><strong>Port</strong><br>\nThe port number for the connection.</li>\n</ul>\n</li>\n<li>Save the connection details for future use, then click <strong>Close</strong>.</li>\n</ol>\n<h3 id=\"browse-the-redshift-database\">Browse the Redshift database</h3>\n<p>After you have your database authentication credentials, you can connect to the database using a third-party tool. The following example uses SQL Workbench/J, which is a freeware application (see <a href=\"/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">Connecting to EventDB with SQL Workbench</a>). The schema naming convention is <code>account__profile</code>.</p>\n<p>The example below shows a view that joins all the related tables and columns.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-db-explorer.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-db-explorer.jpg\"/>\n    </a>\n</figure>\n<p>This example shows a raw data table view. The column names are in the same positions in each table, regardless of the view. The main difference between these two views is the readability of the entry.</p>\n<figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-columns.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-columns.jpg\"/>\n    </a>\n</figure>\n<h2 id=\"writing-sql-queries\">Writing SQL queries</h2>\n<p>The following articles provide best practices and examples of useful queries:</p>\n<ul>\n<li><a href=\"/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">Connecting to EventDB and AudienceDB with SQL Workbench/J</a></li>\n<li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363364-best-practices-for-writing-queries-for-eventdb-and-audiencedb/preview\">Best Practices for Writing Queries for EventDB and AudienceDB</a></li>\n<li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363427-helpful-sql-queries-for-eventdb-and-audiencedb\">Helpful SQL Queries for EventDB and AudienceDB</a></li>\n</ul>\n"
        }  

    ]
}
