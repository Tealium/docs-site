
{
    "kind": "term",
    "name": "da_eventdb",
    "count": 2,
    "items": [

    
        {
            "weight": "400",
            "url": "https://docs.tealium.com/server-side/data-storage/audiencedb-and-eventdb/",
            "title": "AudienceDB and EventDB",
            "body":"<h2 id=\"how-it-works\">How it works</h2><p>AudienceDB and EventDB services are used to store structured audience and event data in a Postgres-like database (Amazon Redshift). From Amazon Redshift, you can then query and analyze the data directly using your preferred SQL client or Business Intelligence (BI) tool.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>EventDB and AudienceDB only collect data while they are enabled. EventDB must be enabled to be able to collect data from the configured event feeds and to write data to the Redshift database. AudienceDB must be enabled to be able to write data from the configured AudienceDB connectors to the Redshift database.</p><h3 id=\"prerequisites\">Prerequisites</h3><p>AudienceDB and EventDB must be activated for your account. For additional information, contact your account manager.</p><h3 id=\"tables-views-and-normalized-views\">Tables, views and normalized views</h3><p>When a service is activated, a database is created in Amazon Redshift to store your data. The columns in the tables are named according to the attribute type and the internal attribute ID. For example, if you have a badge attribute with an internal ID of &ldquo;30&rdquo;, the table will contain a column named <code>badge_30</code>. Views and normalized views of data are created to make it easier to write queries. The normalized view is similar to the view but with the attribute ID omitted from the field name.</p><ul><li><strong>Tables</strong><br>Standard tables have columns named after the attribute type and the attribute ID.<br>Example: <code>badge_30</code></li><li><strong>Views</strong><br>Table names appended with <code>_view</code> have user-friendly column names with attribute IDs.<br>Example: <code>visitor - badge - fan (30)</code></li><li><strong>Normalized views</strong><br>Table names appended with <code>_view_normalized</code> have user-friendly column names without the attribute IDs.<br>Example: <code>visitor - badge - fan</code></li></ul><p>The views also simplify the process of running queries with aggregations such as <code>SUM()</code> , <code>MIN()</code>, and <code>MAX()</code>.</p><h3 id=\"visitvisitor-data\">Visit/Visitor data</h3><p>Visit and visitor attributes are stored in database table columns according to their attribute type and name. Each table is keyed using a <code>visit_id</code> or <code>visitor_id</code>. Database views are created for each table to make it easier to write queries.</p><h3 id=\"audiencedb-tables\">AudienceDB tables</h3><p>The following tables are available for visit and visitor data:</p><ul><li>Visit/Session Data: <code>visits</code></li><li>Visitor Data: <code>visitors</code></li></ul><p>In addition, the following tables exist for special attribute types:</p><ul><li>Arrays: <code>visit_arrays</code>, <code>visitor_arrays</code></li><li>Set of Strings: <code>visit_lists</code>, <code>visitor_lists</code></li><li>Tally: <code>visit_tallies</code>, <code>visitor_tallies</code></li></ul><p>For detailed information, see the <a href=\"/server-side/data-storage/audiencedb-data-guide/\">AudienceDB data guide</a>.</p><h3 id=\"event-data\">Event data</h3><p>For tables containing event data, event data includes event attributes for all events in the event feed. Table columns are named according to the attribute type and name, with only some attributes referencing internal ID&rsquo;s. Standard Universal Data Object (UDO) variables are named with a <code>udo_</code> prefix and most column names match their corresponding attribute names, for example: <code>udo_event_name</code>.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Event data coming from the Tealium collect tag also includes information about which tags executed on the page and page performance metrics.</p><p>For additional information, see <a href=\"/server-side/live-events-feeds/\">Live Events and Feeds</a>.</p><h3 id=\"eventdb-tables\">EventDB tables</h3><p>The following tables are available for event data:</p><ul><li>Event Feed Data: <code>events_{FEED}</code></li></ul><h3 id=\"writing-sql-queries\">Writing SQL queries</h3><p>The following articles provide best practices and examples of useful queries:</p><ul><li><a href=\"/server-side/data-storage/data-viz-tools/using-sql-workbench/\">Connecting to EventDB and AudienceDB with SQL Workbench/J</a></li><li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363364-best-practices-for-writing-queries-for-eventdb-and-audiencedb/preview\">Best Practices for Writing Queries for EventDB and AudienceDB</a></li><li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363427-helpful-sql-queries-for-eventdb-and-audiencedb\">Helpful SQL Queries for EventDB and AudienceDB</a></li></ul><h2 id=\"enable-data-storage\">Enable data storage</h2><ul><li><strong>Attributes</strong><br>Data storage is controlled at the attribute level. Event attributes and visit/visitor attributes have a checkbox that determines if it will be stored in the database. Simply edit the attribute and toggle the checkbox on or off to include or omit the attribute from the database.<br>For additional information, see <a href=\"/server-side/attributes/about/\">Using Attributes</a>.</li><li><strong>Audiences</strong><br>All audiences are stored in AudienceDB.</li><li><strong>Event feeds</strong><br>Event feeds must be configured for the data to be stored in EventDB.<br><figure><a class=\"slb\" href=\"/images/server-side/ss-feeds-event-storage-slider.png\"><img src=\"/images/server-side/ss-feeds-event-storage-slider.png\"         alt=\"feeds event storage slider\"         title=\"feeds event storage slider\"/>    </a></figure><br>EventDB also collects preloaded attributes. Although preloaded attributes cannot be edited from the <strong>Attributes</strong> screen, you can adjust the preloaded attributes that are stored in EventDB using the <strong>DataAccess Console</strong>.</li></ul><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>It is recommended to only enable EventDB for the specific event feeds that you need since the amount of data can become quite large depending on your volume. For additional information, see <a href=\"/server-side/live-events-feeds/about-event-feeds/\">Live Events and Feeds</a>.</p><h3 id=\"adjust-preloaded-eventdb-attributes\">Adjust preloaded EventDB attributes</h3><p>To adjust which preloaded attributes are stored in EventDB:</p><ol><li><p>Go to <strong>DataAccess &gt; EventDB</strong>.</p></li><li><p>Click <strong>Show EventDB Attributes</strong>.</p></li><li><p>Select or deselect attributes to add or remove them from EventDB.<br>All all attributes are checked by default.<br><figure><a class=\"slb\" href=\"/images/server-side/whiteui-dataaccess-working-with-audiencedb-and-eventdb-adjusting-preloaded-eventdb-attributes.jpg\"><img src=\"/images/server-side/whiteui-dataaccess-working-with-audiencedb-and-eventdb-adjusting-preloaded-eventdb-attributes.jpg\"         alt=\"DataAccess Working with AudienceDB and EventDB Adjusting Preloaded EventDB Attributes\"         title=\"DataAccess Working with AudienceDB and EventDB Adjusting Preloaded EventDB Attributes\"/>    </a></figure></p>   <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>DOM attributes, such as URL, domain, referrer, and user agent are always sent and cannot be excluded.</p></li><li><p>Click <strong>Save</strong>.</p></li><li><p>Save and Publish your changes.</p></li></ol><h3 id=\"adjust-audiencedb-attributes\">Adjust AudienceDB attributes</h3><p>To adjust which visitor attributes are stored in AudienceDB:</p><ol><li>Go to <strong>DataAccess &gt; AudienceDB</strong>.</li><li>Click <strong>Show AudienceDB Attributes</strong>.</li><li>Select or deselect attributes to add or remove them from AudienceDB.<br><figure><a class=\"slb\" href=\"/images/server-side/whiteui-dataaccess-working-with-audiencedb-and-eventdb-adjusting-audiencedb-attributes.jpg\"><img src=\"/images/server-side/whiteui-dataaccess-working-with-audiencedb-and-eventdb-adjusting-audiencedb-attributes.jpg\"         alt=\"DataAccess Working with AudienceDB and EventDB Adjusting AudienceDB Attributes\"         title=\"DataAccess Working with AudienceDB and EventDB Adjusting AudienceDB Attributes\"/>    </a></figure></li><li>Click <strong>Save</strong>.</li><li>Save and Publish your changes.</li></ol><h2 id=\"database-credentials\">Database credentials</h2><p>You must use a third-party tool with Postgres support to connect to your database. These tools require authentication credentials to connect, which are provided in the DataAccess Console.</p><p>Database Credentials are now generated for each user. Previously, credentials were generated for an account and profile and were shared by all users. If someone regenerated global credentials, all user connections were terminated, and all users had to reconnect.</p><p>For user-specific credentials, the generated credentials are based on the account, profile, and the user&rsquo;s email address. Users can regenerate their own credentials without terminating other connections. You can remove access for a specific user without terminating other connections. To deactivate a specific user&rsquo;s credentials, contact Tealium Support.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Previously generated global credentials can still be used, but cannot be regenerated.</p><h3 id=\"get-database-authentication-credentials\">Get database authentication credentials</h3><p>Use the following steps to get the database authentication credentials:</p><ol><li>In the sidebar, click <strong>DataAccess &gt; EventDB</strong> or <strong>DataAccess &gt; AudienceDB</strong>.</li><li>Click <strong>Get DB Connection Details</strong>.</li><li>Click <strong>Regenerate DB Credentials</strong>. You need to regenerate credentials even if this is your first time getting credentials.<br><figure><a class=\"slb\" href=\"/images/server-side/connection-details.png\"><img src=\"/images/server-side/connection-details.png\"         alt=\"connection details\"         title=\"connection details\"/>    </a></figure></li><li>Click <strong>Yes</strong> to confirm that you want to delete your existing credentials and generate new ones.<br>The <strong>DB Connection Details</strong> screen displays the following fields:<ul><li><strong>Username</strong><br>The username for the database connection, which is a combination of your account, profile names, and your email address. For example, <code>account__profile__email</code>.</li><li><strong>Password</strong><br>The password for the database connection.</li><li><strong>Database</strong><br>The name of the database, usually the name of your account.</li><li><strong>Host</strong><br>The host name of the database server, specific to your data storage region.</li><li><strong>Port</strong><br>The port number for the connection.</li></ul></li><li>Save the connection details for future use, then click <strong>Close</strong>.</li></ol>"
        }  

    , 
        {
            "weight": "800",
            "url": "https://docs.tealium.com/server-side/data-storage/eventdb-data-guide/",
            "title": "EventDB data guide",
            "body":"<h2 id=\"how-it-works\">How it works</h2><p>Once EventDB is turned on, the prettified view of the schema contains the titles you apply to the filtered streams in AudienceStream, as follows:</p><ol><li>The <a href=\"/client-side-tags/tealium-collect-tag/\">Tealium Collect tag</a> (or other Collect library) sends event data to the Customer Data Hub where it&rsquo;s captured in Tealium&rsquo;s Amazon S3 bucket. At this stage the data is flattened JSON.</li><li>Once the S3 bucket reaches a size of 100 MB (uncompressed) or after 1 hour has elapsed, whichever comes first, the data is compressed and prepared for Redshift.</li><li>Once the data is compressed, it is copied and imported into the Redshift database for your account.<br>The database organization is aligned to your account and streams:<ul><li>A database for each account/profile i.e. <code>ACCOUNT__PROFILE</code></li><li>Two tables for each Filtered Stream<ul><li>Raw data attribute column names (<code>ACCOUNT__PROFILE.events_STREAM</code>)</li><li>Customer Data Hub attribute column names (<code>ACCOUNT__PROFILE.events_view_STREAM</code>)</li></ul></li></ul></li></ol><h3 id=\"turn-on-eventdb\">Turn on EventDB</h3><p>You must contact your account manager to enable EventDB for the appropriate profile(s) in your account.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Once it is activated, it may take up to an hour for data to begin populating your database.</p><h3 id=\"send-data-to-eventdb\">Send data to EventDB</h3><p>Use the following steps to send data to EventDB:</p><ol><li>Go to <strong>Live Events</strong>.</li><li>Click the pencil icon to edit the stream of data to send to EventDB.<br><figure><a class=\"slb\" href=\"/images/server-side/screen-shot-2020-06-09-at-9.34.23-am.png\"><img src=\"/images/server-side/screen-shot-2020-06-09-at-9.34.23-am.png\"/>    </a></figure></li><li>In the Edit Stream dialog, slide the Event Data Storage setting to <strong>EventDB</strong>.<br><figure><a class=\"slb\" href=\"/images/server-side/screen-shot-2020-06-09-at-9.35.57-am.png\"><img src=\"/images/server-side/screen-shot-2020-06-09-at-9.35.57-am.png\"/>    </a></figure></li><li>Click <strong>Save</strong>.</li><li>Click <strong>Save/Publish</strong> to save and publish your changes.</li></ol><h3 id=\"configure-eventdb-attributes\">Configure EventDB attributes</h3><p>By default, your streams will contain all of the event attributes defined in your account. For streams collecting data from the Tealium Collect tag, additional Boolean attributes will be included for each tag that fires during an event. For example, if you have Google Analytics in your iQ account along with the Collect tag, your event streams will include a Boolean attribute named &ldquo;Google Analytics&rdquo; indicating whether or not it fired for each event.</p><p>Use the following steps to adjust which Event Attributes are saved to EventDB:</p><ol><li><p>From the DataAccess console select the <strong>DB</strong> tab.</p></li><li><p>For DB is enabled, click <strong>Show EventDB Attributes</strong>.</p>   <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Attributes marked as Restricted Data are excluded by default but you may check the box to include them. DOM attributes (e.g. URL, domain, referrer, and user agent) are always sent and cannot be excluded.</p></li><li><p>Check or uncheck the attributes to add or remove from EventDB.</p></li><li><p>Click <strong>Save</strong>. <figure><a class=\"slb\" href=\"/images/server-side/screen-shot-2020-06-09-at-9.58.43-am.png\"><img src=\"/images/server-side/screen-shot-2020-06-09-at-9.58.43-am.png\"/>    </a></figure></p></li></ol><h2 id=\"connect-to-redshift\">Connect to Redshift</h2><p>To access to your EventDB data, a third-party tool with the ability to connect to a Postgres-style database is required.</p><ul><li><strong>First Time Users</strong><br>The first time you enable EventDB, Redshift Spectrum is automatically enabled.</li><li><strong>Existing Customers</strong><br>Before enabling Spectrum for existing customers that have been using DataAccess, a data migration is needed to ensure all existing and new data are written to the correct location. Coordinate with your team in advance to proceed.<br><a href=\"/server-side/data-storage/audiencedb-and-eventdb/\">Learn more</a> about retrieving your credentials from the DataAccess console screen.</li></ul><h3 id=\"browse-the-redshift-database\">Browse the Redshift database</h3><p>With your credentials in hand, it&rsquo;s time to connect to the database. The following example uses the freeware program SQL Workbench/J (see <a href=\"/server-side/data-storage/data-viz-tools/using-sql-workbench/\">Connecting to EventDB with SQL Workbench</a>).</p><figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-db-explorer.png\"><img src=\"/images/server-side/sql-workbench-db-explorer.png\"/>    </a></figure><p>There is a raw data table view and a view that joins all the related tables and columns into one convenient location. Notice the difference in column names and that the schema naming convention is <code>account__profile</code>. The column names are in the same positions in each table, regardless of the view. The main difference is the readability of the entry.</p><figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-columns.png\"><img src=\"/images/server-side/sql-workbench-columns.png\"/>    </a></figure>"
        }  

    ]
}
