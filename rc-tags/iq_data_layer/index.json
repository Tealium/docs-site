
{
    "kind": "term",
    "name": "iq_data_layer",
    "count": 4,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs.tealium.com/iq-tag-management/getting-started/data-layer/basics/",
            "title": "Data layer basics",
            "body":"<h2 id=\"what-is-the-data-layer\">What is the data layer?</h2><figure class=\"dib fr mv0\"><img src=\"/images/iq-tag-management/data-layer-stack\"         alt=\"Data layer stack\"         title=\"Data layer stack\"/></figure><p>The data layer is the foundation of tag management. The data layer defines attributes about your website, such as site language or page name, as well as important user behaviors that you want to track, such as purchases and logins. Defining the attributes of your data layer is the first step in implementing tag management. Adding a data layer to your website page code is the primary development effort required for tag management.</p><h2 id=\"how-it-works\">How it works</h2><p>Before we add your first data layer variable, let&rsquo;s review how it works:</p><ul><li><strong>JavaScript object</strong><br>Most data layer variables created in is also added to your page code in a JavaScript object named <code>utag_data</code>, also known as the <strong>Universal Data Object (UDO)</strong>.</li><li><strong>Consistent names</strong><br>The data layer variable names defined in TiQ must match the names of the variables populated in your page code. For example, a data layer variable named <code>page_name</code> in is populated in your page code as:<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">utag_data</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#e6db74\">&#34;page_name&#34;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;My Home Page&#34;</span> };</span></span></code></pre></div></li><li><strong>User-friendly variable names</strong><br>Data layer variables have user-friendly names that are vendor-neutral and easy to understand across all of your business units, for example <code>order_id</code> instead of <code>oid</code>.</li><li><strong>Additional page data</strong><br>In addition to the variables you define, the data layer also makes use of the following data from your web pages: meta data tags, URL components, query string parameters, cookies, and other global JavaScript variables.</li></ul>"
        }  

    , 
        {
            "weight": "15",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/data-layer-variables/",
            "title": "Data layer variable types",
            "body":"<p>The data layer screen organizes variables by type. The types are based on where the data for the variables comes from. The supported types are:</p><ul><li><strong>UDO Variables</strong> – variables from the Universal Data Object (<code>utag_data</code>).</li><li><strong>Querystring Parameters</strong> – variables from the URL query string.</li><li><strong>First-Party Cookies</strong> – variables stored as cookies.</li><li><strong>JavaScript Variables</strong> – variables that already exist in your site code.</li><li><strong>Meta Data Elements</strong> – variables from <code>&lt;meta&gt;</code> tags in the page&rsquo;s HTML.</li><li><strong>DOM Variable</strong> – built-in DOM variables.</li><li><strong>AudienceStream Attributes</strong> – variables imported via data layer enrichment from your AudienceStream account.<br><figure><img src=\"/images/iq-tag-management/whiteui-tiq-datalayervariables-filter.png\"         alt=\"TiQ_DataLayerVariables_Filter.png\"         title=\"TiQ_DataLayerVariables_Filter.png\"/></figure></li></ul><h2 id=\"udo-variable\">UDO variable</h2><p>This type is for variables defined in your [Universal Data Object]/platforms/javascript/about-utag-data/), also referred to as <code>utag_data</code>, which you can find in the code for your webpage. Most of your variables will be this type.</p><h4 id=\"example\">Example</h4><p>In the page: <code>var utag_data = { language : &quot;en&quot;, currency : &quot;usd&quot; };</code></p><p>Name in iQ: <code>language</code> and <code>currency</code></p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;language&quot;]</code></p><h2 id=\"local-and-session-storage\">Local and session storage</h2><p>Local and session storage keys appear automatically in the data layer using <code>localStorage</code> and <code>sessionStorage</code> variables. For more information about the differences between storage types and uses, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">Window.localStorage</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">Window.sessionStorage</a> articles in the MDN Web Docs.</p><p>Session and local storage are sub-domain based. For example, your data will not persist if you move between <code>www.example.com</code> to <code>secure.example.com</code>. For more information, see <a href=\"/server-side/attributes/data-layer-enrichment/about/#same-origin-policy\">Same Origin Policy</a>.</p><p>To use these storage variables, navigate to <strong>iQ Tag Management &gt; Data Layer &gt; +Add Variable</strong>. Select <strong>UDO Variable</strong> and type in a source variable name.</p><p>Variable name in iQ:</p><ul><li><code>ls.variable_name</code></li><li><code>ss.variable_name</code></li></ul><p>Reference these variables with JavaScript in an extension:</p><ul><li><code>b[&quot;ls.my_local_storage_var&quot;]</code></li><li><code>b[&quot;ss.my_session_storage_var&quot;]</code></li></ul><h2 id=\"javascript-variables\">JavaScript variables</h2><p>Select this type to reference a JavaScript variable on your web page (other than the <code>utag_data</code> object). Normal syntax rules apply to the JavaScript variable type.</p><h4 id=\"example-1\">Example</h4><p>In the page: <code>var myApp = { page : { name : &quot;Home Page&quot; } };</code></p><p>Variable name in iQ: <code>myApp.page.name</code></p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;js_page.myApp.page.name&quot;]</code></p><h2 id=\"querystring-parameters\">Querystring parameters</h2><p>Select this type to capture parameters from the URL. The query string consists of everything after the &ldquo;?&rdquo; character in the URL.</p><h4 id=\"example-2\">Example</h4><p>In the URL: <code>http://example.com/path/file.html?sortOrder=price</code></p><p>Variable name in iQ: <code>sortOrder</code></p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;qp.sortOrder&quot;]</code></p><h2 id=\"first-party-cookies\">First-party cookies</h2><p>Select this variable type to reference the value in a cookie being set on your domain. When creating a cookie variable you can either specify the Tealium cookie, <code>utag_main</code> , or a standard cookie. The examples below describe both methods.</p><p>The following table describes the set of default parameters stored in the Tealium cookie, which are available in the Tealium data bundle.</p><table><thead><tr><th><strong>Cookie Parameter</strong></th><th><strong>Description</strong></th><th><strong>Version of utag.js</strong></th></tr></thead><tbody><tr><td><code>_st</code></td><td>This is a number unique to the current page view.</td><td>4.011 and later</td></tr><tr><td><code>ses_id</code></td><td>This is the timestamp to log the time spent by a visitor on your site.</td><td>4.011 and later</td></tr><tr><td><code>_ss</code></td><td>This is a flag value (0 or 1) indicating the start of session.</td><td>4.26 and later</td></tr><tr><td><code>v_id</code></td><td>This id value is unique to the visitor.</td><td>4.26 and later</td></tr><tr><td><code>_pn</code></td><td>This is the page number (<code>_pn</code>) value which starts over at 1 with each new session and increments every time utag.js loads.</td><td>4.27 and later</td></tr><tr><td><code>_sn</code></td><td>This is the session count.</td><td>4.27 and later</td></tr></tbody></table><h3 id=\"tealium-cookie\">Tealium cookie</h3><p>To store data in the Tealium <code>utag_main</code> cookie, prefix the variable name with <code>utag_main_</code>. For example, if you want to track affiliate referrals with a cookie named &ldquo;aff&rdquo; and you want to store this value inside the Tealium cookie, name it <code>utag_main_aff</code>.</p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;cp.utag_main_aff&quot;]</code></p><h3 id=\"non-tealium-cookie\">Non-Tealium cookie</h3><p>To store data in a non-Tealium cookie, create a new Variable called &ldquo;aff&rdquo; with a type of cookie value. You can set the cookie value using the <a href=\"/iq-tag-management/extensions/extensions-list/persist-data-value-extension/\">Persist Data Value extension</a>.</p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;cp.aff&quot;]</code></p><p>Understanding when to use each type of cookie is important when trying to save cookie space. We recommend that you use the Tealium cookie as much as possible. However, if you&rsquo;re using the <a href=\"/iq-tag-management/extensions/extensions-list/split-segmentation-extension/\">Split Segmentation</a> extension, then you must use a non-Tealium cookie.</p><p>For more information on how to use cookies with Tealium, please see the <a href=\"/iq-tag-management/data-layer/cookies/\">Tealium Cookies</a> article.</p><h2 id=\"meta-data-elements\">Meta data elements</h2><p>Select this type to reference the content of a meta tag in the page.</p><h4 id=\"example-3\">Example</h4><p>In the page: <code>&lt;meta name=&quot;author&quot; content=&quot;Tealium&quot; /&gt;</code></p><p>Variable name in iQ: <code>author</code></p><p>Reference this variable with JavaScript in an extension: <code>b[&quot;meta.author&quot;]</code></p><h2 id=\"dom-variable\">DOM variable</h2><p>These are built-in DOM variables that cannot be modified. They are set automatically in the page.</p><p><a href=\"/platforms/javascript/built-in-variables/\">Learn more about built-in utag.js variables</a>.</p>"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/iq-tag-management/getting-started/data-layer/how-it-works/",
            "title": "How the data layer works",
            "body":"<p>The following terms are related to a website data layer and your <a href=\"/platforms/javascript/install/\">installation of <code>utag.js</code></a>:</p><ul><li><strong>Universal Data Object (<code>utag_data</code>)</strong><br>The Universal Data Object (UDO) is the JavaScript object that represents the data layer on your site. You populate this object across all the pages of your site with dynamic values that describe the page and visitor interactions.<br>Learn more about <a href=\"/platforms/javascript/about-utag-data/\">how the UDO works</a>.</li><li><strong>Variable types</strong><br>Data available directly from your web page (other than your customized UDO) via DOM data, query strings, meta data tags, cookies, and JavaScript variables.<br>Learn more about the <a href=\"/iq-tag-management/data-layer/data-layer-variables/\">data layer variable types</a>.</li><li><strong><code>utag.data</code></strong><br>The final data object that combines variables from the UDO with all other variable types from the page. This data is used to evaluate load rules.<br>Learn more about the <a href=\"/platforms/javascript/built-in-variables/\">built-in variables available in the UDO</a>.</li><li><strong><code>b</code> object</strong><br>A JavaScript object used by functions within <code>utag.js</code>. The <code>b</code> object is a copy of <code>utag.data</code> that is used for each vendor tag. The <code>b</code> variable can be referenced in JavaScript extensions.<br>Learn more about <a href=\"/platforms/javascript/the-b-object/\">the <code>b</code> object and how it&rsquo;s used</a>.</li></ul><p>The following graphic shows how individual variables come together to create your Data Layer and how that data flows out to your vendor tags.</p><figure><img src=\"/images/iq-tag-management/dataflow-b&amp;w.jpeg\"         alt=\"Data Layer Flow\"         title=\"Data Layer Flow\"/></figure><h2 id=\"data-layer-flow\">Data layer flow</h2><p>With Tealium install on a web page, the data layer object behaves as follows.</p><ol><li>All variables defined in iQ Tag Managment are identified.</li><li>Variables are combined into <code>utag.data</code>.</li><li><code>utag.data</code> is copied to the locally-scoped <code>b</code> object as needed.</li><li>Extensions run, which might modify the <code>b</code> object.</li><li>Load rules evaluate variables to determine which tags to load and fire.</li><li>Load rules evaluate whether to load event listeners.</li><li>Variable values are mapped to destinations in vendor tags.</li><li>Vendor tags fire and pass variable values according to your data mappings.</li></ol><p>Learn more about the <a href=\"/iq-tag-management/getting-started/order-of-operations/\">order of operations of the Tealium Javascript library</a>.</p>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/iq-tag-management/getting-started/data-layer/data-layer-best-practices/",
            "title": "Data layer best practices",
            "body":"<h2 id=\"code-placement\">Code placement</h2><p>In the page code, the data layer object (<code>utag_data</code>) must be declared <em>before</em> the reference to the Universal Tag (<code>utag.js</code>). This ensures that the Universal Tag has all the data layer variables needed to evaluate load rules, extensions, and tags. An example of the recommended code placement can be accessed from the Code Center.</p><p>Learn More: <a href=\"/iq-tag-management/getting-started/install/code-center/\">Code Center</a></p><h2 id=\"naming-conventions\">Naming conventions</h2><p>The goal of the data layer is to provide a set of variables that are vendor-neutral and easy to understand. The following best practices apply:</p><ul><li><strong>Use lowercase, underscore-separated variable names.</strong><br>Examples: <code>site_section</code>, <code>product_unit_price</code>, <code>login_status</code>.</li><li><strong>Avoid vendor specific naming.</strong><br>Avoid <code>eVar1</code>, <code>pv_a3</code>, or <code>oid</code>.</li><li><strong>Use meaningful variable descriptions.</strong><br>Sometimes even a properly named variable still needs additional clarification. A good variable description includes details about when and where a variable is set, which vendor is using the variable, and possible values to expect in the variable. Examples:<ul><li>Login status <code>anonymous</code> or <code>authenticated</code>, used for <code>eVar1</code> in Adobe Analytics.</li><li>Order subtotal does not include tax or shipping, exclude commas and currency symbols.</li></ul></li><li><strong>Avoid pluralized variable names.</strong><br>Variables that contain multiple values, such as the product array variables, should use the singular form of the name. Examples:<ul><li><code>product_category</code> instead of <code>product_categories</code></li><li><code>product_id</code> instead of <code>product_ids</code></li></ul></li><li><strong>Prefix boolean variable names with <code>is_.</code> or <code>has_.</code></strong><br>This allows you to quickly identify variables that contain a value of <code>1</code> or <code>0</code>. Examples: <code>is_registered</code>, <code>is_first_time_visitor</code>, <code>is_logged_in</code></li></ul><p><strong>Pros</strong></p><ul><li>Creates a consistent naming convention.</li><li>Easier for new users to understand what is available in your data layer and how each variable is used.</li><li>Tealium Support is familiar with this convention.</li></ul><p><strong>Cons</strong></p><ul><li>Additional effort to transition vendor-specific variables to vendor-neutral naming convention.</li></ul><h2 id=\"string-variables\">String variables</h2><p>Use string values for all non-product variables. Boolean and numeric variables should be passed as strings.</p><p>For boolean values, use <code>1</code> and <code>0</code> instead of <code>true</code> and <code>false</code>. This approach is more stable and reduces confusion about the expected values in these variables.</p><p>Examples:</p><table><thead><tr><th></th><th>Boolean</th><th>Integer</th></tr></thead><tbody><tr><td>Correct</td><td><code>is_registered : &quot;1&quot;</code></td><td><code>order_total : &quot;1234.56&quot;</code></td></tr><tr><td>Incorrect</td><td><code>is_registered : true</code></td><td><code>order_total : 1234.56</code></td></tr></tbody></table><p><strong>Pros</strong></p><ul><li>Tag templates expect strings and arrays.</li><li>Minimizes testing effort during and after implementation.</li></ul><p><strong>Cons</strong></p><ul><li>None.</li></ul><h2 id=\"array-variables\">Array variables</h2><p>Set product variables (price, quantity, ID, etc.) as arrays. The Universal Tag (<code>utag.js</code>) is designed to use arrays for all product variables. While it is possible to set product values in a comma-separated string, this approach is more prone to errors.</p><p>Array (recommended):</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">product_id</span> <span style=\"color:#f92672\">:</span> [<span style=\"color:#e6db74\">&#34;prodID1&#34;</span>,<span style=\"color:#e6db74\">&#34;prodID2&#34;</span>,<span style=\"color:#e6db74\">&#34;prodID3&#34;</span>]</span></span></code></pre></div><p>String:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">product_id</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;prodID1,prodID2,prodID3&#34;</span></span></span></code></pre></div><p><strong>Pros</strong></p><ul><li>Same format expected by vendor tag templates.</li><li>Improves readability of the data layer.</li></ul><p><strong>Cons</strong></p><ul><li>None.</li></ul><h2 id=\"page-types\">Page types</h2><p>All pages of your site should include a variable called <code>page_type</code>. This is used to determine the type of page the user is viewing. The suggested values include, but are not limited to:</p><table><thead><tr><th style=\"text-align:left\">Page</th><th style=\"text-align:left\">Value</th></tr></thead><tbody><tr><td style=\"text-align:left\">Home Page</td><td style=\"text-align:left\"><code>home</code></td></tr><tr><td style=\"text-align:left\">Category / Product List</td><td style=\"text-align:left\"><code>category</code></td></tr><tr><td style=\"text-align:left\">Product Detail</td><td style=\"text-align:left\"><code>product</code></td></tr><tr><td style=\"text-align:left\">Search Results</td><td style=\"text-align:left\"><code>search</code></td></tr><tr><td style=\"text-align:left\">Cart / Basket</td><td style=\"text-align:left\"><code>cart</code></td></tr><tr><td style=\"text-align:left\">Checkout Flow (User Info, Billing Address, Shipping Address)</td><td style=\"text-align:left\"><code>checkout</code></td></tr><tr><td style=\"text-align:left\">Order Confirmation / Thank You</td><td style=\"text-align:left\"><code>order</code></td></tr></tbody></table><p><strong>Pros</strong></p><ul><li>Gives a clear understanding of what kind of page the user is viewing.</li><li>Many vendor tags utilize a page type to function properly.</li></ul><p><strong>Cons</strong></p><ul><li>Initial development effort to add <code>page_type</code> variable to the Universal Data Object.</li></ul><h2 id=\"third-party-data-layer-objects\">Third-party data layer objects</h2><p>You might already have a data layer object implemented on your site, such as the W3C Data Object or your own custom object. We recommend that these objects be converted to the UDO <code>utag_data</code> format using one of the available <a href=\"/iq-tag-management/data-layer/data-layer-converter/set-up-data-layer-converter/\">data layer converters</a>.</p><p><strong>Pros</strong></p><ul><li>Better compatibility with built-in functionality, such as load rules, data mappings, and Web Companion.</li><li>Reduces support costs to investigate issues with your custom object.</li></ul><p><strong>Cons</strong></p><ul><li>Additional effort to implement.</li></ul>"
        }  

    ]
}
