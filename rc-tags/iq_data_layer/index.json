
{
    "kind": "term",
    "name": "iq_data_layer",
    "count": 5,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/about/",
            "title": "About the data layer",
            "body":"<h2 id=\"what-is-the-data-layer\">What is the data layer?</h2><figure class=\"dib fr mv0\"><a class=\"slb\" href=\"/images/iq-tag-management/data-layer-stack.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/data-layer-stack.png\"         alt=\"Data layer stack\"         title=\"Data layer stack\" class=\"noshadow\"/>    </a></figure><p>The data layer is the foundation of tag management. In the data layer, you define attributes of your website, such as the site language or page name. The data layer is also where you define important user behaviors you want to track, such as purchases and logins. When implementing tag management, defining the attributes of your data layer is the first step.</p><h2 id=\"how-it-works\">How it works</h2><p>Tags need data from your website or application. We recommend a Universal Data Object (UDO) to centralize your data. The UDO is the JavaScript object that represents the data layer on your site. This UDO can be supplemented by querystring parameters, first-party cookies, JavaScript variables, and metadata elements. These variables form your data layer.</p><p>Before adding your first data layer variable, let&rsquo;s review how it works:</p><ul><li><strong>JavaScript object</strong><br>Most variables created in the data layer are also added to your page code in a JavaScript object named <code>utag_data</code>, also known as the <strong>Universal Data Object (UDO)</strong>.</li><li><strong>Consistent names</strong><br>The data layer variable names defined in Tealium iQ Tag Management must match the names of the variables populated in your page code. For example, a data layer variable named <code>page_name</code> in Tealium iQ is populated in your page code as:<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">utag_data</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#e6db74\">&#34;page_name&#34;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;My Home Page&#34;</span> };</span></span></code></pre></div></li><li><strong>User-friendly variable names</strong><br>Data layer variables have user-friendly names that are vendor-neutral and easy to understand across all of your business units, for example <code>order_id</code> instead of <code>oid</code>.</li><li><strong>Additional page data</strong><br>In addition to the variables you define, the data layer also makes use of the following data from your web pages:<ul><li>Meta data tags</li><li>URL components</li><li>Query string parameters</li><li>Cookies</li><li>Local and session storage</li><li>Other global JavaScript variables</li></ul></li></ul>"
        }  

    , 
        {
            "weight": "11",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/how-it-works/",
            "title": "How the data layer works",
            "body":"<p>The following terms are related to a website data layer and your <a href=\"/platforms/javascript/install/\">installation of <code>utag.js</code></a>:</p><ul><li><p><strong>Universal Data Object (<code>utag_data</code>)</strong><br>The Universal Data Object (UDO) is the JavaScript object that represents the data layer on your site. You populate this object across all the pages of your site with dynamic values that describe the page and visitor interactions.<br>Learn more about <a href=\"/platforms/javascript/about-utag-data/\">how the UDO works</a>.</p></li><li><p><strong>Variable types</strong><br>Data available directly from your web page (other than your customized UDO) via DOM data, query strings, meta data tags, cookies, and JavaScript variables.<br>Learn more about the <a href=\"/iq-tag-management/data-layer/data-layer-variables/\">data layer variable types</a>.</p></li><li><p><strong><code>utag.data</code></strong><br>The final data object that combines variables from the UDO with all other variable types from the page. This data is used to evaluate load rules.<br>Learn more about the <a href=\"/platforms/javascript/built-in-variables/\">built-in variables available in the UDO</a>.</p></li><li><p><strong><code>b</code> object</strong><br>A JavaScript object used by functions within <code>utag.js</code>. The <code>b</code> object is a copy of <code>utag.data</code> that is used for each vendor tag. The <code>b</code> variable can be referenced in JavaScript extensions.<br>Learn more about <a href=\"/platforms/javascript/the-b-object/\">the <code>b</code> object and how it&rsquo;s used</a>.</p></li></ul><p>The following graphic shows how individual variables come together to create your Data Layer and how that data flows out to your vendor tags.</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/dataflow-b&amp;w.jpeg\"><img src=\"https://docs.tealium.com/images/iq-tag-management/dataflow-b&amp;w.jpeg\"         alt=\"Data Layer Flow\"         title=\"Data Layer Flow\"/>    </a></figure><h2 id=\"data-layer-flow\">Data layer flow</h2><p>When you install Tealium on a web page, the data layer object behaves as follows:</p><ol><li>All variables defined in Tealium iQ Tag Managment are identified.</li><li>Variables are combined into <code>utag.data</code>.</li><li><code>utag.data</code> is copied to the locally-scoped <code>b</code> object as needed.</li><li>Extensions run, which might modify the <code>b</code> object.</li><li>Load rules evaluate variables to determine which tags to load and fire.</li><li>Load rules evaluate whether to load event listeners.</li><li>Variable values are mapped to destinations in vendor tags.</li><li>Vendor tags fire and pass variable values according to your data mappings.</li></ol><p>Learn more about the <a href=\"/iq-tag-management/getting-started/order-of-operations/\">order of operations of the Tealium Javascript library</a>.</p>"
        }  

    , 
        {
            "weight": "12",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/best-practices/",
            "title": "Data layer best practices",
            "body":"<h2 id=\"code-placement\">Code placement</h2><p>In the page code, the data layer object (<code>utag_data</code>) must be declared <em>before</em> the reference to the Universal Tag (<code>utag.js</code>). This ensures that the Universal Tag has all the data layer variables needed to evaluate load rules, extensions, and tags. An example of the recommended code placement can be accessed from the Code Center.</p><p>Learn More: <a href=\"/iq-tag-management/getting-started/install/code-center/\">Code Center</a></p><h2 id=\"naming-conventions\">Naming conventions</h2><p>The goal of the data layer is to provide a set of variables that are vendor-neutral and easy to understand. The following best practices apply:</p><ul><li><strong>Use lowercase, underscore-separated variable names.</strong><br>Examples: <code>site_section</code>, <code>product_unit_price</code>, <code>login_status</code>.</li><li><strong>Avoid vendor specific naming.</strong><br>Avoid <code>eVar1</code>, <code>pv_a3</code>, or <code>oid</code>.</li><li><strong>Use meaningful variable descriptions.</strong><br>Sometimes even a properly named variable still needs additional clarification. A good variable description includes details about when and where a variable is set, which vendor is using the variable, and possible values to expect in the variable. Examples:<ul><li>Login status <code>anonymous</code> or <code>authenticated</code>, used for <code>eVar1</code> in Adobe Analytics.</li><li>Order subtotal does not include tax or shipping, exclude commas and currency symbols.</li></ul></li><li><strong>Avoid pluralized variable names.</strong><br>Variables that contain multiple values, such as the product array variables, should use the singular form of the name. Examples:<ul><li><code>product_category</code> instead of <code>product_categories</code></li><li><code>product_id</code> instead of <code>product_ids</code></li></ul></li><li><strong>Prefix boolean variable names with <code>is_.</code> or <code>has_.</code></strong><br>This allows you to quickly identify variables that contain a value of <code>1</code> or <code>0</code>. Examples: <code>is_registered</code>, <code>is_first_time_visitor</code>, <code>is_logged_in</code></li></ul><p><strong>Pros</strong></p><ul><li>Creates a consistent naming convention.</li><li>Easier for new users to understand what is available in your data layer and how each variable is used.</li><li>Tealium Support is familiar with this convention.</li></ul><p><strong>Cons</strong></p><ul><li>Additional effort to transition vendor-specific variables to vendor-neutral naming convention.</li></ul><h2 id=\"string-variables\">String variables</h2><p>Use string values for all non-product variables. Boolean and numeric variables should be passed as strings.</p><p>For boolean values, use <code>1</code> and <code>0</code> instead of <code>true</code> and <code>false</code>. This approach is more stable and reduces confusion about the expected values in these variables.</p><p>Examples:</p><table><thead><tr><th></th><th>Boolean</th><th>Integer</th></tr></thead><tbody><tr><td>Correct</td><td><code>is_registered : &quot;1&quot;</code></td><td><code>order_total : &quot;1234.56&quot;</code></td></tr><tr><td>Incorrect</td><td><code>is_registered : true</code></td><td><code>order_total : 1234.56</code></td></tr></tbody></table><p><strong>Pros</strong></p><ul><li>Tag templates expect strings and arrays.</li><li>Minimizes testing effort during and after implementation.</li></ul><p><strong>Cons</strong></p><ul><li>None.</li></ul><h2 id=\"array-variables\">Array variables</h2><p>Set product variables (price, quantity, ID, etc.) as arrays. The Universal Tag (<code>utag.js</code>) is designed to use arrays for all product variables. While it is possible to set product values in a comma-separated string, this approach is more prone to errors.</p><p>Array (recommended):</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">product_id</span> <span style=\"color:#f92672\">:</span> [<span style=\"color:#e6db74\">&#34;prodID1&#34;</span>,<span style=\"color:#e6db74\">&#34;prodID2&#34;</span>,<span style=\"color:#e6db74\">&#34;prodID3&#34;</span>]</span></span></code></pre></div><p>String:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">product_id</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;prodID1,prodID2,prodID3&#34;</span></span></span></code></pre></div><p><strong>Pros</strong></p><ul><li>Same format expected by vendor tag templates.</li><li>Improves readability of the data layer.</li></ul><p><strong>Cons</strong></p><ul><li>None.</li></ul><h2 id=\"page-types\">Page types</h2><p>All pages of your site should include a variable called <code>page_type</code>. This is used to determine the type of page the user is viewing. The suggested values include, but are not limited to:</p><table><thead><tr><th style=\"text-align:left\">Page</th><th style=\"text-align:left\">Value</th></tr></thead><tbody><tr><td style=\"text-align:left\">Home Page</td><td style=\"text-align:left\"><code>home</code></td></tr><tr><td style=\"text-align:left\">Category / Product List</td><td style=\"text-align:left\"><code>category</code></td></tr><tr><td style=\"text-align:left\">Product Detail</td><td style=\"text-align:left\"><code>product</code></td></tr><tr><td style=\"text-align:left\">Search Results</td><td style=\"text-align:left\"><code>search</code></td></tr><tr><td style=\"text-align:left\">Cart / Basket</td><td style=\"text-align:left\"><code>cart</code></td></tr><tr><td style=\"text-align:left\">Checkout Flow (User Info, Billing Address, Shipping Address)</td><td style=\"text-align:left\"><code>checkout</code></td></tr><tr><td style=\"text-align:left\">Order Confirmation / Thank You</td><td style=\"text-align:left\"><code>order</code></td></tr></tbody></table><p><strong>Pros</strong></p><ul><li>Gives a clear understanding of what kind of page the user is viewing.</li><li>Many vendor tags utilize a page type to function properly.</li></ul><p><strong>Cons</strong></p><ul><li>Initial development effort to add <code>page_type</code> variable to the Universal Data Object.</li></ul><h2 id=\"third-party-data-layer-objects\">Third-party data layer objects</h2><p>You might already have a data layer object implemented on your site, such as the W3C Data Object or your own custom object. We recommend that these objects be converted to the UDO <code>utag_data</code> format using one of the available <a href=\"/iq-tag-management/data-layer/data-layer-converter/set-up-data-layer-converter/\">data layer converters</a>.</p><p><strong>Pros</strong></p><ul><li>Better compatibility with built-in functionality, such as load rules, data mappings, and Web Companion.</li><li>Reduces support costs to investigate issues with your custom object.</li></ul><p><strong>Cons</strong></p><ul><li>Additional effort to implement.</li></ul>"
        }  

    , 
        {
            "weight": "15",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/data-layer-variables/",
            "title": "Data layer variable types",
            "body":"<p>The data layer screen organizes variables by type. The types are based on the source of the data.</p><p>The supported types are:</p><ul><li><strong>UDO Variables</strong>: Variables from the Universal Data Object (<code>utag_data</code>).</li><li><strong>Querystring Parameters</strong>: Variables from the URL query string.</li><li><strong>First-Party Cookies</strong>: Variables stored as cookies.</li><li><strong>JavaScript Variables</strong>: Variables that already exist in your site code.</li><li><strong>Meta Data Elements</strong>: Variables from <code>&lt;meta&gt;</code> tags.</li><li><strong>DOM Variable</strong>: Built-in DOM variables.</li><li><strong>Local Storage Variable</strong>: Data stored locally between sessions.</li><li><strong>Session Storage Variable</strong>: Data stored locally that expires between sessions.</li><li><strong>AudienceStream Attributes</strong>: Variables imported by <a href=\"/server-side/attributes/data-layer-enrichment/about/\">data layer enrichment</a> from AudienceStream.</li></ul><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-datalayervariables-filter.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-datalayervariables-filter.png\"         alt=\"Tealium iQ Data Layer Variable Types in the filter\"         title=\"Tealium iQ Data Layer Variable Types in the filter\"/>    </a></figure><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>These data layer variables are for use in your Tealium iQ configuration. For more information on creating the data layer code for your site, see <a href=\"/platforms/getting-started-web/quick-start/#data-layer\">Data Layer</a> and <a href=\"/platforms/javascript/universal-data-object/\">Universal Data Object</a>.</p><h2 id=\"udo-variable\">UDO variable</h2><p>The UDO type is for variables defined in your <a href=\"/platforms/javascript/about-utag-data/\">Universal Data Object</a>, also referred to as <code>utag_data</code>. The UDO is implemented in the code of your site or app. Most of your variables will be this type.</p><h4 id=\"example\">Example</h4><p>In the page code:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">utag_data</span> <span style=\"color:#f92672\">=</span> {</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#a6e22e\">language</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;en&#34;</span></span></span><span style=\"display:flex;\"><span>};</span></span></code></pre></div><p>Variable name: <code>language</code><br>Referenced in a JavaScript extension: <code>b[&quot;language&quot;]</code></p><h2 id=\"query-string-parameters\">Query string parameters</h2><p>The query string type is for parameters from the URL. The query string consists of everything after the <code>?</code> character in the URL. A query string parameter is a key/value pair in the format <code>key=value</code> where <code>key</code> is the parameter name.</p><h4 id=\"example-1\">Example</h4><p>In the URL:</p><pre tabindex=\"0\"><code class=\"language-none\" data-lang=\"none\">http://example.com/path/page.html?pg=4&amp;sortOrder=price</code></pre><p>Variable name in iQ: <code>sortOrder</code><br>Referenced in a JavaScript extension: <code>b[&quot;qp.sortOrder&quot;]</code></p><h2 id=\"first-party-cookies\">First-party cookies</h2><p>The first-party cookie type is for cookies that are set on your domain. The cookie must be a first-party cookie, which means it is set by the same domain where it&rsquo;s used.</p><p>To store data in a cookie, create a first-party cookie variable and then use the <a href=\"/iq-tag-management/extensions/extensions-list/persist-data-value-extension/\">Persist Data Value extension</a> to set it.</p><p>Look in the browser console to inspect cookies. For example, on this documentation site (<code>docs.tealium.com</code>), only cookies in the domain <code>.tealium.com</code> are considered first-party. Cookies set in a different domain are considered third-party.</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/data-layer/data-layer-variables/first-party-third-party-cookies-marked.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/data-layer/data-layer-variables/first-party-third-party-cookies-marked.png\"/>    </a></figure><p>Browser cookie name: <code>_aff</code><br>Variable name in iQ: <code>_aff</code><br>Referenced in a JavaScript extension: <code>b[&quot;cp._aff&quot;]</code></p><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>By default, <code>utag.js</code> creates and maintains several cookies that might be useful in your configuration.<br>For more information, see <a href=\"/iq-tag-management/data-layer/cookies/#built-in-cookies\">Tealium built-in cookies</a>.</p><h3 id=\"versions-449-or-earlier\">Versions 4.49 or earlier</h3><p>Versions 4.49 and earlier of <code>utag.js</code> create and maintain a single multi-value cookie named <code>utag_main</code> with several delimited key/value pairs.</p><p>To create a custom cookie using <code>utag_main</code>, create a first-party cookie variable with the prefix <code>utag_main_</code> (for example, <code>utag_main_mycookie</code>). This keeps cookies associated with your Tealium installation separated from the global cookie namespace. This approach helps to avoid name collisions and makes it clear which cookies come from your tag manager.</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-tealium-cookies-add-first-party-cookie-variable.jpg\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-tealium-cookies-add-first-party-cookie-variable.jpg\"         alt=\"Add First Party Cookie variable\"         title=\"Add First Party Cookie variable\"/>    </a></figure><h2 id=\"javascript-variables\">JavaScript variables</h2><p>The JavaScript type references a JavaScript variable on your web page (other than the <code>utag_data</code> object). The variable name can only contain letters, numbers, underscores, dollar signs, array brackets, and periods. Use dot notation to reference an object property (<code>object.propertyName</code>).</p><h4 id=\"example-2\">Example</h4><p>In the page:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">myApp</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">page</span> <span style=\"color:#f92672\">:</span> { <span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;Home Page&#34;</span> } };</span></span></code></pre></div><p>Variable name in iQ: <code>myApp.page.name</code><br>Referenced in a JavaScript extension: <code>b[&quot;js_page.myApp.page.name&quot;]</code></p><h2 id=\"meta-data-elements\">Meta data elements</h2><p>The meta data type references the content of a <code>&lt;meta&gt;</code> tag in the page.</p><h4 id=\"example-3\">Example</h4><p>In the page:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-html\" data-lang=\"html\"><span style=\"display:flex;\"><span>&lt;<span style=\"color:#f92672\">meta</span> <span style=\"color:#a6e22e\">name</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;author&#34;</span> <span style=\"color:#a6e22e\">content</span><span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;Tealium&#34;</span> /&gt;</span></span></code></pre></div><p>Variable name in iQ: <code>author</code><br>Referenced in a JavaScript extension: <code>b[&quot;meta.author&quot;]</code></p><h2 id=\"dom-variables\">DOM variables</h2><p>The DOM type references properties from the <code>window</code> and <code>document</code> objects. These variables are set automatically in the page.</p><p>JavaScript page variable: <code>location.hostname</code><br>Referenced in a JavaScript extension: <code>b[&quot;dom.hostname&quot;]</code></p><p>For more information, see <a href=\"/platforms/javascript/built-in-variables/\">standard page data</a>.</p><h2 id=\"local-and-session-storage\">Local and session storage</h2><p>(New in <a href=\"/platforms/javascript/release-notes/#449\"><code>utag.js</code> 4.49</a>)</p><p>The local storage and session storage types reference data from the browser&rsquo;s local storage or session storage:</p><ul><li>Local storage is saved across browser sessions. This data does not expire.</li><li>Session storage expires when the page session ends.</li></ul><p>For more information about the differences between these storage types and their uses, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">Window.localStorage</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">Window.sessionStorage</a> from MDN Web Docs.</p><p>To set a value in local storage or session storage, use the <a href=\"/iq-tag-management/extensions/extensions-list/advanced-javascript-code-extension/\">Advanced JavaScript Code extension</a> with custom JavaScript code similar to the following:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">localStorage</span>.<span style=\"color:#a6e22e\">setItem</span>(<span style=\"color:#e6db74\">&#34;key&#34;</span>, <span style=\"color:#a6e22e\">value</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">sessionStorage</span>.<span style=\"color:#a6e22e\">setItem</span>(<span style=\"color:#e6db74\">&#34;key&#34;</span>, <span style=\"color:#a6e22e\">value</span>);</span></span></code></pre></div><p>You cannot use <a href=\"/iq-tag-management/extensions/extensions-list/persist-data-value-extension/\">Persist Data Value</a> or <a href=\"/iq-tag-management/extensions/extensions-list/set-data-values-extension/\">Set Data Values</a> extensions to set values in your browser for local or session storage.</p><p>Session and local storage can only access data within the same subdomain. For example, data accessed on <code>www.example.com</code> cannot be accessed on <code>store.example.com</code>. For more information, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_data_storage_access\">Same Origin Policy</a>.</p><p>Reference these variables with JavaScript in an extension:</p><ul><li>Local storage: <code>b[&quot;ls.my_local_storage_var&quot;]</code></li><li>Session storage: <code>b[&quot;ss.my_session_storage_var&quot;]</code></li></ul><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>If you added local storage or session storage variables as the UDO type with the <code>ls.</code> or <code>ss.</code> prefix before March 1, 2023, those variables will not be converted to the new local storage and session storage variable types.</p><h4 id=\"example-4\">Example</h4><p>Your system stores the variable <code>last_category_viewed</code> in local storage:</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/data-layer/data-layer-variables/localandsessionstorage2.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/data-layer/data-layer-variables/localandsessionstorage2.png\"         alt=\"Reference the variable\"         title=\"Reference the variable\"/>    </a></figure><p>You can access this value from the page as:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">localStorage</span>.<span style=\"color:#a6e22e\">getItem</span>(<span style=\"color:#e6db74\">&#34;last_category_viewed&#34;</span>).</span></span></code></pre></div><p>To add this variable to your configuration, create a data layer variable with <strong>Type</strong> set to <strong>Local Storage Variable</strong> and the <strong>Source</strong> set to <code>last_category_viewed</code>:</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/data-layer/data-layer-variables/localandsessionstorage1.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/data-layer/data-layer-variables/localandsessionstorage1.png\"         alt=\"Create the variable\"         title=\"Create the variable\"/>    </a></figure><p>To set a value, use the <a href=\"/iq-tag-management/extensions/extensions-list/advanced-javascript-code-extension/\">Advanced JavaScript Code Extension</a> with custom JavaScript code similar to the following:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">localStorage</span>.<span style=\"color:#a6e22e\">setItem</span>(<span style=\"color:#e6db74\">&#34;last_category_viewed&#34;</span>, <span style=\"color:#e6db74\">&#34;Apparel&#34;</span>)</span></span></code></pre></div><h3 id=\"versions-448-or-earlier\">Versions 4.48 or earlier</h3><p>In <code>utag.js</code> versions 4.48 and earlier, you must manually add a local or session storange variable as <strong>UDO</strong> type with the following name format:</p><ul><li>Local storage: <code>ls.VARIABLE_NAME</code></li><li>Session storage: <code>ss.VARIABLE_NAME</code></li></ul><p>To use these storage variables:</p><ol><li>Go to <strong>iQ Tag Management &gt; Data Layer &gt; +Add Variable</strong>.</li><li>Select <strong>UDO Variable</strong>.</li><li>Enter the source variable name.</li></ol>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/iq-tag-management/data-layer/manage-variables/",
            "title": "Manage variables",
            "body":"<h2 id=\"data-layer-tab\">Data layer tab</h2><p>The <strong>Data Layer</strong> tab offers several ways to manage the variables in your data layer. Each variable that you implemented on your website must also be created here so that it can be used in your configuration. In addition to the <a href=\"/platforms/javascript/about-utag-data/\">dynamic data you populate in your site&rsquo;s Universal Data Object (UDO)</a>, a number of other built-in variables from your pages are available to be added from this screen.</p><p>Learn more about the <a href=\"/platforms/javascript/built-in-variables/\">built-in variables available in the UDO</a>.</p><p>If you&rsquo;re unsure about what data might be available from a web page on which Tealium is installed, use the <a href=\"/iq-tag-management/troubleshooting/utag-debugger/\">Universal Tag Monitor</a> to quickly see what data is being collected.</p><h2 id=\"add-a-variable\">Add a variable</h2><p>Use the following steps to add a single variable:</p><ol><li>Navigate to the <strong>Data Layer</strong> tab and click <strong>Add Variable</strong>. The <strong>Add Variable</strong> dialog box appears.</li><li>Enter the following fields:<ul><li><strong>Source</strong>: (Required) The name of the variable exactly as it appears in your site&rsquo;s source code</li><li><strong>Type</strong>: (Required) The type of variable, as specified below</li><li><strong>Alias</strong>: an additional name for the Variable, usually if the Source name is not intuitive</li><li><strong>Notes</strong>: Useful comments about the Variable, especially useful for the next person that uses your account<br><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-datalayer-addvariable-dialog.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-datalayer-addvariable-dialog.png\"             alt=\"TiQ_DataLayer_AddVariable_Dialog.png\"             title=\"TiQ_DataLayer_AddVariable_Dialog.png\"/>        </a>    </figure></li></ul></li></ol><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>When using variables in EventDB, column names for variables must consist of only UTF-8 printable characters. ASCII characters in standard and delimited identifiers are case-insensitive and are folded to lower case. For additional details, see <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_names.html\">Amazon Web Services - Names and identifiers</a>.</p><h2 id=\"bulk-import-variables\">Bulk import variables</h2><p>Adding variables individually can take some time. Tealium iQ provides an easy way to add numerous variables at the same time with the <strong>Bulk Import from CSV</strong> option.</p><p>Use the following steps to add variables using the Bulk Import from CSV option:</p><ol><li><p>Click the down arrow to the right of the <strong>+</strong> <strong>Add Variable</strong> button to reveal more options.</p></li><li><p>Select <strong>Bulk Import from CSV</strong>.<br><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-addvariables-dropdownlist.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-addvariables-dropdownlist.png\"             alt=\"TiQ_AddVariables_DropDownList.png\"             title=\"TiQ_AddVariables_DropDownList.png\"/>        </a>    </figure></p></li><li><p>In the <strong>Import Variables</strong> dialog, enter the variables you want to add into the text box with a comma-separated values (CSV) format. There are a few things you should be aware of:</p><ul><li>Each variable entry supports four values in this order:<br><code>Source, Type, Description (optional), Alias (optional)</code><br>These correspond to the same values you would enter if you were adding a variable from the <strong>Add Variable</strong> dialog.</li><li>These values must be separated, or delimited, by a comma.</li><li>You may enclose each value with quotes, but they are not required.</li></ul></li><li><p>Click <strong>Apply</strong> to upload the variables.<br><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-bulkimportvariablessamplecode.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-bulkimportvariablessamplecode.png\"             alt=\"TiQ_BulkImportVariablesSampleCode.png\"             title=\"TiQ_BulkImportVariablesSampleCode.png\"/>        </a>    </figure></p></li></ol><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Checking the <strong>Replace All Variables</strong> box removes all the current variables and replaces them with the variables you enter in the text field.</p><h2 id=\"view-variable-details\">View variable details</h2><p>The expanded view of a variable provides a condensed view of variable details. When you expand the variable summary to show the details, a list of the dependencies is displayed. The dependencies make it easy to see which tags, load rules, and extensions are referencing this variable. From this view, you can edit a variable, delete a variable, or manage labels.</p><figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-viewandeditvariables.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-viewandeditvariables.png\"         alt=\"iQ_ViewAndEditVariables.png\"         title=\"iQ_ViewAndEditVariables.png\"/>    </a></figure><h2 id=\"edit-a-variable\">Edit a variable</h2><p>To edit a variable, follow these steps:</p><ol><li>Click a variable to expand the view.</li><li>Click <strong>Edit</strong>.</li><li>Make changes and click <strong>Apply</strong>.</li><li>Click <strong>Save/Publish</strong> to save the change.</li></ol><h2 id=\"bulk-edit-variables\">Bulk edit variables</h2><p>You can bulk edit all variables or edit multiple variables from the <strong>Data Layer</strong> tab.</p><p>To edit all variables follow these steps:</p><ol><li>Click the <strong>Edit All</strong> button in the <strong>Data Layer</strong> tab. The <strong>Edit Bulk Variables</strong> dialog appears from which you can make changes.<figure><a class=\"slb\" href=\"/images/iq-tag-management/whiteui-tiq-editbulkvariables.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/whiteui-tiq-editbulkvariables.png\"             alt=\"TiQ_EditBulkVariables.png\"             title=\"TiQ_EditBulkVariables.png\"/>        </a>    </figure></li><li>Click <strong>Apply</strong> to apply the changes.</li><li>Click <strong>Save/Publish</strong> to save the change.</li></ol><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>To bulk edit selected variables, select the checkboxes beside the variables and click <strong>Edit Selected</strong>.</p><h2 id=\"delete-a-variable\">Delete a variable</h2><p>To delete a variable, follow these steps:</p><ol><li>Click a variable to expand the view.</li><li>Click the <strong>Delete</strong> button underneath the variable name. The <strong>Confirm Remove</strong> dialog appears.</li><li>Click <strong>OK</strong> to confirm.</li><li>Click <strong>Save/Publish</strong> to save the change.</li></ol>"
        }  

    ]
}
