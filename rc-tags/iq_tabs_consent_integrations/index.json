
{
    "kind": "term",
    "name": "iq_tabs_consent_integrations",
    "count": 4,
    "items": [

    
        {
            "weight": "465",
            "url": "https://docs.tealium.com/iq-tag-management/consent-integrations/about/",
            "title": "Consent Integrations",
            "body":"<p>The new Consent Enforcement Framework is a core feature of Tealium iQ Consent Integrations that enables robust and reliable enforcement of consent signals captured outside of Tealium iQ Tag Management. This feature blocks tracking when customer consent is not given or is ambiguous.</p><p>Tealium iQ Consent Integrations provides the option for both opt-in (GDPR-style) and opt-out (CCPA-style) enforcement patterns for the supported consent management platforms (CMPs). Integrations can be written in the form of templates to support most CMPs or custom solutions.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Tealium iQ Consent Integrations has a dependency on the latest utag version 4.49. To enable support in previous versions, edit the <strong>uTag Loader</strong> template and add <code>##UTCM##</code> under the <code>##UTGEN##</code>publish engine flag.</p><p>The following terms are related to the consent integrations framework:</p><ul><li><strong>Purpose</strong> - A specific data use purpose to which your website users can consent (or withhold consent).</li><li><strong>Purpose Group</strong> - A list of purposes. A representation of an enforcement policy in the form of a group of consent purposes to which tags are assigned.</li><li><strong>Exemption</strong> - A case where no enforcement is necessary and no tags need to be blocked based on consent decisions. Enforcement exemptions differ from the behavior when no consent integration enforcement rules apply. Unless there&rsquo;s an explicit exemption, or matching consent integration and the appropriate consent decision, no tags are allowed to fire.</li><li><strong>Enforcement Rule</strong> - Rules that determine when to enforce a consent integration or exemption.</li><li><strong>Consent Decision</strong> - An array of purposes that have been consented to. Consent Decision is determined with a <code>type</code> attribute and is either <code>implicit</code> or <code>explicit</code>, depending on whether the user has made an active decision (<code>implicit</code>) or not (<code>explicit</code>).</li><li><strong>Implicit decision</strong> - A decision inferred from a user&rsquo;s behavior. By visiting a site, a user consents to the necessary tags as described in the siteâ€™s privacy policy. A user can object to the sale of their data, but by default this is enabled (there is an implicit &lsquo;it&rsquo;s OK, to share/sell my data&rsquo; decision).</li><li><strong>Explicit decision</strong> - A clear and precise consent decision by a user about what tracking they consent to.</li><li><strong>Integration</strong> A set of features and configurations (pre-loaded or custom) that capture a consent decision from a specified CMP. An integration is associated with a purpose group.</li></ul><h2 id=\"how-it-works\">How it works</h2><p>Tealium iQ Consent Integrations enables you to integrate with supported non-Tealium consent management platforms. Your CMP prompts end-users for purpose-based consent as needed, and then captures and stores those user consent decisions. When an integration is active, tags must be assigned to purposes within a purpose group before they can be triggered. A purpose must be consented to before tags assigned to that purpose can be triggered.</p><p>Each consent integration instructs the underlying framework how to communicate with a single CMP. Only one integration may be active simultaneously. However, you can use <strong>Enforcement Rules</strong> to conditionally apply multiple active integrations without conflict, if needed.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Note that tags that inject CMPs into the page are not compatible with Tealium iQ Consent Integration. Integrations require a signal from the CMP before tags are loaded. To integrate your CMP with Consent Integrations, use a Preloader or DOM Ready extension, or add the CMP to the page outside of Tealium iQ.</p><p>You can set up an integration with a supported CMP in the Tealium iQ dashboard, or create a custom integration by editing the <strong>Custom template</strong>.</p><h2 id=\"supported-integrations\">Supported integrations</h2><p>See <a href=\"/iq-tag-management/consent-integrations/supported-vendors/\">Supported Vendor Integrations</a> for a full list of currently supported integrations.</p><h2 id=\"manage-integrations\">Manage integrations</h2><p>In the Tealium iQ dashboard, the Consent Integrations screen provides the ability to add and configure consent integrations.</p><h3 id=\"add-an-integration\">Add an integration</h3><p>Follow the steps below to add an integration:</p><ol><li>Go to <strong>iQ Tag Management &gt; Consent Integrations.</strong></li><li>Click <strong>+ Add Integration</strong> to open the integration configuration modals.</li></ol><h4 id=\"step-1-configure-integrations\">Step 1: Configure integrations</h4><ol><li>In the <strong>Configure Integrations</strong> tab, enter a descriptive name for your integration.</li><li>Select a vendor from the <strong>Vendor</strong> list. Depending on your vendor selection, additional fields may be required, usually an identifier for the CMP configuration you want to integrate with.</li><li>Enter a description.</li><li>Click <strong>Next</strong>.</li></ol><h4 id=\"step-2-enforcement-rules\">Step 2: Enforcement Rules</h4><p>Use the dropdown list to create a new rule, or select an existing rule. This rule determines when to enforce a consent integration.</p><p>To create a new rule:</p><ol><li>Click <strong>+ New Rule</strong>.</li><li>In the Add Rule dialog, add a <strong>Title</strong> for the load rule, and optional <strong>Notes</strong> if needed.</li><li>Use the drop-down lists to select a <strong>Variable</strong> and an <strong>Operator</strong>, then enter a <strong>Value</strong>.</li><li>To add another condition using AND logic, do one of the following:<ol><li>Click <strong>+</strong> next to the default conditional statement.</li><li>To create a copy of a conditional statement using AND logic by clicking the row menu and selecting <strong>Duplicate Row</strong>.<br>The duplicate conditional statement can be edited as needed.</li></ol></li><li>To add another condition using OR logic, do one of the following:<ol><li>Click <strong>+OR</strong>.</li><li>Create a copy of a condition using OR logic by clicking the condition menu and selecting <strong>Duplicate</strong>.  The duplicate condition can be edited to create a new condition.</li></ol></li><li>To remove a conditional statement from a condition, click the row menu and select <strong>Remove Row</strong>.</li><li>Click <strong>Done.</strong></li></ol><h4 id=\"step-3-publish-locations\">Step 3: Publish locations</h4><ol><li>Select the environments where you want this integration&rsquo;s enforcement to apply.</li><li>Click <strong>Next</strong>.</li></ol><h4 id=\"step-4-purpose-group\">Step 4: Purpose group</h4><ol><li>Select a purpose group for your integration from the <strong>Purpose Group</strong> drop down list.If you opted to configure your integration with the default vendor categories in step 4, complete the following steps and continue with step 9:<ol><li>Select <strong>&lt;Vendor&gt; Default</strong> from the list.</li></ol></li><li>If you did not opt to configure your integration with the default vendor categories in step 4:<ol><li>Select <strong>+ New Purpose Group</strong> from the drop down list.</li><li>In the <strong>New Purpose Group</strong> modal, click <strong>Create Purpose Group</strong>. This redirects you to the Purpose Group wizard. Your progress in the Add Integration wizard is saved and you will be redirected back after configuring your purpose group.</li><li>In the <strong>Purpose Group</strong> wizard, complete steps 4 to 13 of the <a href=\"#add-a-purpose-group\">Add a Purpose Group</a> Section.</li><li>In the <strong>Add Integration</strong> wizard, select your purpose group from the <strong>Purpose Group</strong> drop down list.</li></ol></li><li>Click <strong>Save</strong> to create your new Integration.</li></ol><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>If you are using OneTrust default vendor categories for the first time, after creating your integration, follow the steps in <a href=\"#edit-a-purpose-group\">edit purpose group</a> to assign tags to the <strong>Default</strong> purpose group.</p><h2 id=\"manage-purpose-groups\">Manage purpose groups</h2><p>To manage your purpose groups, navigate to <strong>iQ Tag Management &gt; Consent Integrations &gt; Purpose Groups</strong> tab.</p><h3 id=\"add-a-purpose-group\">Add a purpose group</h3><p>Follow the steps below to add a purpose group:</p><ol><li>Click <strong>+ Add Purpose Group</strong> to open the purpose group configuration modals.</li></ol><h4 id=\"step-1-purpose-group\">Step 1: Purpose group</h4><ol><li>Enter a name and description.</li><li>Click <strong>Next</strong>.</li></ol><h4 id=\"step-2-purposes\">Step 2: Purposes</h4><ol><li>Enter purpose name and description. Each purpose name must match the name of a consent category for the vendor you are integrating with.</li><li>You can create multiple purposes in a purpose group. To add more purposes to your purpose group, click <strong>+ Add Purpose</strong></li><li>Click <strong>Next</strong>.</li></ol><h4 id=\"step-3-tealium-iq-purpose\">Step 3: Tealium iQ purpose</h4><ol><li>Select a purpose to map to Tealium iQ from the <strong>Tealium Tag Purpose</strong>. Tealium iQ controls all tag operations and must be mapped to a purpose for any tags to function.</li><li>Click <strong>Next</strong>.</li></ol><h4 id=\"step-4-map-tags\">Step 4: Map tags</h4><p>All tags must be mapped to a purpose before they can be triggered.</p><ol><li>To map your tags to the newly created purposes, for each tag, click <strong>Assign/Map</strong> and select the purpose you want to map that tag with from the drop down list.</li><li>To enable or disable tag refire for each tag, toggle the <strong>OFF/ON</strong> button under the <strong>Tag Refire</strong> column. For more information about tag refire, see the Tag refire section.</li><li>Click <strong>Save</strong> to create your new purpose group.</li></ol><h3 id=\"edit-a-purpose-group\">Edit a purpose group</h3><p>Follow the steps below to edit a purpose group:</p><ol><li>Click the options icon beside the Purpose Group you want to edit.</li><li>Click <strong>Edit</strong> to open the purpose group configuration.</li><li>Click the tab for the section you want to edit. To map tags to a new default purpose group, click <strong>Map Tags</strong>.</li><li>Click <strong>Save</strong> to save your changes.</li></ol><h2 id=\"tag-refire\">Tag refire</h2><p>Each tag has a <strong>Tag Refire</strong> switch in the <strong>Map Tags</strong> screen:</p><figure><a class=\"slb\" href=\"/images/early-access/map-tags.png\"><img src=\"https://docs.tealium.com/images/early-access/map-tags.png\"         alt=\"map_tags.png\"         title=\"map_tags.png\" width=\"790\" height=\"417\"/>    </a></figure><p>If you enable this option, the tag can be triggered up to twice for each user action (once with the implicit decision and once with the explicit decision). Note that no tags are triggered if the mapped purposes are not consented to.</p><p>Most tags don&rsquo;t need to be triggered again if they have consent in each of these cases. Triggering tags again may result in double tracking in some cases, which should be avoided.</p><p>Customer Data Hub customers (especially EventStream customers) can benefit from refiring the Collect tag and using the <code>purposes_with_consent_unprocessed</code>  attribute for the server-side activation logic to ensure that no server-side activation is refired for the same event. Using the <code>purposes_with_consent_unprocessed</code> attribute allows server-side activations to be triggered as quickly as possible without triggering twice for the same event.</p><h2 id=\"access-the-consent-decision-within-tealium-iq\">Access the consent decision within Tealium iQ</h2><p>â€‹Consent decisions (<code>ConsentDecision</code>) are provided in the <code>b object</code> for each event in the following attributes, which can be used in tags and are automatically sent by the <a href=\"/client-side-tags/tealium-collect-tag/\">Collect tag</a>, but are not available for extensions.</p><ul><li><code>tci.consent_type</code>  - The ConsentDecision&rsquo;s <code>type</code> attribute ( <code>implicit</code> or <code>explicit</code> ).</li><li><code>tci.purposes_with_consent_all</code>  - The full <code>ConsentDecision</code> array, all permitted purposes.</li><li><code>tci.purposes_with_consent_processed</code> - The array of processed consented purposes.</li><li><code>tci.purposes_with_consent_unprocessed</code> - The array of unprocessed consented purposes.</li></ul><h3 id=\"access-the-consent-decision-from-extensions\">Access the consent decision from extensions</h3><p><code>tealiumCmpIntegration.GetCurrentConsentDecision()</code> returns the current consent decision and can be used to access consent decisions from extensions.</p><p>The following command adds the current consent decision to the <code>b object</code> for all subsequent extensions and passes it to tags along with the <code>tci.*</code> attributes:</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">currentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">getCurrentConsentDecision</span>()</span></span></code></pre></div><h2 id=\"using-the-javascript-console\">Using the JavaScript console</h2><p>When active, you can interact with a consent integration in the JavaScript console on pages where utag.js (Tealium iQ) is implemented. Using the JavaScript console allows you to get the current consent decision that is retrieved from the CMP on every event. The consent decision is never cached by Tealium to ensure it is always up to date.</p><p>For more details, see the related <a href=\"/iq-tag-management/consent-integrations/validate-and-debug/\">debugging documentation</a>.</p><h2 id=\"server-side-attributes---using-collect-with-consent-integrations\">Server-side attributes - using Collect with Consent Integrations</h2><p>Tealium Collect, like all other tags, must be mapped to a consented purpose. However, the <code>refiringAllowed</code> option allows tags to be refired on new decisions. This process indicates that the tag is being used for a variety of server-side purposes, and available server-side filters and logic are used to ensure that the signal is only processed appropriately while allowing it to refire.</p><p>Depending on which server-side tools you use, the Collect tag is triggered with the following event-level attributes for each event:</p><ul><li><code>tci.purposes_with_consent_unprocessed</code> (with refiring)</li><li><code>tci.purposes_with_consent_all</code> (without refiring)</li></ul><h3 id=\"opt-in-model\">Opt-in model</h3><figure><a class=\"slb\" href=\"https://raw.githubusercontent.com/jaquith/cmp-integrations/main/docs-src/static/tiq-cmp-integration-flow-opt-in.png\"><img src=\"https://raw.githubusercontent.com/jaquith/cmp-integrations/main/docs-src/static/tiq-cmp-integration-flow-opt-in.png\"/>    </a></figure><p>Tealium iQ will not fire tags or set cookies until a consent decision is received from the CMP. If the expected CMP is not active on the page or Tealium iQ has not been consented, Tealium iQ will not run and no tags will be fired.</p><p>If no consent decision is found when Tealium iQ loads, Tealium iQ consent integration polls until one is found.</p><p>Until a consent decision is received from the CMP, all events are queued to be processed once a decision is found. If no consent decision is received, no events are processed.</p><p>If a consent decision ( <code>implicit</code> or <code>explicit</code> ) is available from the CMP, the following takes place:</p><ul><li>Tealium iQ consent integration first checks if Tealium iQ is allowed to run (since it sets cookies).</li><li>If Tealium iQ is allowed to run, it checks if each tag can run</li><li>If the tags can run, it then triggers the tags according to consent for all queued events.</li></ul><p>If the consent decision is implicit, the events go into a different queue after implicitly consented tags are fired so that they can be reprocessed for newly consented tags when the user makes an explicit decision. The solution searches for an explicit decision until one is found.</p><p>If the consent decision is explicit, all queues are emptied and polling stops. Tags fired on an implicit consent are not re-fired when the explicit consent decision is processed unless tag refire is enabled and there are new consent purposes to process.</p><p>When a user reopens the interactive CMP layer and makes a new explicit consent decision, previous events are not reprocessed with the new consent decision.</p><p>For new events processed after Tealium iQ is first loaded, the new consent decision is retrieved from the CMP as each event is processed by Tealium iQ to ensure that the CMP is treated as a universal source of truth.</p><h3 id=\"opt-out-model\">Opt-out model</h3><figure><a class=\"slb\" href=\"https://raw.githubusercontent.com/jaquith/cmp-integrations/main/docs-src/static/tiq-cmp-integration-flow-opt-out.png\"><img src=\"https://raw.githubusercontent.com/jaquith/cmp-integrations/main/docs-src/static/tiq-cmp-integration-flow-opt-out.png\"/>    </a></figure><p>The opt-out model is similar to the Opt-in model, but explicit decision is not polled as it is more restrictive than the default setting (CCPA/CPRA style) in the Opt-out model.</p>"
        }  

    , 
        {
            "weight": "470",
            "url": "https://docs.tealium.com/iq-tag-management/consent-integrations/supported-vendors/",
            "title": "Consent Integrations - Supported vendor configuration",
            "body":"<h2 id=\"how-it-works\">How it works</h2><p>Tealium iQ Consent Integrations supports integration with various consent management platforms (CMPs). You can access relevant vendor-specific information from the user interface of the supported consent management platforms (CMP) or the web page. To keep this documentation reliable and user-friendly, this section only covers the steps to retrieve vendor specific information from the webpage. For  steps to retrieve your Vendor ID and Purposes in the user interface of each partner CMP, see the respective CMP documentation.</p><p>To retrieve the relevant information from the web page follow these steps:</p><ol><li>Visit your website, where the CMP is implemented.</li><li>Accept all tracking.</li><li>Open the Developer Tools JavaScript console.</li><li>Paste the CMP-specific code from the code snippets below into the console.</li><li>Enter the displayed <strong>Vendor ID</strong>, <strong>Purpose Keys</strong> and <strong>Purpose Names</strong> into your Consent Integration.</li></ol><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Repaste the code to see the latest interpretation after you update your consent decision.</p><h2 id=\"integration-specific-instructions-and-code-snippets\">Integration-specific instructions and code snippets</h2><h3 id=\"didomi\">Didomi</h3><p>Test this snippet on <a href=\"https://didomi.io\">didomi.io</a> or on your website by <a href=\"#how-it-works\">following the instructions above</a> to check compatibility and get the information needed for integration.</p><p>The Didomi integration uses <strong>Vendors</strong> as <strong>Purposes</strong>.</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Didomi doesn&rsquo;t return implicitly consented purposes or vendors, this is a known bug. As a workaround until this bug is fixed, this integration unconditionally adds an <code>always_consented</code> purpose key to the outbound consent decision to allow implicit triggering.</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">didomiIntegration</span> (window) {</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Didomi&#39;</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;didomi-1.0.1&#39;</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span>().<span style=\"color:#a6e22e\">notice</span>.<span style=\"color:#a6e22e\">type</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;optin&#39;</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getUserStatus</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> {}</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getUserStatus</span>()</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getVendors</span>()</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span>()</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#e6db74\">&#39;&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">id</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span>().<span style=\"color:#a6e22e\">app</span>.<span style=\"color:#a6e22e\">deploymentId</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">id</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// do more checks than strictly necessary to confirm expectations</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span>.<span style=\"color:#a6e22e\">global</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;boolean&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span> <span style=\"color:#75715e\">// false after an explicit decision is made</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Didomi handles checking each vendor&#39;s required purposes</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> []</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// enforce strings, even for IAB vendor ids</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">decision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>.<span style=\"color:#a6e22e\">map</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">vendorId</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> String(<span style=\"color:#a6e22e\">vendorId</span>)</span></span><span style=\"display:flex;\"><span>    })</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">decision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;always_consented&#39;</span>)</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">decision</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedVendors</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allVendors</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">lookupObject</span> <span style=\"color:#f92672\">=</span> {}</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// WORKAROUND to allow implicit triggering until the Didomi bug is fixed</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">lookupObject</span>.<span style=\"color:#a6e22e\">always_consented</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Always consented (to allow strictly needed triggering)&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">allVendors</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">vendorObject</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">allowedVendors</span>.<span style=\"color:#a6e22e\">indexOf</span>(String(<span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span>)) <span style=\"color:#f92672\">===</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>) <span style=\"color:#66d9ef\">return</span></span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">lookupObject</span>[<span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;iab-vendor-&#39;</span> <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span></span></span><span style=\"display:flex;\"><span>    })</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">lookupObject</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span>})(window)</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Debugging / development output - repaste the integration on your test pages each time you make a change to your consent state</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`CMP Found: </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> (</span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - id:          </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed: </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit:    </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - group list:  </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()))<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - name lookup: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()), <span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">6</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)</span></span></code></pre></div><h3 id=\"onetrust\">OneTrust</h3><p>Test this snippet on <a href=\"https://onetrust.com\">https://onetrust.com</a> or on your website by <a href=\"#how-it-works\">following the instructions above</a> section above to check compatibility and get the information needed for integration.</p><pre><code>;(function oneTrust (window) {  // allows simple adjustment of the name/id behavior  var useNamesInsteadOfKeys = false  // allow the safety check of the expected Vendor ID to be circumvented to simplify setup at the cost of increased risk  var disableVendorIdValidation = false  // CMP specific functionality and labels  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}  window.tealiumCmpIntegration.cmpName = 'OneTrust'  window.tealiumCmpIntegration.cmpIntegrationVersion = 'onetrust-2.0.1'  window.tealiumCmpIntegration.cmpFetchCurrentConsentDecision = cmpFetchCurrentConsentDecision  window.tealiumCmpIntegration.cmpFetchCurrentLookupKey = cmpFetchCurrentLookupKey  window.tealiumCmpIntegration.cmpCheckIfOptInModel = cmpCheckIfOptInModel  window.tealiumCmpIntegration.cmpCheckForWellFormedDecision = cmpCheckForWellFormedDecision  window.tealiumCmpIntegration.cmpCheckForExplicitConsentDecision = cmpCheckForExplicitConsentDecision  window.tealiumCmpIntegration.cmpCheckForTiqConsent = cmpCheckForTiqConsent  window.tealiumCmpIntegration.cmpConvertResponseToGroupList = cmpConvertResponseToGroupList  window.tealiumCmpIntegration.cmpConvertResponseToLookupObject = cmpConvertResponseToLookupObject  function cmpCheckIfOptInModel () {    var decision = cmpFetchCurrentConsentDecision()    if (decision && decision.ConsentModel && decision.ConsentModel.Name === 'opt-out') {      return false    }    return true  }  function cmpFetchCurrentConsentDecision () {    if (!window.OneTrust || typeof window.OneTrust.GetDomainData !== 'function') return false    var cmpRawOutput = window.OneTrust.GetDomainData()    cmpRawOutput.dataLayer = window.dataLayer    return cmpRawOutput  }  function cmpFetchCurrentLookupKey () {    // newer versions of OneTrust, starting at the end of 2022 no longer have cctId defined    // but this HTML attribute is the way OneTrust can tell    var scrapeOneTrustVendorId = function () {      var allScripts = document.getElementsByTagName('script')      var re = /\/otSDKStub&bsol;.js(&bsol;?.*)*$/      for (var i = 0; i < allScripts.length; i++) {        var isOneTrustScript = re.test(allScripts[i].src) // can be null        if (isOneTrustScript) {          var fullVendorId = allScripts[i].getAttribute('data-domain-script') // parse it from the script          return fullVendorId.split('-test')[0]        }      }      return 'error-not-found'    }    if (disableVendorIdValidation) {      // just return whatever Vendor ID is expected be active      return (window.tealiumCmpIntegration && window.tealiumCmpIntegration.map && Object.keys(window.tealiumCmpIntegration.map)[0]) || '(Vendor ID check disabled)' // just return whatever's mapped to short-circuit the check as a test    }    return scrapeOneTrustVendorId()  }  function cmpCheckForWellFormedDecision (cmpRawOutput) {    // treat things we don't understand as an opt-out    if (typeof cmpRawOutput !== 'object') return false    if (toString.call(cmpRawOutput.Groups) !== '[object Array]') return false    if (toString.call(cmpRawOutput.dataLayer) !== '[object Array]') return false    return true  }  function cmpCheckForExplicitConsentDecision (cmpRawOutput) {    // treat things we don't understand as implicit    if (cmpCheckForWellFormedDecision(cmpRawOutput) !== true) return false    return window.OneTrust && typeof window.OneTrust.IsAlertBoxClosed === 'function' && window.OneTrust.IsAlertBoxClosed()  }  function cmpConvertResponseToLookupObject (cmpRawOutput) {    // convert from array of objects to object for easier lookups    var decisionString = ''    if (cmpCheckForWellFormedDecision(cmpRawOutput) !== true) return {}    for (var i = cmpRawOutput.dataLayer.length - 1; i >= 0; i--) {      if (['OneTrustGroupsUpdated', 'OneTrustLoaded'].indexOf(cmpRawOutput.dataLayer[i].event) !== -1) {        decisionString = cmpRawOutput.dataLayer[i].OnetrustActiveGroups        break      }    }    var permittedPurposeIds = decisionString.split(',').filter(function (group) {      return group !== ''    })    var permittedPurposesWithNames = {}    cmpRawOutput.Groups.forEach(function (groupInfo) {      if (permittedPurposeIds.indexOf(groupInfo.OptanonGroupId) !== -1) {        permittedPurposesWithNames[groupInfo.OptanonGroupId] = groupInfo.GroupName || 'ERROR-MISSING'      }    })    return permittedPurposesWithNames // keys are IDs, values are names  }  function cmpConvertResponseToGroupList (cmpRawOutput) {    var permittedPurposesWithNames = cmpConvertResponseToLookupObject(cmpRawOutput)    var keysOrValues = useNamesInsteadOfKeys ? 'values' : 'keys'    return Object[keysOrValues](permittedPurposesWithNames) // keys are IDs, values are names  }  function cmpCheckForTiqConsent (cmpRawOutput, tiqGroupName) {    // treat things we don't understand as an opt-out    if (cmpCheckForWellFormedDecision(cmpRawOutput) !== true) return false    tiqGroupName = tiqGroupName || 'tiq-group-name-missing'    var allowedGroups = cmpConvertResponseToGroupList(cmpRawOutput)    return allowedGroups.indexOf(tiqGroupName) !== -1  }})(window)// Debugging / development output - repaste the integration on your test pages each time you make a change to your consent statevar outputString = `CMP Found: ${window.tealiumCmpIntegration.cmpName} (${window.tealiumCmpIntegration.cmpCheckIfOptInModel() ? 'Opt-in' : 'Opt-out'} Model)  Checks:    - id:          ${window.tealiumCmpIntegration.cmpFetchCurrentLookupKey()}    - well-formed: ${window.tealiumCmpIntegration.cmpCheckForWellFormedDecision(window.tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}    - explicit:    ${window.tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(window.tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}    - group list:  ${JSON.stringify(window.tealiumCmpIntegration.cmpConvertResponseToGroupList(window.tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}    - name lookup: ${JSON.stringify(window.tealiumCmpIntegration.cmpConvertResponseToLookupObject(window.tealiumCmpIntegration.cmpFetchCurrentConsentDecision()), null, 6)}  `console.log(outputString)</code></pre><h3 id=\"usercentrics\">Usercentrics</h3><p>Test this snippet on <a href=\"https://usercentrics.com\">https://usercentrics.com</a> or on your website by <a href=\"#how-it-works\">following the instructions above</a> section above to check compatibility and get the information needed for integration.The Usercentrics integration uses <strong>Vendors</strong> as <strong>Purposes</strong>.</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">usercentricsBrowserSdkV2</span> (window) {</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Usercentrics Browser SDK&#39;</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;usercentrics-1.0.3&#39;</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getServicesBaseInfo</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getServicesBaseInfo</span>()</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> (window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getSettingsCore</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;function&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getSettingsCore</span>().<span style=\"color:#a6e22e\">id</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// only support opt-In model for Usercentrics for now, can be added if needed</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">isConsentRequired</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;function&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">isConsentRequired</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the first entry as a proxy for all</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;string&#39;</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span></span></span><span style=\"display:flex;\"><span>    }</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the first entry as a proxy for all</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">consentHistory</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">history</span>) <span style=\"color:#f92672\">||</span> []</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">lastHistoryEntryType</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">consentHistory</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">consentHistory</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">consentHistory</span>[<span style=\"color:#a6e22e\">consentHistory</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>].<span style=\"color:#a6e22e\">type</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">lastHistoryEntryType</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;explicit&#39;</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span></span></span><span style=\"display:flex;\"><span>    }</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">foundOptIn</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the mapping if found, with a fallback (Usercentrics default value) if not specified in the mapping</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// check vendors if there&#39;s an object, look for at least one</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">tagInfo</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> ((<span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">status</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">tiqGroupName</span>) {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">foundOptIn</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span></span></span><span style=\"display:flex;\"><span>      }</span></span><span style=\"display:flex;\"><span>    })</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">foundOptIn</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">vendorArray</span> <span style=\"color:#f92672\">=</span> []</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">tagConsent</span>) {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">status</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>) {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">vendorArray</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">name</span>)</span></span><span style=\"display:flex;\"><span>      }</span></span><span style=\"display:flex;\"><span>    })</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">vendorArray</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span></span></span><span style=\"display:flex;\"><span>})(window)</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> - </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - vendor id:            </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed decision: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit decision:    </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - consented purposes:   </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()).<span style=\"color:#a6e22e\">sort</span>(),<span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">8</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)</span></span></code></pre></div><h3 id=\"opt-out-cookie--gpc\">Opt-out Cookie + GPC</h3><p>This integration intends to provide support for very simple opt-out models such as CCPA/CPRA. It interprets the <strong>Vendor ID</strong> field as the cookie name of an opt-out cookie, and is case sensitive. A user is considered to have opted out if this cookie is found with any value, or if the <a href=\"/iq-tag-management/consent-management/global-privacy-control/about/\">Global Privacy Control (GPC)</a> opt-out signal is found.</p><p>The <strong>Purpose Keys</strong> used in the integration and included in the default <strong>Purpose Group</strong> are:</p><ul><li><code>no-selling</code> - For tags to allow regardless of the user&rsquo;s opt-out signal. These tags don&rsquo;t sell/share data or are considered strictly necessary by your legal team, etc.</li><li><code>yes-selling</code> - For tags to block for opt-out users because applicable regulations or policies prohibit tracking after a user has opted out.</li></ul><h3 id=\"custom-integration-template\">Custom Integration template</h3><p>See <a href=\"/iq-tag-management/consent-integrations/custom-cmp/\">custom integration</a> for more information about the custom integration template and how to use it.</p>"
        }  

    , 
        {
            "weight": "475",
            "url": "https://docs.tealium.com/iq-tag-management/consent-integrations/validate-and-debug/",
            "title": "Validate and debug Consent Integrations",
            "body":"<h2 id=\"validate-consent-integrations-before-publishing\">Validate Consent Integrations before publishing</h2><p>Validate and debug your consent integration by pasting the integration template into your site&rsquo;s JavaScript console without any other dependencies. Consent Integration templates can be edited and are designed to be stand-alone, which enables debugging from the website console.</p><p>Using templates is useful for <a href=\"/iq-tag-management/consent-integrations/custom-cmp/\">writing custom integrations</a> and can also be used to retrieve your vendor ID, purpose keys, or ensure that the default template works for your instance of a CMP without customization before configuration. Current templates with validation snippets are provided in the <a href=\"/iq-tag-management/consent-integrations/supported-vendors/\">documentation</a>.</p><h2 id=\"activate-debug-mode-after-publishing\">Activate debug mode after publishing</h2><p>The Tealium iQ <a href=\"/platforms/javascript/debugging/\">debug mode</a> contains detailed status and error messages from your Consent Integrations when the feature is active, unless an exemption applies. When exempt, <code>window.tealiumCmpIntegration</code> is defined and displays your active exemption in <code>window.tealiumCmpIntegration.exemptionMap</code>.</p><p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Use <code>/SENDING|****/</code> as a filter in the console output to show only relevant debug messages.</p><h2 id=\"validate-consent-integrations-after-publishing\">Validate Consent Integrations after publishing</h2><p>The Tealium iQ Consent Integrations creates a global object in the DOM called <code>window.tealiumCmpIntegration</code> that has a number of helpful properties for debugging. You can also call the component functions individually to facilitate debugging and validation. For details about the component functions, see <a href=\"/iq-tag-management/consent-integrations/custom-cmp/\">Custom CMP Integrations</a></p><h3 id=\"example\">Example</h3><p>This example describes how to retrieve important information about your CMP integration.</p><p>Complete the following steps to see important information about your CMP integration and confirm that it correctly captures customer decisions:</p><ol><li>Visit this <a href=\"https://www.otprivacy.com/user/jmyles/TagManagerDemo/OTKicks_Tealium/index.html?otreset=false&amp;otpreview=true&amp;otgeo=IE\">demo site</a> or any site with an active consent integration and paste the following snippet into your browser console:<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> - </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - vendor id:            </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed decision: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit decision:    </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - consented purposes:   </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()).<span style=\"color:#a6e22e\">sort</span>(),<span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">8</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)</span></span></code></pre></div></li><li>Paste the above snippet into the console of the demo site, it returns:<pre tabindex=\"0\"><code>OneTrust - Opt-in ModelChecks:  - vendor id:            b38364e4-b2c4-4349-8e4e-48cf28a35db8  - well-formed decision: true  - explicit decision:    false  - consented purposes:   [        &#34;C0001&#34;]</code></pre></li><li>Click <strong>Accept All Cookies</strong> on the web page and paste the same snippet again. The following output indicates that the decision was correctly understood and captured by the integration:<pre tabindex=\"0\"><code>OneTrust - Opt-in ModelChecks:  - vendor id:            b38364e4-b2c4-4349-8e4e-48cf28a35db8  - well-formed decision: true  - explicit decision:    true  - consented purposes:   [        &#34;C0001&#34;,        &#34;C0002&#34;,        &#34;C0003&#34;,        &#34;C0004&#34;]</code></pre></li></ol><h2 id=\"debug-collisions-and-enforcement-rules-after-publishing\">Debug collisions and Enforcement Rules after publishing</h2><p>â€‹<code>window.tealiumCmpIntegrations</code> has a number of useful properties that help you understand which integrations are enforced on a page. For instance, <code>loadRules</code> has child properties that show which consent integrations are enforced and whether there was a collision (which blocks Tealium iQ and all tags).</p><ul><li><code>map</code> and <code>tagBasedMap</code> show different views of the relationship between tag UIDs and Purpose Keys.</li><li><code>tiqGroupName</code> shows the mapping of the Purpose Key to Tealium iQ itself.</li><li><code>cmpName</code> shows the currently active CMP (according to the template).</li><li><code>cmpIntegrationVersion</code> shows the current version of the vendor specific integration template you&rsquo;re using.</li><li><code>version</code> shows the version of the underlying consent enforcement framework you&rsquo;re using.</li></ul><p>For more information about each of the specific integration features also included in this object, see the related <a href=\"/iq-tag-management/consent-integrations/custom-cmp/\">documentation</a> on writing custom integrations.</p>"
        }  

    , 
        {
            "weight": "480",
            "url": "https://docs.tealium.com/iq-tag-management/consent-integrations/custom-cmp/",
            "title": "Consent Integrations - Custom CMP Integration",
            "body":"<h2 id=\"how-it-works\">How it works</h2><p>Tealium Consent Integrations consist of two parts:</p><ul><li>A consent enforcement framework for Tealium iQ (the <code>utcm_framework</code> template).</li><li>CMP-specific integration templates that leverage the Tealium iQ consent enforcement framework. These integration templates are designed to be as lightweight as possible.</li></ul><p>Our <a href=\"/iq-tag-management/consent-integrations/supported-vendors/\">pre-built integrations</a> supports integration with various consent management platforms (CMPs). However, there are instances where a custom integration is recommended, such as:</p><ul><li>Using a CMP without a pre-built integration.</li><li>Using an internal tool to capture consent.</li><li>Using a supported CMP with extensive customizations that break the standard integration.</li></ul><p>In such cases, you can use a custom integration. By using JavaScript functions, any consent capture tool can leverage the enforcement framework.</p><p>To add a new custom integration, use the existing integrations and the provided template as a guide.</p><p>The following describes a basic workflow for creating a custom integration:</p><ol><li>Develop and debug the integration outside Tealium iQ (website where CMP is implemented).</li><li>In Tealium iQ, add a new custom consent integration and purpose group. For more information, see <a href=\"/iq-tag-management/consent-integrations/about/\">About Consent Integrations</a>.</li><li>Assign Tealium iQ and the appropriate tags to the purposes within the purpose group.</li><li>To create the template, save your profile.</li><li><a href=\"/iq-tag-management/templates/manage/\">Edit the newly created template</a>.</li><li>Publish the template to a development or test environment to verify that everything works as expected, and then follow your normal testing and publishing flow.</li></ol><h2 id=\"develop-debug-and-validate-custom-integrations\">Develop, debug, and validate custom integrations</h2><p>To create your custom CMP integration, edit the <a href=\"#custom-integration-template\">custom template</a> below to meet your CMP requirements. See the comments in the custom template for a working example.</p><h3 id=\"develop-and-debug-before-publish\">Develop and debug before publish</h3><p>Complete the following steps to debug during development:</p><ol><li>Uncomment the <strong>Debugging</strong> block at the end of the <a href=\"#custom-integration-template\">custom template</a>.</li><li>Paste the template into the console of a website running the CMP you want to support.</li><li>The debugging code block outputs the consent decision.</li><li>Customize your decision and paste the template again to see the newly interpreted consent decision.</li><li>When you are satisfied with your template, comment out the debugging block again before pasting and publishing it to Tealium iQ.</li></ol><p>You can also find the debugging snippet by saving your profile and <a href=\"/iq-tag-management/templates/manage/\">editing the template</a>.</p><h3 id=\"validate-after-publish\">Validate after publish</h3><p>There are two ways to debug and validate your template after publishing: using debug mode or using the <code>window.tealiumCmpOutput</code> object.</p><h4 id=\"using-debug-mode\">Using debug mode</h4><p>To use <a href=\"/platforms/javascript/debugging/\">debug mode</a>:</p><ul><li>Set the <code>utagdb</code> cookie to <code>true</code> with <code>document.cookie = &quot;utagdb=true&quot;</code> in the console.</li><li>Set your console filter to see only the relevant output (the suggested filter is in the debug output).</li><li>Test different options to make sure things work as expected.</li></ul><h4 id=\"using-the-windowtealiumcmpoutput-object\">Using the <code>window.tealiumCmpOutput</code> object</h4><p>To use the <code>window.tealiumCmpOutput</code> object:</p><ul><li>Paste the commented out debugging code block at the bottom of the template into the console to output only your decision and related output.</li><li>If needed, you can also call the functions in the template individually or access the other useful properties of this object.</li></ul><p>For more detailed debugging tips for prebuilt and custom integrations, see <a href=\"/iq-tag-management/consent-integrations/validate-and-debug/\">Validate and debug consent integrations</a>.</p><h2 id=\"integration-functions\">Integration functions</h2><p>The CMP-specific component of the integration is defined using the <code>window.tealiumCmpIntegration</code> object.</p><p>The <code>window.tealiumCmpIntegration</code> object consists of a name <code>.cmpName</code>, version <code>.cmpIntegrationVersion</code>, and the following functions:</p><h3 id=\"determine-operating-mode\">Determine operating mode</h3><ul><li><code>.cmpCheckIfOptInModel</code> - determines whether the integration should operate on the <code>opt-in</code> or <code>opt-out</code> model. Returns a boolean value.</li></ul><h3 id=\"fetch-decision\">Fetch decision</h3><ul><li><code>.cmpFetchCurrentConsentDecision</code> - retrieves the current raw version of the consent decision (raw version, from the CMP). The result must be an object and is passed as an argument to all subsequent functions.</li></ul><h3 id=\"validate-and-standardize-the-decision\">Validate and standardize the decision</h3><ul><li><p><code>.cmpCheckForWellFormedDecision</code> - checks if the raw version of the consent decision is well-formed and understandable. Returns a boolean value.</p></li><li><p><code>.cmpCheckForTiqConsent</code> - determines whether the raw consent decision contains permission for data processing by Tealium iQ. If false, nothing is executed. Returns a boolean value.</p></li><li><p><code>.cmpCheckForExplicitConsentDecision</code> - determines whether the raw consent decision is <code>explicit</code> or <code>implicit</code>. Returns a boolean value.</p></li><li><p><code>.cmpConvertResponseToGroupList</code> - converts the raw decision into a simple array of allowed purpose keys for downstream enforcement. Returns an array of consented purpose keys.</p></li></ul><h2 id=\"custom-integration-template\">Custom Integration template</h2><p>The following is a blank template to help you get started with your own custom integration. The template includes a debugging snippet at the end of the template that you can use to debug and validate your consent integration.</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">myCustomConsentIntegration</span> (window) {</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">/**</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * This template is meant to be edited, for you to build your own support for a custom CMP / capture tool.</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * The example code (commented out) is taken from an integration that checks for an opt-out cookie and returns one of two decisions:</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *  - [&#39;no-selling&#39;] (opt-out cookie with any value found) - always an explicit decision (an opt-out cookie has been set)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *  - [&#39;no-selling&#39;, &#39;yes-selling&#39;] (no opt-out cookie found) - always an implicit decision (no cookie is set)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * The (case-sensitive) name of the opt-out cookie is taken from the &#39;Vendor ID&#39; field in the UI.</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * For more, see https://docs.tealium.com/iq-tag-management/consent-integrations/supported-vendors/#opt-out-cookie--gpc </span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * </span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * (The above integration was simplified for this example - the GPC logic was removed)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Custom Example&#39;</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;v1.0.0&#39;</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span></span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  // pull whatever&#39;s been entered as the Vendor ID in the UI for the single relevant integration</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  var optOutCookieName = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map &amp;&amp; Object.keys(window.tealiumCmpIntegration.map)[0]) || &#39;error-no-map-found-so-no-cookie-name-available&#39;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  */</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean, true if the CMP is running the &#39;Opt-in&#39; model (GDPR style)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// This opt-out cookie example only supports the Opt-out model (CCPA/CPRA style), so this is hardcoded to return false.</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return false</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return some CMP-specific raw object (must be an object) that contains the needed information about the decision.</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// This output is used as the cmpRawOutput argument in functions below.</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // we can&#39;t use any tag manager functionality here because it hasn&#39;t been allowed to load yet</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var readCookie = function (name) {</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var reString = &#39;(?:(?:^|.*;\\s*)&#39; + name + &#39;\\s*\\=\\s*([^;]*).*$)|^.*$&#39;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var re = new RegExp(reString)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var cookieValue = document.cookie.replace(re, &#39;$1&#39;)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      if (!cookieValue) return undefined</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      return cookieValue</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    }</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var cookie = readCookie(optOutCookieName) || &#39;opt-out-cookie-not-found&#39;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return { cookieState: cookie } // we have to return an object for the integration to work - this lets us add in other properties (like Global Privacy Control) later</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a string that helps Tealium iQ confirm that it&#39;s got the right CMP configuration (and not one from some other page / customer of the CMP)</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return optOutCookieName</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean - true if the raw decision meets our expectations for the CMP</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return typeof cmpRawOutput === &#39;object&#39; &amp;&amp; typeof cmpRawOutput.cookieState === &#39;string&#39;</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean - true if the consent decision was explicitly made by the user</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // The only way we can tell if the decision is explicit in this example is to check if an opt-out cookie is set</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    if ((typeof cmpRawOutput === &#39;object&#39; &amp;&amp; typeof cmpRawOutput.cookieState === &#39;string&#39; &amp;&amp; cmpRawOutput.cookieState !== &#39;opt-out-cookie-not-found&#39;)) return true</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return false</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return an array of consented vendors/purposes - these should match the Purposes in Tealium iQ exactly</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var consentDecision = [&#39;no-selling&#39;] // tags that don&#39;t sell/share data are always allowed</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // very simple check for a non-empty opt-out cookie to determine if tags that sell data are allowed</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    if (cmpRawOutput.cookieState === &#39;opt-out-cookie-not-found&#39;) {</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      consentDecision.push(&#39;yes-selling&#39;) // we don&#39;t see a cookie, so we have to assume selling/sharing data is fine</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    }</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return consentDecision</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// You shouldn&#39;t need to change this function, or anything below it</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span>})(window)</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  // Debugging / development output - uncomment this block, then paste/repaste this entire template on your test pages</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  var outputString = `${tealiumCmpIntegration.cmpCheckIfOptInModel() ? &#39;Opt-in&#39; : &#39;Opt-out&#39;} Model</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  Checks:</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - id:          ${tealiumCmpIntegration.cmpFetchCurrentLookupKey()}</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - well-formed: ${tealiumCmpIntegration.cmpCheckForWellFormedDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - explicit:    ${tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - group list:  ${JSON.stringify(tealiumCmpIntegration.cmpConvertResponseToGroupList(tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  `</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  console.log(outputString);</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">*/</span></span></span></code></pre></div>"
        }  

    ]
}
