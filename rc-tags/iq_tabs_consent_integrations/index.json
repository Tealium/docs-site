
{
    "kind": "term",
    "name": "iq_tabs_consent_integrations",
    "count": 9,
    "items": [

    
        {
            "weight": "115",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-register/",
            "title": "Tealium consent register",
            "body": "<p>Tealium consent register is used by <a href=\"/iq-tag-management/consent/consent-integrations/about/\">Tealium iQ Consent Integrations</a> and <a href=\"/iq-tag-management/consent/consent-management/about/\">Consent Manager</a> to expose consent signals across your website code. It also gives the Google consent mode tag direct access to those signals, enabling appropriate reactions.</p>\n<h2 id=\"key-features\">Key features</h2>\n<ul>\n<li><strong>Universal consent events</strong>: The latest Consent Manager (from <code>cmGeneral</code> template v3.1.0) and Consent Integrations (from framework template v1.2.0) use the consent register to emit events when consent settings are loaded or updated. These changes are accessible globally on the page in the <code>window.tealiumConsentRegister</code> object. For more information, see <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events\">MDN Web Docs: Introduction to events</a>.</li>\n<li><strong>Support for all consent signals</strong>: Emits and retains both <code>implicit</code> and <code>explicit</code> consent signals.</li>\n<li><strong>Event listening</strong>: Any tag or script on the page can listen for <code>consent_loaded</code> and <code>consent_changed</code> events. This enables responsive actions based on consent status changes. For more information, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">MDN Web Docs: EventTarget addEventListener() method</a>.</li>\n<li><strong>Solid foundation for expansion</strong>: Tealium consent register introduces a robust new system that offers advanced customers significant customization options and will streamline the addition of new features in the future.</li>\n</ul>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>Tealium consent register improves consent management by allowing consent decisions to be shared across your website&rsquo;s code. This allows functionalities like Google consent mode to access these decisions for appropriate actions. It acts as a standardization layer for consent signals, and makes those standardized consent signals easily available on your webpage.</p>\n<h2 id=\"google-consent-mode\">Google consent mode</h2>\n<p>For essential background and context, see <a href=\"/iq-tag-management/consent/google-consent-mode/\">Google consent mode</a>. It&rsquo;s important to consult with your leadership and legal team regarding the appropriate timing and method for integrating Google tags into your page.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>Deactivate any existing consent mode features from your CMP to prevent conflicts.</li>\n<li>Update to the latest version of either the Consent Integrations framework or the Consent Manager <code>cmGeneral</code> template, based on your use case.</li>\n<li>Add a JavaScript extension for consent mode mappings. For details, see <a href=\"/iq-tag-management/consent/google-consent-mode/#consent-purpose-mapping\">consent purpose mapping</a>.</li>\n<li>Install the <a href=\"/client-side-tags/google-consent-mode-tag/\">Google consent mode tag</a>. No additional mappings are required when using the variable names from the consent purpose mapping extension.</li>\n<li>Categorize the consent mode tag (and all related Google tags) appropriately. Ensure that they are always allowed to fire if you&rsquo;re implementing advanced consent mode, or only allowed to fire with appropriate consent, depending on the approach your organization is taking.</li>\n</ul>\n<h2 id=\"advanced-use-cases\">Advanced use cases</h2>\n<h3 id=\"access-consent-decisions\">Access consent decisions</h3>\n<p>The <code>window.tealiumConsentRegister.currentDecision</code> object enables direct access to the current consent decision on the webpage. This streamlines the implementation of custom actions such as:</p>\n<ul>\n<li>Sending opt-out events to vendors to enable removal from audiences and complete downstream deactivation.</li>\n<li>Adding an extra layer of consent logging on top of what your CMP offers using a Tealium iQ extension.</li>\n<li>Tracking consent changes, enabling access to the current decision through a JavaScript API call.</li>\n</ul>\n<p>For Consent Integrations and Consent Manager, the purpose IDs in the array will be different for each specific configuration.</p>\n<pre tabindex=\"0\"><code>// get the current decision\nvar currentDecision = window.tealiumConsentRegister.currentDecision\n\n// get all decisions registered since the current page loaded\nvar allDecisionsOnThisPage = window.tealiumConsentRegister.decisions\n</code></pre><p><strong>Consent Integrations example using OneTrust</strong></p>\n<p>In this example, we start in the opt-in model (implicit decision), then opt in and opt out for illustration.</p>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-register-and-consent-integrations.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-register-and-consent-integrations.png\"\n         alt=\"Consent Integrations example using OneTrust\"\n         title=\"Consent Integrations example using OneTrust\"/>\n    </a>\n</figure>\n<h3 id=\"monitor-consent-changes\">Monitor consent changes</h3>\n<p>The consent register emits events when <code>implicit</code> or <code>explicit</code> consent signals are first detected on the page, when the consent decision is updated.</p>\n<pre tabindex=\"0\"><code>// Set example event listeners to surface consent changes\n\n// Can be implemented to run once per page code - You an use Pre Loader or DOM Ready, depending on the use case\nwindow.addEventListener(&#39;consent_loaded&#39;, (event) =&gt; {\n  console.log(&#39;Consent loaded:&#39;, event.detail.decision);\n});\n\nwindow.addEventListener(&#39;consent_updated&#39;, (event) =&gt; {\n  console.log(&#39;Consent updated:&#39;, event.detail.decision);\n});\n</code></pre><p><strong>Consent Manager example of a European user opting in on initial landing</strong></p>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-register-and-consent-manager.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-register-and-consent-manager.png\"\n         alt=\"Consent Manager example\"\n         title=\"Consent Manager example\"/>\n    </a>\n</figure>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>For transparency, these decisions always includes an <code>always_on</code> category, since <code>omitted</code> tags are always allowed.</p>\n<h3 id=\"check-if-a-tag-is-allowed-to-fire\">Check if a tag is allowed to fire</h3>\n<p>The <code>isTagAllowed</code> method lets you check if a specific Tealium iQ tag is permitted to fire based on the current consent settings and user decision. The primary use case for this method is fallback behavior when consent is revoked for a tag previously allowed to fire.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span>window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">isTagAllowed</span>(<span style=\"color:#a6e22e\">tagId</span>);\n</span></span></code></pre></div><ul>\n<li>\n<p><code>tagId</code> (integer or string): The UID of the tag to check, shown on the tag in Tealium iQ. This method accepts a number or a string that can be converted to a number (for example, &ldquo;7&rdquo;).</p>\n</li>\n<li>\n<p>Returns a boolean: <code>true</code> if the tag has the required consent, <code>false</code> if the tag is not allowed, doesn’t exist, or consent isn&rsquo;t granted.</p>\n<p>If neither condition applies, or if the <code>tagId</code> doesn&rsquo;t exist, the method returns <code>false</code>.</p>\n</li>\n</ul>\n<h4 id=\"opt-out-handling\">Opt-out handling</h4>\n<p>You can integrate the <code>isTagAllowed</code> method into Tealium iQ tag templates by editing the template or using a tag-scoped extension. Set a callback to handle vendor-specific opt-out actions when consent is revoked. If a tag was previously allowed but later blocked due to a consent change, the callback can:</p>\n<ul>\n<li>Trigger an opt-out request to the vendor.</li>\n<li>Remove the vendor’s object from the page to stop further data transmission.</li>\n<li>Delete vendor-specific cookies.</li>\n<li>Perform other relevant cleanup actions.</li>\n</ul>\n<p>Add these callbacks in a tag-scoped extension or directly in the tag template.</p>\n<h4 id=\"example-integration-within-a-tag-tag-scoped-extension-hardcoded-uid\">Example integration within a tag (tag-scoped extension, hardcoded UID)</h4>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Make sure to only add the callback once (use a new tag-scoped boolean)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">u</span>.<span style=\"color:#a6e22e\">consent_callback_initialized</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#a6e22e\">u</span>.<span style=\"color:#a6e22e\">consent_callback_initialized</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">addEventListener</span>(<span style=\"color:#e6db74\">&#39;consent_updated&#39;</span>, (<span style=\"color:#a6e22e\">event</span>) =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">exists</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span> <span style=\"color:#f92672\">&amp;&amp;</span>\n</span></span><span style=\"display:flex;\"><span>                 <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">isTagAllowed</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#34;function&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">exists</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">isTagAllowed</span>(<span style=\"color:#ae81ff\">7</span>)) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Opt-out signal triggered for tag 7.&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// Implement appropriate, vendor-specific opt-out logic here,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      <span style=\"color:#75715e\">// deduplicating if needed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    }\n</span></span><span style=\"display:flex;\"><span>  });\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><h4 id=\"example-integration-within-a-tag-template-code-dynamic-uid\">Example integration within a tag (template code, dynamic UID)</h4>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>The string <code>##UTID##</code> is a dynamic placeholder that represents the tag&rsquo;s unique ID. This value is automatically replaced by Tealium with the actual tag ID at runtime. You do not need to manually replace <code>##UTID##</code> with your own value.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Make sure to only add the callback once (use a new tag-scoped boolean)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">u</span>.<span style=\"color:#a6e22e\">consent_callback_initialized</span>) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#a6e22e\">u</span>.<span style=\"color:#a6e22e\">consent_callback_initialized</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">addEventListener</span>(<span style=\"color:#e6db74\">&#39;consent_updated&#39;</span>, (<span style=\"color:#a6e22e\">event</span>) =&gt; {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">exists</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span> <span style=\"color:#f92672\">&amp;&amp;</span>\n</span></span><span style=\"display:flex;\"><span>                 <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">isTagAllowed</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#34;function&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">exists</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">isTagAllowed</span>(<span style=\"color:#e6db74\">&#34;##UTID##&#34;</span>)) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Opt-out signal triggered for tag &#34;</span> <span style=\"color:#f92672\">+</span> <span style=\"color:#e6db74\">&#34;##UTID##&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// Implement appropriate, vendor-specific opt-out logic here,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      <span style=\"color:#75715e\">// deduplicating if needed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    }\n</span></span><span style=\"display:flex;\"><span>  });\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><h2 id=\"consent-events-and-listeners-flow-diagram\">Consent events and listeners flow diagram</h2>\n<p>A simplified overview of the flows to illustrate the new events and listeners.</p>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-register-flow.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-register-flow.png\"\n         alt=\"Consent Integrations decision flow\"\n         title=\"Consent Integrations decision flow\" width=\"1500\" height=\"2000\"/>\n    </a>\n</figure>\n<h2 id=\"suppress-tealium-consent-register\">Suppress Tealium consent register</h2>\n<p>You can suppress the consent register by setting the <code>suppressConsentRegister</code> flag in a Pre Loader extension.</p>\n<p>To suppress the consent register, add the following code in a Pre Loader-scoped JavaScript Code Extension:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-javascript\" data-lang=\"javascript\"><span style=\"display:flex;\"><span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {};\n</span></span><span style=\"display:flex;\"><span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">suppressConsentRegister</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span></code></pre></div><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Use this setting cautiously, as it will suppress <strong>all</strong> consent register functionalities.</p>\n"
        }  

    , 
        {
            "weight": "120",
            "url": "https://docs.tealium.com/iq-tag-management/consent/google-consent-mode/",
            "title": "Google consent mode",
            "body": "<p>Google consent mode offers two approaches to manage user consent for data collection: <strong>Basic consent mode</strong> and <strong>Advanced consent mode</strong>. Understanding these modes is crucial for complying with data privacy regulations and optimizing data collection strategies.</p>\n<ul>\n<li>\n<p><strong>Basic consent mode</strong>: The traditional approach where tags and connector actions are blocked if user consent is not granted. This prevents unauthorized data collection, including personally identifiable information (PII), without consent.</p>\n</li>\n<li>\n<p><strong>Advanced consent mode</strong>: This approach suggests loading Google tags regardless of consent status and signaling the user&rsquo;s consent decision to Google. Tags then adapt by doing either of the following:</p>\n<ul>\n<li>Using a cookie-less endpoint for anonymous data collection from users who haven&rsquo;t consented to tracking.</li>\n<li>Using a standard endpoint for users who have provided consent.</li>\n</ul>\n<p>This advanced strategy aims to maximize data collection for analytics and ad conversions while respecting user consent for the use of PII.</p>\n</li>\n</ul>\n<p>It is important to consult with your legal and leadership teams to decide which consent mode aligns with your policies: either blocking data collection without consent (Basic) or adopting Google’s method to collect anonymous data for visitors who haven&rsquo;t consented to standard tracking (Advanced).</p>\n<p>For more information, see <a href=\"https://support.google.com/google-ads/answer/10000067\">Google Ads Help: About consent mode</a>.</p>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>To implement Google consent mode, add a JavaScript Code extension to map consent choices to Google consent mode settings and set up the <a href=\"/client-side-tags/google-consent-mode-tag/\">Google Consent Mode tag</a> with default consent settings and category mappings from your consent management platform (CMP). As visitors make their consent choices, Google consent mode tag communicates these preferences to Google tags, which then chooses the appropriate data collection endpoint (default collection endpoint or the cookie-less endpoint) to transmit data to Google.</p>\n<p>In both basic and advanced consent modes, you can always fire the Google Consent Mode tag since it does not transmit any data on its own. Instead, it provides signals for other tags to respond to.</p>\n<h2 id=\"consent-purpose-mapping\">Consent purpose mapping</h2>\n<p>To map end-user consent choices to Google consent mode settings, you need a JavaScript Code extension. Use this extension to capture the end user&rsquo;s current consent decision for various purposes or vendors and to assign a status of either <code>granted</code> or <code>denied</code> (or <code>true</code> / <code>false</code> in specific scenarios) to the corresponding Google consent mode purpose or setting.</p>\n<h3 id=\"javascript-extension-template\">JavaScript extension template</h3>\n<p>To set up the JavaScript extension, use the following template code. This should be executed after load rules and set to run always:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// After Load Rules - Run Always\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">consent_decision</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">tealiumConsentRegister</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">currentDecision</span>) <span style=\"color:#f92672\">||</span> [];\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_ad_storage_consent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;granted&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;denied&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_ad_user_data_consent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;granted&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;denied&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_analytics_storage_consent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;granted&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;denied&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_ad_personalization_consent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;granted&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;denied&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_ads_data_redaction</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;true&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;false&#39;</span>;\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">google_url_passthrough</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">&lt;</span><span style=\"color:#a6e22e\">your</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">logic</span><span style=\"color:#f92672\">-</span><span style=\"color:#a6e22e\">here</span><span style=\"color:#f92672\">&gt;</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;true&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;false&#39;</span>;\n</span></span></code></pre></div><p>Replace <code>&lt;your-logic-here&gt;</code> with conditions that evaluate to either <code>granted</code> or <code>denied</code>, <code>true</code> or <code>false</code> as appropriate, based on the user&rsquo;s consent.</p>\n<h3 id=\"examples\">Examples</h3>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Your implementation will vary depending on your consent settings.</p>\n<h4 id=\"example-for-consent-manager\">Example for Consent Manager</h4>\n<p>If you are using Consent Manager, the logic to determine consent status might be similar to this:</p>\n<pre tabindex=\"0\"><code>// After Load Rules - Run Always\nb.consent_decision = (tealiumConsentRegister &amp;&amp; tealiumConsentRegister.currentDecision) || [];\nb.google_ad_storage_consent = b.consent_decision.indexOf(&#39;display_ads&#39;) !== -1  ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ad_user_data_consent = b.consent_decision.indexOf(&#39;personalization&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_analytics_storage_consent = b.consent_decision.indexOf(&#39;analytics&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ad_personalization_consent = b.consent_decision.indexOf(&#39;personalization&#39;) !== -1 &amp;&amp; b.consent_decision.indexOf(&#39;display_ads&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ads_data_redaction = b.consent_decision.indexOf(&#39;personalization&#39;) === -1 || b.consent_decision.indexOf(&#39;display_ads&#39;) === -1 ? &#39;true&#39; : &#39;false&#39;;\nb.google_url_passthrough = b.consent_decision.indexOf(&#39;personalization&#39;) !== -1 ? &#39;true&#39; : &#39;false&#39;;\n</code></pre><h4 id=\"example-for-consent-integrations-with-onetrust\">Example for Consent Integrations with OneTrust</h4>\n<p>If you are using Consent Integrations and OneTrust, the logic might be similar to this:</p>\n<pre tabindex=\"0\"><code>// After Load Rules - Run Always\nb.consent_decision = (tealiumConsentRegister &amp;&amp; tealiumConsentRegister.currentDecision) || [];\nb.google_ad_storage_consent = b.consent_decision.indexOf(&#39;C0004&#39;) !== -1  ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ad_user_data_consent = b.consent_decision.indexOf(&#39;C0004&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_analytics_storage_consent = b.consent_decision.indexOf(&#39;C0001&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ad_personalization_consent = b.consent_decision.indexOf(&#39;C0004&#39;) !== -1 &amp;&amp; b.consent_decision.indexOf(&#39;C0003&#39;) !== -1 ? &#39;granted&#39; : &#39;denied&#39;;\nb.google_ads_data_redaction = b.consent_decision.indexOf(&#39;C0004&#39;) === -1 || b.consent_decision.indexOf(&#39;C0003&#39;) === -1 ? &#39;true&#39; : &#39;false&#39;;\nb.google_url_passthrough = b.consent_decision.indexOf(&#39;C0004&#39;) !== -1 ? &#39;true&#39; : &#39;false&#39;;\n</code></pre><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>If you use these exact variable names, no additional mapping is required. The latest version of the Google consent mode tag uses these variables by default.</p>\n<h3 id=\"choosing-consent-parameters-for-extensions\">Choosing consent parameters for extensions</h3>\n<p>To identify the consent parameters to use in the JavaScript extension, follow these steps:</p>\n<ol>\n<li>\n<p>Clear your browser&rsquo;s cookies and cache.</p>\n</li>\n<li>\n<p>Visit your website or staging environment with the latest Consent Manager or Consent Integrations template active.</p>\n</li>\n<li>\n<p>If using an opt-in model (GDPR style), accept all tracking in the consent dialog.</p>\n</li>\n<li>\n<p>Open your browser&rsquo;s developer tools and navigate to the console.</p>\n</li>\n<li>\n<p>To view the <code>TealiumConsentRegister</code> object, enter <code>tealiumConsentRegister</code>. This object contains the <code>currentDecision</code> and <code>decisions</code> arrays. The <code>currentDecision</code> array includes the currently allowed purposes.</p>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-register-and-consent-integrations.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-register-and-consent-integrations.png\"\n             alt=\"Consent Integrations example using OneTrust\"\n             title=\"Consent Integrations example using OneTrust\"/>\n        </a>\n    </figure>\n</li>\n</ol>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>The <code>currentDecision</code> object lists the consent options available for use in your logic with <code>b.consent_decision.indexOf('&lt;Value to change&gt;')</code>.</p>\n"
        }  

    , 
        {
            "weight": "465",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/about/",
            "title": "About Consent Integrations",
            "body": "<p>The new Consent Enforcement Framework is a core feature of Tealium iQ Consent Integrations that enables robust and reliable enforcement of consent signals captured outside of Tealium iQ Tag Management. This feature blocks tracking when customer consent is not given or is ambiguous.</p>\n<p>Tealium iQ Consent Integrations provides the option for both opt-in (GDPR-style) and opt-out (CCPA-style) enforcement patterns for the supported consent management platforms (CMPs). Integrations can be written in the form of templates to support most CMPs or custom solutions.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Tealium iQ Consent Integrations has a dependency on the latest utag version 4.49. To enable support in previous versions, edit the <strong>uTag Loader</strong> template and add <code>##UTCM##</code> under the <code>##UTGEN##</code>publish engine flag.</p>\n<p>The following terms are related to the consent integrations framework:</p>\n<ul>\n<li><strong>Purpose</strong> - A specific data use purpose to which your website users can consent (or withhold consent).</li>\n<li><strong>Purpose group</strong> - A list of purposes. A representation of an enforcement policy in the form of a group of consent purposes to which tags are assigned.</li>\n<li><strong>Exemption</strong> - A case where no enforcement is necessary and no tags need to be blocked based on consent decisions. Enforcement exemptions differ from the behavior when no consent integration enforcement rules apply. Unless there&rsquo;s an explicit exemption, or matching consent integration and the appropriate consent decision, no tags are allowed to fire.</li>\n<li><strong>Enforcement rule</strong> - Rules that determine when to enforce a consent integration or exemption.</li>\n<li><strong>Consent decision</strong> - An array of purposes that have been consented to. Consent decision is determined with a <code>type</code> attribute and is either <code>explicit</code> or <code>implicit</code>, depending on whether the user has made an active decision (<code>explicit</code>) or not (<code>implicit</code>).</li>\n<li><strong>Implicit decision</strong> - A decision inferred from a user&rsquo;s behavior. By visiting a site, a user consents to the necessary tags as described in the site’s privacy policy. A user can object to the sale of their data, but by default this is enabled (there is an implicit &lsquo;it&rsquo;s OK, to share/sell my data&rsquo; decision).</li>\n<li><strong>Explicit decision</strong> - A clear and precise consent decision by a user about what tracking they consent to.</li>\n<li><strong>Integration</strong> A set of features and configurations (pre-loaded or custom) that capture a consent decision from a specified CMP. An integration is associated with a purpose group.</li>\n</ul>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>Tealium iQ Consent Integrations enables you to integrate with supported non-Tealium consent management platforms. Your CMP prompts end-users for purpose-based consent as needed, and then captures and stores those user consent decisions. When an integration is active, tags must be assigned to purposes within a purpose group before they can be triggered. A purpose must be consented to before tags assigned to that purpose can be triggered.</p>\n<p>Each consent integration instructs the underlying framework how to communicate with a single CMP. Only one integration may be active simultaneously. However, you can use <strong>Enforcement Rules</strong> to conditionally apply multiple active integrations without conflict, if needed.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Tags that inject CMPs into the page are not compatible with Tealium iQ Consent Integration. Integrations require a signal from the CMP before tags are loaded. To integrate your CMP with Consent Integrations, use a Pre Loader or DOM Ready extension, or add the CMP to the page outside of Tealium iQ.</p>\n<p>You can set up an integration with a supported CMP in the Tealium iQ dashboard, or create a custom integration by editing the <strong>Custom template</strong>.</p>\n<h2 id=\"supported-integrations\">Supported integrations</h2>\n<p>See <a href=\"/iq-tag-management/consent/consent-integrations/supported-vendors/\">Supported Vendor Integrations</a> for a full list of currently supported integrations.</p>\n<h2 id=\"tag-refire\">Tag refire</h2>\n<p>Each tag has a <strong>Tag Refire</strong> switch in the <strong>Map Tags</strong> screen:</p>\n<figure><a class=\"slb\" href=\"/images/early-access/map-tags.png\"><img src=\"https://docs.tealium.com/images/early-access/map-tags.png\"\n         alt=\"map_tags.png\"\n         title=\"map_tags.png\" width=\"790\" height=\"417\"/>\n    </a>\n</figure>\n<p>If you enable this option, the tag can be triggered up to twice for each user action (once with the implicit decision and once with the explicit decision). Tags are not triggered if the mapped purposes are not consented to.</p>\n<p>Most tags don&rsquo;t need to be triggered again if they have consent in each of these cases. Triggering tags a second time might result in double tracking, which should be avoided.</p>\n<p>Accounts with server-side connectors (especially event connectors) can benefit from refiring the Tealium Collect tag and using the <code>tci.purposes_with_consent_unprocessed</code> attribute to ensure that server-side connectors are not refired for the same event. Using the <code>tci.purposes_with_consent_unprocessed</code> attribute allows server-side connectors to trigger as quickly as possible without duplication.</p>\n<h2 id=\"server-side-attributes---using-collect-with-consent-integrations\">Server-side attributes - using Collect with Consent Integrations</h2>\n<p>Tealium Collect, like all other tags, must be mapped to a consented purpose. However, the <code>refiringAllowed</code> option allows tags to be refired on new decisions. This process indicates that the tag is being used for a variety of server-side purposes, and available server-side filters and logic are used to ensure that the signal is only processed appropriately while allowing it to refire.</p>\n<p>Depending on which server-side tools you use, Tealium Collect is triggered with the following event-level attributes for each event:</p>\n<ul>\n<li><code>tci.purposes_with_consent_unprocessed</code> (with refiring)</li>\n<li><code>tci.purposes_with_consent_all</code> (without refiring)</li>\n</ul>\n<h2 id=\"accessing-the-consent-decision-within-tealium-iq\">Accessing the consent decision within Tealium iQ</h2>\n<p>Consent decisions are added to the data layer for each event. These variables can be used in tags and are automatically sent by the Tealium Collect tag, but are not directly available in extensions.</p>\n<ul>\n<li><code>tci.consent_type</code> - The consent decision type (<code>implicit</code> or <code>explicit</code>).</li>\n<li><code>tci.purposes_with_consent_all</code> - The full array of both processed and unprocessed consented purposes.</li>\n<li><code>tci.purposes_with_consent_processed</code> - The array of processed consented purposes.</li>\n<li><code>tci.purposes_with_consent_unprocessed</code> - The array of unprocessed consented purposes.</li>\n</ul>\n<h3 id=\"accessing-the-consent-decision-from-extensions\">Accessing the consent decision from extensions</h3>\n<p>To access the current consent decision object in an extension, use the method <code>tealiumCmpIntegration.GetCurrentConsentDecision()</code>.</p>\n<p>The following command adds the current consent decision to the <code>b</code> object:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">current_consent_decision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">getCurrentConsentDecision</span>()\n</span></span></code></pre></div><h2 id=\"using-the-javascript-console\">Using the JavaScript console</h2>\n<p>When active, you can interact with a consent integration in the JavaScript console on pages where utag.js (Tealium iQ) is implemented. Using the JavaScript console allows you to get the current consent decision that is retrieved from the CMP on every event. The consent decision is never cached, which ensures that it is always up to date.</p>\n<p>For more information, see <a href=\"/iq-tag-management/consent/consent-integrations/validate-and-debug/\">Validate and debug consent integrations</a>.</p>\n<h2 id=\"consent-register\">Consent register</h2>\n<p>Consent integrations can use the Tealium consent register to emit events when consent settings are loaded or updated. These changes are available globally on the page, making it easier for you to manage consent decisions across your website. For more information, see <a href=\"/iq-tag-management/consent/consent-register/\">Tealium consent register</a>.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Consent register requires the consent integrations framework template version 1.2.0 or later. To update this template, see <a href=\"/iq-tag-management/templates/manage/#update-a-template\">Update a template</a>.</p>\n"
        }  

    , 
        {
            "weight": "466",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/consent-integrations-decision-flow/",
            "title": "Consent Integrations decision flow",
            "body": "<p>Tealium iQ Consent Integrations provides the option for both opt-in (GDPR-style) and opt-out (CCPA-style) enforcement patterns for the supported consent management platforms (CMPs). The Consent Integrations decision flow in the diagram below shows how user consent decisions are handled in these enforcement patterns.</p>\n<h3 id=\"consent-integrations-consent-flow\">Consent Integrations consent flow</h3>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-integrations-consent-flow.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-integrations-consent-flow.png\"\n         alt=\"Consent Integrations decision flow\"\n         title=\"Consent Integrations decision flow\" width=\"1500\" height=\"2000\"/>\n    </a>\n</figure>\n<h3 id=\"11---fire-tags-detail\">1.1 - Fire tags detail</h3>\n<p><strong>For each tag and event:</strong></p>\n<figure><a class=\"slb\" href=\"/images/iq-tag-management/consent-integrations-fire-tags.png\"><img src=\"https://docs.tealium.com/images/iq-tag-management/consent-integrations-fire-tags.png\"\n         alt=\"Consent Integrations fire tags detail \"\n         title=\"Consent Integrations fire tags detail\"/>\n    </a>\n</figure>\n<h2 id=\"opt-in-model\">Opt-in model</h2>\n<p>Tealium iQ will not fire tags or set cookies until a consent decision is received from the CMP. If the expected CMP is not active on the page or Tealium iQ has not been consented, Tealium iQ will not run and no tags will be fired.</p>\n<p>If no consent decision is found when Tealium iQ loads, Tealium iQ consent integration polls until one is found.</p>\n<p>Until a consent decision is received from the CMP, all events are queued to be processed once a decision is found. If no consent decision is received, no events are processed.</p>\n<p>If a consent decision (<code>implicit</code> or <code>explicit</code>) is available from the CMP, the following actions are initiated by Tealium iQ Consent Integration:</p>\n<ul>\n<li>It first checks if Tealium iQ is allowed to run.</li>\n<li>If Tealium iQ is allowed to run, it checks if each tag can run.</li>\n<li>If the tags can run, it then triggers the tags according to consent for all queued events.</li>\n</ul>\n<p>If the consent decision is implicit, events are initially queued and tags with implicit consent are triggered. If the user subsequently makes an explicit consent decision, these queued events are then reprocessed to account for any newly consented tags. Tealium iQ Consent Integration searches for an explicit decision until one is found.</p>\n<p>If the consent decision is explicit, all queues are emptied and polling stops. Tags fired on an implicit consent are not re-fired when the explicit consent decision is processed unless tag refire is enabled and there are new consent purposes to process.</p>\n<p>When a user reopens the interactive CMP layer and makes a new explicit consent decision, previous events are not reprocessed with the new consent decision.</p>\n<p>For new events processed after Tealium iQ is first loaded, the new consent decision is retrieved from the CMP as each event is processed by Tealium iQ to ensure that the CMP is treated as a universal source of truth.</p>\n<h2 id=\"opt-out-model\">Opt-out model</h2>\n<p>The opt-out model is similar to the opt-in model, but explicit decision is not polled as it is more restrictive than the default setting (CCPA/CPRA style) in the opt-out model.</p>\n"
        }  

    , 
        {
            "weight": "467",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/manage/",
            "title": "Manage Consent Integrations and purpose groups",
            "body": "<p>In the Tealium iQ Tag Management dashboard, the Consent Integrations screen provides the ability to add and configure consent integrations.</p>\n<h2 id=\"add-an-integration\">Add an integration</h2>\n<p>Follow the steps below to add an integration:</p>\n<ol>\n<li>Go to <strong>iQ Tag Management &gt; Consent Integrations.</strong></li>\n<li>Click <strong>+ Add Integration</strong> to open the integration configuration screen.</li>\n</ol>\n<h3 id=\"step-1-configure-integrations\">Step 1: Configure integrations</h3>\n<ol>\n<li>In the <strong>Configure Integrations</strong> slideout, enter a descriptive name for your integration.</li>\n<li>Select a vendor from the <strong>Vendor</strong> list. Depending on your vendor selection, additional fields may be required, usually an identifier for the CMP configuration you want to integrate with.</li>\n<li>(Optional) To configure your integration with the default vendor categories, select <strong>Create new Purpose Group with {Vendor} Default Categories</strong>.</li>\n<li>Enter a description.</li>\n<li>Click <strong>Next</strong>.</li>\n</ol>\n<h3 id=\"step-2-enforcement-rules\">Step 2: Enforcement Rules</h3>\n<p>Use the drop-down list to create a new rule, or select an existing rule. This rule determines when to enforce a consent integration.</p>\n<p>To create a new rule:</p>\n<ol>\n<li>Click <strong>+ New Rule</strong>.</li>\n<li>In the <strong>Add Rule</strong> slideout, add a <strong>Title</strong> for the load rule, and optional <strong>Notes</strong> if needed.</li>\n<li>Use the drop-down lists to select a <strong>Variable</strong> and an <strong>Operator</strong>, then enter a <strong>Value</strong>.</li>\n<li>To add another condition using AND logic, do one of the following:\n<ul>\n<li>Click <strong>+</strong> next to the default conditional statement.</li>\n<li>To create a copy of a conditional statement using AND logic by clicking the row menu and selecting <strong>Duplicate Row</strong>.<br>\nThe duplicate conditional statement can be edited as needed.</li>\n</ul>\n</li>\n<li>To add another condition using OR logic, do one of the following:\n<ul>\n<li>Click <strong>+OR</strong>.</li>\n<li>Create a copy of a condition using OR logic by clicking the condition menu and selecting <strong>Duplicate</strong>.  The duplicate condition can be edited to create a new condition.</li>\n</ul>\n</li>\n<li>To remove a conditional statement from a condition, click the row menu and select <strong>Remove Row</strong>.</li>\n<li>Click <strong>Done.</strong></li>\n</ol>\n<h3 id=\"step-3-publish-locations\">Step 3: Publish locations</h3>\n<ol>\n<li>Select the environments where you want this integration&rsquo;s enforcement to apply.</li>\n<li>Click <strong>Next</strong>.</li>\n</ol>\n<h3 id=\"step-4-purpose-group\">Step 4: Purpose group</h3>\n<ol>\n<li>Select a purpose group for your integration from the <strong>Purpose Group</strong> drop-down list.\n<ul>\n<li>If you opted to configure your integration with the default vendor categories in step 1, complete the following steps and proceed to save your integration:\n<ol>\n<li>Select <strong>&lt;Vendor&gt; Default</strong> from the list.</li>\n</ol>\n</li>\n<li>If you did not opt to configure your integration with the default vendor categories in step 4:\n<ol>\n<li>Select <strong>+ New Purpose Group</strong> from the drop-down list.</li>\n<li>In the <strong>New Purpose Group</strong> dialog, click <strong>Create Purpose Group</strong>. You will be redirected to the <strong>New Purpose Group</strong> screen. Your progress in the <strong>Add Integration</strong> wizard is saved and you will be redirected back after configuring your purpose group.</li>\n<li>In the <strong>Purpose Group</strong> dialog, complete the steps in the <a href=\"#add-a-purpose-group\">Add a purpose group</a> section to add a purpose group.</li>\n<li>In the <strong>Add Integration</strong> wizard, select your purpose group from the <strong>Purpose Group</strong> drop-down list.\nYou will be redirected back to the <strong>Add Integration</strong> wizard to finish setting up your integration.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Click <strong>Save</strong> to create your new integration.</li>\n</ol>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>If you are using OneTrust default vendor categories for the first time, after creating your integration, follow the steps in <a href=\"#edit-a-purpose-group\">edit purpose group</a> to assign tags to the <strong>Default</strong> purpose group.</p>\n<h2 id=\"manage-purpose-groups\">Manage purpose groups</h2>\n<p>To manage your purpose groups, navigate to <strong>iQ Tag Management &gt; Consent Integrations &gt; Purpose Groups</strong> tab.</p>\n<h3 id=\"add-a-purpose-group\">Add a purpose group</h3>\n<p>Follow the steps below to add a purpose group:</p>\n<ol>\n<li>Go to <strong>iQ Tag Management &gt; Consent Integrations.</strong></li>\n<li>Click <strong>+ Add Purpose Group</strong> to open the purpose group configuration modals.</li>\n</ol>\n<h4 id=\"step-1-purpose-group\">Step 1: Purpose group</h4>\n<ol>\n<li>Enter a name and description.</li>\n<li>Click <strong>Next</strong>.</li>\n</ol>\n<h4 id=\"step-2-purposes\">Step 2: Purposes</h4>\n<ol>\n<li>Enter purpose name and description. Each purpose name must match the name of a consent category for the vendor you are integrating with.</li>\n<li>You can create multiple purposes in a purpose group. To add more purposes to your purpose group, click <strong>+ Add Purpose</strong>.</li>\n<li>Click <strong>Next</strong>.</li>\n</ol>\n<h4 id=\"step-3-tealium-iq-purpose\">Step 3: Tealium iQ purpose</h4>\n<ol>\n<li>Select a purpose to map to Tealium iQ from the <strong>Tealium Tag Purpose</strong>. Tealium iQ controls all tag operations and must be mapped to a purpose for any tags to function.</li>\n<li>Click <strong>Next</strong>.</li>\n</ol>\n<h4 id=\"step-4-map-tags\">Step 4: Map tags</h4>\n<p>All tags must be mapped to a purpose before they can be triggered.</p>\n<ol>\n<li>To map your tags to the newly created purposes, for each tag, click <strong>Assign/Map</strong> and select the purpose you want to map that tag with from the drop-down list.</li>\n<li>To enable or disable tag refire for each tag, toggle the <strong>OFF/ON</strong> button under the <strong>Tag Refire</strong> column. For more information about tag refire, <a href=\"/iq-tag-management/consent/consent-integrations/about/#tag-refire\">Tag refire</a>.</li>\n<li>Click <strong>Save</strong> to create your new purpose group.</li>\n</ol>\n<h3 id=\"edit-a-purpose-group\">Edit a purpose group</h3>\n<p>Follow the steps below to edit a purpose group:</p>\n<ol>\n<li>Click the options icon beside the purpose group you want to edit.</li>\n<li>Click <strong>Edit</strong> to open the purpose group configuration.</li>\n<li>Click the tab for the section you want to edit. To map tags to a new default purpose group, click <strong>Map Tags</strong>.</li>\n<li>Click <strong>Save</strong> to save your changes.</li>\n</ol>\n<p>For a step-by-step example of how to set up a supported vendor integration with Tealium iQ tag management, see <a href=\"/guides/supported-consent-integration/\">Consent Integration Guide</a>.</p>\n"
        }  

    , 
        {
            "weight": "470",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/supported-vendors/",
            "title": "Supported vendor integrations",
            "body": "<h2 id=\"how-it-works\">How it works</h2>\n<p>Tealium iQ Consent Integrations supports integration with various consent management platforms (CMPs). You can access relevant vendor-specific information from the user interface of the supported consent management platforms (CMP) or the web page. To keep this documentation reliable and user-friendly, this section only covers the steps to retrieve vendor specific information from the web page. For steps to retrieve your Vendor ID and Purposes in the user interface of each partner CMP, see the respective CMP documentation.</p>\n<p>To retrieve the relevant information from the web page, follow these steps:</p>\n<ol>\n<li>Visit your website where the CMP is implemented.</li>\n<li>Accept all tracking.</li>\n<li>Open the Developer Tools JavaScript console.</li>\n<li>Paste the CMP-specific code from the code snippets below into the Developer Tools JavaScript console.</li>\n<li>Enter the displayed <strong>Vendor ID</strong>, <strong>Purpose Keys</strong> and <strong>Purpose Names</strong> into your Consent Integration.</li>\n</ol>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>After you update your consent decision, paste the code again to see the latest interpretation.</p>\n<h2 id=\"integration-specific-instructions-and-code-snippets\">Integration-specific instructions and code snippets</h2>\n<h3 id=\"cookiebot\">Cookiebot</h3>\n<p>Test this snippet on <a href=\"https://www.cookiebot.com/\">cookiebot.com</a> or on your website by following the instructions in the <a href=\"#how-it-works\">How it works section</a> to check compatibility and get the information needed for integration.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cookiebotIntegration</span> (window) {\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Cookiebot&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;v1.0.0&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return a boolean, true if the CMP is running the &#39;Opt-in&#39; model (GDPR style)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Cookiebot</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">regulations</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">regulations</span>.<span style=\"color:#a6e22e\">gdprApplies</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;boolean&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">regulations</span>.<span style=\"color:#a6e22e\">gdprApplies</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return some CMP-specific raw object (must be an object) that contains the needed information about the decision.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#75715e\">// This output is used as the cmpRawOutput argument in functions below.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Cookiebot</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">hasResponse</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;boolean&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">consent</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return a string that helps Tealium iQ confirm that it&#39;s got the right CMP configuration (and not one from some other page / customer of the CMP)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>() {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Cookiebot</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">serial</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;string&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">Cookiebot</span>.<span style=\"color:#a6e22e\">serial</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return a boolean - true if the raw decision meets our expectations for the CMP\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;object&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span>  <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">stamp</span> <span style=\"color:#f92672\">===</span><span style=\"color:#e6db74\">&#39;string&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return a boolean - true if the consent decision was explicitly made by the user\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// The only way we can tell if the decision is explicit in this example is to check if an opt-out cookie is set\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">method</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;explicit&#39;</span><span style=\"color:#f92672\">?</span> <span style=\"color:#66d9ef\">true</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Should return an array of consented vendors/purposes - these should match the Purposes in Tealium iQ exactly\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">consentDecision</span> <span style=\"color:#f92672\">=</span> []\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// very simple check for a non-empty opt-out cookie to determine if tags that sell data are allowed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">necessary</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">consentDecision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;necessary&#39;</span>) <span style=\"color:#75715e\">// we don&#39;t see a cookie, so we have to assume selling/sharing data is fine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">preferences</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">consentDecision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;preferences&#39;</span>) <span style=\"color:#75715e\">// we don&#39;t see a cookie, so we have to assume selling/sharing data is fine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">marketing</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">consentDecision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;marketing&#39;</span>) <span style=\"color:#75715e\">// we don&#39;t see a cookie, so we have to assume selling/sharing data is fine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">statistics</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">consentDecision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;statistics&#39;</span>) <span style=\"color:#75715e\">// we don&#39;t see a cookie, so we have to assume selling/sharing data is fine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">consentDecision</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// You shouldn&#39;t need to change this function, or anything below it\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>  })(window)\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // Debugging / development output - uncomment this block, then paste/repaste this entire template on your test pages\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var outputString = `${tealiumCmpIntegration.cmpCheckIfOptInModel() ? &#39;Opt-in&#39; : &#39;Opt-out&#39;} Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      - id:          ${tealiumCmpIntegration.cmpFetchCurrentLookupKey()}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      - well-formed: ${tealiumCmpIntegration.cmpCheckForWellFormedDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      - explicit:    ${tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      - group list:  ${JSON.stringify(tealiumCmpIntegration.cmpConvertResponseToGroupList(tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    `\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    console.log(outputString);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  */</span>\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"didomi\">Didomi</h3>\n<p>Test this snippet on <a href=\"https://didomi.io\">didomi.io</a> or on your website by <a href=\"#how-it-works\">following the instructions above</a> to check compatibility and get the information needed for integration.</p>\n<p>The Didomi integration uses <strong>Vendors</strong> as <strong>Purposes</strong>.</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>The current integration with Didomi does not return implicitly consented purposes or vendors, as this was the only option available at the time. To support customers using older versions, and until an update allows a new approach, this integration unconditionally adds the purpose key <code>always_consented</code> to outbound consent decisions. This acts as a workaround to enable implicit triggering.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">didomiIntegration</span> (window) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Didomi&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;didomi-1.0.1&#39;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span>().<span style=\"color:#a6e22e\">notice</span>.<span style=\"color:#a6e22e\">type</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;optin&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getUserStatus</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> {}\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getUserStatus</span>()\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getVendors</span>()\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span>()\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">Didomi</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#e6db74\">&#39;&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">id</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">Didomi</span>.<span style=\"color:#a6e22e\">getConfig</span>().<span style=\"color:#a6e22e\">app</span>.<span style=\"color:#a6e22e\">deploymentId</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">id</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// do more checks than strictly necessary to confirm expectations\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span>.<span style=\"color:#a6e22e\">global</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">purposes</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;boolean&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">shouldConsentBeCollected</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span> <span style=\"color:#75715e\">// false after an explicit decision is made\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// Didomi handles checking each vendor&#39;s required purposes\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> []\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// enforce strings, even for IAB vendor ids\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">decision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">userStatus</span>.<span style=\"color:#a6e22e\">vendors</span>.<span style=\"color:#a6e22e\">global</span>.<span style=\"color:#a6e22e\">enabled</span>.<span style=\"color:#a6e22e\">map</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">vendorId</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> String(<span style=\"color:#a6e22e\">vendorId</span>)\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">decision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#e6db74\">&#39;always_consented&#39;</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">decision</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedVendors</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allVendors</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">vendorInfo</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">lookupObject</span> <span style=\"color:#f92672\">=</span> {}\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// WORKAROUND to allow implicit triggering until the Didomi bug is fixed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">lookupObject</span>.<span style=\"color:#a6e22e\">always_consented</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Always consented (to allow strictly needed triggering)&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">allVendors</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">vendorObject</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">allowedVendors</span>.<span style=\"color:#a6e22e\">indexOf</span>(String(<span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span>)) <span style=\"color:#f92672\">===</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>) <span style=\"color:#66d9ef\">return</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">lookupObject</span>[<span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;iab-vendor-&#39;</span> <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">vendorObject</span>.<span style=\"color:#a6e22e\">id</span>\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">lookupObject</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>})(window)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Debugging / development output - repaste the integration on your test pages each time you make a change to your consent state\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`CMP Found: </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> (</span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - id:          </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed: </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit:    </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - group list:  </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()))<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - name lookup: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()), <span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">6</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"digital-control-room\">Digital Control Room</h3>\n<p>Test this snippet on <a href=\"https://www.digitalcontrolroom.com/\">digitalcontrolroom.com</a> or on your website by following the instructions in the <a href=\"#how-it-works\">How it works section</a> to check compatibility and get the information needed for integration.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">digitalControlRoom</span>(window) {\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {};\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Digital Control Room&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;v1.0.0&#39;</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>;\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>;\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> (\n</span></span><span style=\"display:flex;\"><span>      window.<span style=\"color:#a6e22e\">_cookiereports</span> <span style=\"color:#f92672\">&amp;&amp;</span>\n</span></span><span style=\"display:flex;\"><span>      window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span> <span style=\"color:#f92672\">&amp;&amp;</span>\n</span></span><span style=\"display:flex;\"><span>      window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span>\n</span></span><span style=\"display:flex;\"><span>      window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consentExplicit</span>\n</span></span><span style=\"display:flex;\"><span>    );\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// This output is used as the cmpRawOutput argument in functions below.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>() {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">_cookiereports</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> {};\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">levels</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">loadConsent</span>();\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">levels</span>[<span style=\"color:#ae81ff\">1</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">output</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#e6db74\">&#34;levels&#34;</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">levels</span> };\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">output</span>.<span style=\"color:#a6e22e\">panels</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">output</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a string that helps Tealium iQ confirm that it&#39;s got the right CMP configuration (and not one from some other page / customer of the CMP)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>() {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (window.<span style=\"color:#a6e22e\">_cookiereports</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">&gt;</span> <span style=\"color:#ae81ff\">0</span>)\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">_cookiereports</span>.<span style=\"color:#a6e22e\">panels</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">storagekey</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#e6db74\">&#34;&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">levels</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;object&#34;</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">levels</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">null</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">panels</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;object&#34;</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">panels</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">null</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean - true if the consent decision was explicitly made by the user\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">panels</span>)\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">panels</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consentDecisionIsExplicit</span>();\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> [<span style=\"color:#e6db74\">&#34;1&#34;</span>];\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">levels</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">levels</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">consentDecision</span> <span style=\"color:#f92672\">=</span> [];\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">key</span> <span style=\"color:#66d9ef\">in</span> <span style=\"color:#a6e22e\">levels</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">levels</span>.<span style=\"color:#a6e22e\">hasOwnProperty</span>(<span style=\"color:#a6e22e\">key</span>)) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">levels</span>[<span style=\"color:#a6e22e\">key</span>] <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>) {\n</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#a6e22e\">consentDecision</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#a6e22e\">key</span>);\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">consentDecision</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// You shouldn&#39;t need to change this function, or anything below it\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#34;tiq-group-name-missing&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>);\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>})(window);\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Debugging / development output - uncomment this block, then paste/repaste this entire template on your test pages\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">var outputString = `${tealiumCmpIntegration.cmpCheckIfOptInModel() ? &#34;Opt-in&#34; : &#34;Opt-out&#34;} Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - id:          ${tealiumCmpIntegration.cmpFetchCurrentLookupKey()}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - well-formed: ${tealiumCmpIntegration.cmpCheckForWellFormedDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - explicit:    ${tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - group list:  ${JSON.stringify(tealiumCmpIntegration.cmpConvertResponseToGroupList(tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  `;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">console.log(outputString);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">*/</span>\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"onetrust\">OneTrust</h3>\n<p>Test this snippet on <a href=\"https://onetrust.com\">https://onetrust.com</a> or on your website by <a href=\"#how-it-works\">following the instructions above</a> to check compatibility and get the information needed for integration.</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>OneTrust provides a test mode to preview settings, activated by adding <code>-test</code> to your Vendor ID. To simplify integration, OneTrust Consent Integrations remove the <code>-test</code> suffix from Vendor IDs. For seamless integration, enter your Vendor ID without <code>-test</code> in the Tealium iQ Consent Integrations UI when setting up your integration, even if you use the <code>-test</code> suffix on your pages. Mismatched Vendor IDs between the Tealium iQ UI and your active integrations prevent Tealium iQ Tag Management from setting cookies or triggering tags on the page.</p>\n<p>OneTrust supports callback functions through <code>cmpAddCallbackToTriggerRecheck</code>. This enables Tealium iQ to receive real-time updates on consent status changes without polling. For more information, see <a href=\"/iq-tag-management/consent/consent-integrations/custom-cmp/#monitor-and-trigger-consent-updates\">Monitor and trigger consent updates</a>.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">oneTrust</span>(window) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// allows simple adjustment of the name/id behavior\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">useNamesInsteadOfKeys</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// allow the safety check of the expected Vendor ID to be circumvented to simplify setup at the cost of increased risk\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">disableVendorIdValidation</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// CMP specific functionality and labels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {};\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;OneTrust&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;onetrust-2.1.0&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>;\n</span></span><span style=\"display:flex;\"><span>    window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span>;\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">decision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>();\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">decision</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">decision</span>.<span style=\"color:#a6e22e\">ConsentModel</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">decision</span>.<span style=\"color:#a6e22e\">ConsentModel</span>.<span style=\"color:#a6e22e\">Name</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#34;opt-out&#34;</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>() {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">OneTrust</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">OneTrust</span>.<span style=\"color:#a6e22e\">GetDomainData</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;function&#34;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">OneTrust</span>.<span style=\"color:#a6e22e\">GetDomainData</span>();\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">dataLayer</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>() {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// newer versions of OneTrust, starting at the end of 2022 no longer have cctId defined\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#75715e\">// but this HTML attribute is the way OneTrust can tell\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">scrapeOneTrustVendorId</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> () {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allScripts</span> <span style=\"color:#f92672\">=</span> document.<span style=\"color:#a6e22e\">getElementsByTagName</span>(<span style=\"color:#e6db74\">&#34;script&#34;</span>);\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">re</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">/\\/otSDKStub\\.js(\\?.*)*$/</span>;\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">allScripts</span>.<span style=\"color:#a6e22e\">length</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">isOneTrustScript</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">re</span>.<span style=\"color:#a6e22e\">test</span>(<span style=\"color:#a6e22e\">allScripts</span>[<span style=\"color:#a6e22e\">i</span>].<span style=\"color:#a6e22e\">src</span>); <span style=\"color:#75715e\">// can be null\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>                <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">isOneTrustScript</span>) {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">fullVendorId</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">allScripts</span>[<span style=\"color:#a6e22e\">i</span>].<span style=\"color:#a6e22e\">getAttribute</span>(<span style=\"color:#e6db74\">&#34;data-domain-script&#34;</span>); <span style=\"color:#75715e\">// parse it from the script\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>                    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">fullVendorId</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#34;-test&#34;</span>)[<span style=\"color:#ae81ff\">0</span>];\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#e6db74\">&#34;error-not-found&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">disableVendorIdValidation</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#75715e\">// just return whatever Vendor ID is expected be active\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>            <span style=\"color:#66d9ef\">return</span> (window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span> <span style=\"color:#f92672\">&amp;&amp;</span> Object.<span style=\"color:#a6e22e\">keys</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span>)[<span style=\"color:#ae81ff\">0</span>]) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#34;(Vendor ID check disabled)&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">scrapeOneTrustVendorId</span>();\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;object&#34;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">Groups</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;[object Array]&#34;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;[object Array]&#34;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// treat things we don&#39;t understand as implicit\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">OneTrust</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">OneTrust</span>.<span style=\"color:#a6e22e\">IsAlertBoxClosed</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#34;function&#34;</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">OneTrust</span>.<span style=\"color:#a6e22e\">IsAlertBoxClosed</span>();\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// convert from array of objects to object for easier lookups\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">decisionString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">foundOneTrustEntry</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> {};\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&gt;=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">--</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> ([<span style=\"color:#e6db74\">&#34;OneTrustGroupsUpdated&#34;</span>, <span style=\"color:#e6db74\">&#34;OneTrustLoaded&#34;</span>].<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span>[<span style=\"color:#a6e22e\">i</span>].<span style=\"color:#a6e22e\">event</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">decisionString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span>[<span style=\"color:#a6e22e\">i</span>].<span style=\"color:#a6e22e\">OnetrustActiveGroups</span>;\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">foundOneTrustEntry</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">break</span>;\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">permittedPurposeIds</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">decisionString</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#34;,&#34;</span>).<span style=\"color:#a6e22e\">filter</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">group</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">group</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#34;&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        });\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">decisionString</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#34;&#34;</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">dataLayer</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#ae81ff\">1000</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">foundOneTrustEntry</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">permittedPurposeIds</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">tealiumConsentRegister</span>.<span style=\"color:#a6e22e\">getCurrentDecision</span>();\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">permittedPurposesWithNames</span> <span style=\"color:#f92672\">=</span> {};\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">Groups</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">groupInfo</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">permittedPurposeIds</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">groupInfo</span>.<span style=\"color:#a6e22e\">OptanonGroupId</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">permittedPurposesWithNames</span>[<span style=\"color:#a6e22e\">groupInfo</span>.<span style=\"color:#a6e22e\">OptanonGroupId</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">groupInfo</span>.<span style=\"color:#a6e22e\">GroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#34;ERROR-MISSING&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        })\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">permittedPurposesWithNames</span>; <span style=\"color:#75715e\">// keys are IDs, values are names\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">permittedPurposesWithNames</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>);\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">keysOrValues</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">useNamesInsteadOfKeys</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#34;values&#34;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;keys&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> Object[<span style=\"color:#a6e22e\">keysOrValues</span>](<span style=\"color:#a6e22e\">permittedPurposesWithNames</span>); <span style=\"color:#75715e\">// keys are IDs, values are names\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span>(<span style=\"color:#a6e22e\">triggerRecheck</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">triggerRecheck</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// An official Google dataLayer listener, pulled from https://github.com/google/data-layer-helper/blob/master/dist/data-layer-helper.js, see https://github.com/google/data-layer-helper\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        (<span style=\"color:#66d9ef\">function</span> () {<span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">         Copyright The Closure Library Authors.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">         SPDX-License-Identifier: Apache-2.0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        */</span>\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#e6db74\">&#39;use strict&#39;</span>;<span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">         jQuery v1.9.1 (c) 2005, 2012\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">         jQuery Foundation, Inc. jquery.org/license.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        */</span>\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">f</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">/\\[object (Boolean|Number|String|Function|Array|Date|RegExp|Arguments)\\]/</span>; <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">a</span>) { <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">null</span> <span style=\"color:#f92672\">==</span> <span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">?</span> String(<span style=\"color:#a6e22e\">a</span>) <span style=\"color:#f92672\">:</span> (<span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">f</span>.<span style=\"color:#a6e22e\">exec</span>(Object.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(Object(<span style=\"color:#a6e22e\">a</span>)))) <span style=\"color:#f92672\">?</span> <span style=\"color:#a6e22e\">a</span>[<span style=\"color:#ae81ff\">1</span>].<span style=\"color:#a6e22e\">toLowerCase</span>() <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#34;object&#34;</span> } <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">m</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>) { <span style=\"color:#66d9ef\">return</span> Object.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">hasOwnProperty</span>.<span style=\"color:#a6e22e\">call</span>(Object(<span style=\"color:#a6e22e\">a</span>), <span style=\"color:#a6e22e\">b</span>) } <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">n</span>(<span style=\"color:#a6e22e\">a</span>) { <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#34;object&#34;</span> <span style=\"color:#f92672\">!=</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">a</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">nodeType</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">==</span> <span style=\"color:#a6e22e\">a</span>.window) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span>; <span style=\"color:#66d9ef\">try</span> { <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">constructor</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">m</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#e6db74\">&#34;constructor&#34;</span>) <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">m</span>(<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">constructor</span>.<span style=\"color:#a6e22e\">prototype</span>, <span style=\"color:#e6db74\">&#34;isPrototypeOf&#34;</span>)) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span> } <span style=\"color:#66d9ef\">catch</span> (<span style=\"color:#a6e22e\">c</span>) { <span style=\"color:#66d9ef\">return</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span> } <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#66d9ef\">in</span> <span style=\"color:#a6e22e\">a</span>); <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#a6e22e\">m</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>) }; <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">p</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>) { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> {}, <span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">c</span>; <span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#34;.&#34;</span>); <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>; <span style=\"color:#a6e22e\">e</span><span style=\"color:#f92672\">++</span>)<span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">d</span>[<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">e</span>]] <span style=\"color:#f92672\">=</span> {}; <span style=\"color:#a6e22e\">d</span>[<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>]] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>; <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">c</span> } <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>) { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">_clear</span>, <span style=\"color:#a6e22e\">d</span>; <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#a6e22e\">d</span> <span style=\"color:#66d9ef\">in</span> <span style=\"color:#a6e22e\">a</span>) <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">m</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">d</span>)) { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">d</span>]; <span style=\"color:#e6db74\">&#34;array&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">e</span>) <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">?</span> (<span style=\"color:#e6db74\">&#34;array&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>]) <span style=\"color:#f92672\">||</span> (<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>] <span style=\"color:#f92672\">=</span> []), <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#a6e22e\">e</span>, <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>])) <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">n</span>(<span style=\"color:#a6e22e\">e</span>) <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">?</span> (<span style=\"color:#a6e22e\">n</span>(<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>]) <span style=\"color:#f92672\">||</span> (<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>] <span style=\"color:#f92672\">=</span> {}), <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#a6e22e\">e</span>, <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>])) <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">d</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">e</span> } <span style=\"color:#66d9ef\">delete</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">_clear</span> };<span style=\"color:#75715e\">/* Copyright 2012 Google Inc. All rights reserved. */</span>\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">r</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>, <span style=\"color:#a6e22e\">c</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">?</span> {} <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>; <span style=\"color:#e6db74\">&#34;function&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">listener</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>, <span style=\"color:#a6e22e\">listenToPast</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">c</span>, <span style=\"color:#a6e22e\">processNow</span><span style=\"color:#f92672\">:</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">0</span>, <span style=\"color:#a6e22e\">commandProcessors</span><span style=\"color:#f92672\">:</span> {} } <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">listener</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">listener</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">function</span> () { }, <span style=\"color:#a6e22e\">listenToPast</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">listenToPast</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span>, <span style=\"color:#a6e22e\">processNow</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">processNow</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">processNow</span>, <span style=\"color:#a6e22e\">commandProcessors</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">commandProcessors</span> <span style=\"color:#f92672\">||</span> {} }; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">l</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">listener</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">j</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">listenToPast</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">g</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> {}; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">f</span> <span style=\"color:#f92672\">=</span> []; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">commandProcessors</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">h</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">u</span>(<span style=\"color:#66d9ef\">this</span>); <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">push</span>, <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>; <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">push</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> () {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">k</span> <span style=\"color:#f92672\">=</span> [].<span style=\"color:#a6e22e\">slice</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">arguments</span>,\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#ae81ff\">0</span>), <span style=\"color:#a6e22e\">l</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">d</span>.<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">k</span>); <span style=\"color:#a6e22e\">v</span>(<span style=\"color:#a6e22e\">e</span>, <span style=\"color:#a6e22e\">k</span>); <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">l</span>\n</span></span><span style=\"display:flex;\"><span>                }; <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">processNow</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">process</span>()\n</span></span><span style=\"display:flex;\"><span>            } <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">process</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> () { <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">registerProcessor</span>(<span style=\"color:#e6db74\">&#34;set&#34;</span>, <span style=\"color:#66d9ef\">function</span> () { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> {}; <span style=\"color:#ae81ff\">1</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">arguments</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#e6db74\">&#34;object&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">arguments</span>[<span style=\"color:#ae81ff\">0</span>]) <span style=\"color:#f92672\">?</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">arguments</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">2</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">arguments</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#e6db74\">&#34;string&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">arguments</span>[<span style=\"color:#ae81ff\">0</span>]) <span style=\"color:#f92672\">&amp;&amp;</span> (<span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">p</span>(<span style=\"color:#a6e22e\">arguments</span>[<span style=\"color:#ae81ff\">0</span>], <span style=\"color:#a6e22e\">arguments</span>[<span style=\"color:#ae81ff\">1</span>])); <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">c</span> }); <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">0</span>; <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">length</span>, <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">a</span>; <span style=\"color:#a6e22e\">b</span><span style=\"color:#f92672\">++</span>)<span style=\"color:#a6e22e\">v</span>(<span style=\"color:#66d9ef\">this</span>, [<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">b</span>]], <span style=\"color:#f92672\">!</span><span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">j</span>) }; <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">get</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">a</span>) { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">c</span>; <span style=\"color:#a6e22e\">a</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#34;.&#34;</span>); <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">length</span>; <span style=\"color:#a6e22e\">c</span><span style=\"color:#f92672\">++</span>) { <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">c</span>]]) <span style=\"color:#66d9ef\">return</span>; <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#a6e22e\">c</span>]] } <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">b</span> };\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">flatten</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> () { <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">splice</span>(<span style=\"color:#ae81ff\">0</span>, <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">length</span>); <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">=</span> {}; <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">c</span>, <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">a</span>[<span style=\"color:#ae81ff\">0</span>]) }; <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">registerProcessor</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>) { <span style=\"color:#a6e22e\">a</span> <span style=\"color:#66d9ef\">in</span> <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">||</span> (<span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">a</span>] <span style=\"color:#f92672\">=</span> []); <span style=\"color:#66d9ef\">this</span>.<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">a</span>].<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#a6e22e\">b</span>) };\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">v</span>(<span style=\"color:#a6e22e\">a</span>, <span style=\"color:#a6e22e\">b</span>, <span style=\"color:#a6e22e\">c</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">c</span>; <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&amp;&amp;</span> (<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>.<span style=\"color:#a6e22e\">push</span>.<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>, <span style=\"color:#a6e22e\">b</span>), <span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">g</span>)) <span style=\"color:#66d9ef\">for</span> (; <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>.<span style=\"color:#a6e22e\">length</span>;) {\n</span></span><span style=\"display:flex;\"><span>                    <span style=\"color:#a6e22e\">b</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>.<span style=\"color:#a6e22e\">shift</span>(); <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#e6db74\">&#34;array&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">b</span>)) <span style=\"color:#a6e22e\">a</span><span style=\"color:#f92672\">:</span> { <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">c</span>; <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#ae81ff\">0</span>]); <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#34;.&#34;</span>), <span style=\"color:#a6e22e\">k</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">pop</span>(), <span style=\"color:#a6e22e\">l</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">slice</span>(<span style=\"color:#ae81ff\">1</span>), <span style=\"color:#a6e22e\">h</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">h</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">length</span>; <span style=\"color:#a6e22e\">h</span><span style=\"color:#f92672\">++</span>) { <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">void</span> <span style=\"color:#ae81ff\">0</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">d</span>[<span style=\"color:#a6e22e\">e</span>[<span style=\"color:#a6e22e\">h</span>]]) <span style=\"color:#66d9ef\">break</span> <span style=\"color:#a6e22e\">a</span>; <span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">d</span>[<span style=\"color:#a6e22e\">e</span>[<span style=\"color:#a6e22e\">h</span>]] } <span style=\"color:#66d9ef\">try</span> { <span style=\"color:#a6e22e\">d</span>[<span style=\"color:#a6e22e\">k</span>].<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">d</span>, <span style=\"color:#a6e22e\">l</span>) } <span style=\"color:#66d9ef\">catch</span> (<span style=\"color:#a6e22e\">w</span>) { } } <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#e6db74\">&#34;arguments&#34;</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">g</span>(<span style=\"color:#a6e22e\">b</span>)) { <span style=\"color:#a6e22e\">e</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">a</span>; <span style=\"color:#a6e22e\">k</span> <span style=\"color:#f92672\">=</span> []; <span style=\"color:#a6e22e\">l</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#ae81ff\">0</span>]; <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">l</span>]) <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#a6e22e\">d</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">l</span>].<span style=\"color:#a6e22e\">length</span>, <span style=\"color:#a6e22e\">h</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">h</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">d</span>; <span style=\"color:#a6e22e\">h</span><span style=\"color:#f92672\">++</span>)<span style=\"color:#a6e22e\">k</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">l</span>][<span style=\"color:#a6e22e\">h</span>].<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">e</span>.<span style=\"color:#a6e22e\">h</span>, [].<span style=\"color:#a6e22e\">slice</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">b</span>, <span style=\"color:#ae81ff\">1</span>))); <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>.<span style=\"color:#a6e22e\">push</span>.<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">f</span>, <span style=\"color:#a6e22e\">k</span>) } <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#e6db74\">&#34;function&#34;</span> <span style=\"color:#f92672\">==</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">b</span>) <span style=\"color:#66d9ef\">try</span> { <span style=\"color:#a6e22e\">b</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">h</span>) } <span style=\"color:#66d9ef\">catch</span> (<span style=\"color:#a6e22e\">w</span>) { } <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">n</span>(<span style=\"color:#a6e22e\">b</span>)) <span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">t</span> <span style=\"color:#66d9ef\">in</span> <span style=\"color:#a6e22e\">b</span>) <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#a6e22e\">p</span>(<span style=\"color:#a6e22e\">t</span>,\n</span></span><span style=\"display:flex;\"><span>                        <span style=\"color:#a6e22e\">b</span>[<span style=\"color:#a6e22e\">t</span>]), <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">c</span>); <span style=\"color:#66d9ef\">else</span> <span style=\"color:#66d9ef\">continue</span>; <span style=\"color:#a6e22e\">c</span> <span style=\"color:#f92672\">||</span> (<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">g</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">0</span>, <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">l</span>(<span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">c</span>, <span style=\"color:#a6e22e\">b</span>), <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">g</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#f92672\">!</span><span style=\"color:#ae81ff\">1</span>)\n</span></span><span style=\"display:flex;\"><span>                }\n</span></span><span style=\"display:flex;\"><span>            } <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">registerProcessor</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">registerProcessor</span>; <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">flatten</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">flatten</span>; <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">get</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">get</span>; <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">process</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">r</span>.<span style=\"color:#a6e22e\">prototype</span>.<span style=\"color:#a6e22e\">process</span>; window.<span style=\"color:#a6e22e\">DataLayerHelper</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">r</span>; <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">u</span>(<span style=\"color:#a6e22e\">a</span>) { <span style=\"color:#66d9ef\">return</span> { <span style=\"color:#a6e22e\">set</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">b</span>, <span style=\"color:#a6e22e\">c</span>) { <span style=\"color:#a6e22e\">q</span>(<span style=\"color:#a6e22e\">p</span>(<span style=\"color:#a6e22e\">b</span>, <span style=\"color:#a6e22e\">c</span>), <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">c</span>) }, <span style=\"color:#a6e22e\">get</span><span style=\"color:#f92672\">:</span> <span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">b</span>) { <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">a</span>.<span style=\"color:#a6e22e\">get</span>(<span style=\"color:#a6e22e\">b</span>) } } };\n</span></span><span style=\"display:flex;\"><span>        })();\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">listener</span>(<span style=\"color:#a6e22e\">model</span>, <span style=\"color:#a6e22e\">message</span>) {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#75715e\">// Message has been pushed. \n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>            <span style=\"color:#75715e\">// The helper has merged it onto the model.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>            <span style=\"color:#75715e\">// Now use the message and the updated model to do something.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>            <span style=\"color:#66d9ef\">if</span> ([<span style=\"color:#e6db74\">&#34;OneTrustGroupsUpdated&#34;</span>, <span style=\"color:#e6db74\">&#34;OneTrustLoaded&#34;</span>].<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">message</span>.<span style=\"color:#a6e22e\">event</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>) {\n</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#a6e22e\">triggerRecheck</span>()\n</span></span><span style=\"display:flex;\"><span>            }\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        window.<span style=\"color:#a6e22e\">dataLayer</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">dataLayer</span> <span style=\"color:#f92672\">||</span> [];\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">helper</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">DataLayerHelper</span>(window.<span style=\"color:#a6e22e\">dataLayer</span>, { <span style=\"color:#a6e22e\">listener</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">listener</span> });\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">oldWrapper</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">OptanonWrapper</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">function</span> () { }\n</span></span><span style=\"display:flex;\"><span>        window.<span style=\"color:#a6e22e\">OptanonWrapper</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span> () {\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">oldWrapper</span>();\n</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">triggerRecheck</span>();\n</span></span><span style=\"display:flex;\"><span>        }\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>        <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#34;tiq-group-name-missing&#34;</span>;\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>);\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>;\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>})(window);\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Debugging / development output - paste into the console, or uncomment and paste the whole template during development of a custom integration\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">function outputDebuggingInfo () {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  var outputString = `${tealiumCmpIntegration.cmpCheckIfOptInModel() ? &#39;Opt-in&#39; : &#39;Opt-out&#39;} Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - id:                 ${tealiumCmpIntegration.cmpFetchCurrentLookupKey()}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - well-formed:        ${tealiumCmpIntegration.cmpCheckForWellFormedDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - explicit:           ${tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - using callback:     ${typeof tealiumCmpIntegration.cmpAddCallbackToTriggerRecheck === &#39;function&#39;}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - consented purposes: ${JSON.stringify(tealiumCmpIntegration.cmpConvertResponseToGroupList(tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  `\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  console.log(outputString);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// use the callback function to avoid console posting while debugging and allow testing of the callback function itself\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">if (typeof tealiumCmpIntegration.cmpAddCallbackToTriggerRecheck === &#39;function&#39;) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    tealiumCmpIntegration.cmpAddCallbackToTriggerRecheck(outputDebuggingInfo)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">outputDebuggingInfo();\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">*/</span>\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"opt-out-cookie--gpc\">Opt-out Cookie + GPC</h3>\n<p>This integration intends to provide support for very simple opt-out models such as CCPA/CPRA. It interprets the <strong>Vendor ID</strong> field as the cookie name of an opt-out cookie, and is case sensitive. A user is considered to have opted out if this cookie is found with any value, or if the <a href=\"/iq-tag-management/consent/consent-management/global-privacy-control/about/\">Global Privacy Control (GPC)</a> opt-out signal is found.</p>\n<p>The <strong>Purpose Keys</strong> used in the integration and included in the default <strong>Purpose Group</strong> are:</p>\n<ul>\n<li><code>no-selling</code> - For tags to allow regardless of the user&rsquo;s opt-out signal. These tags don&rsquo;t sell/share data or are considered strictly necessary by your legal team, etc.</li>\n<li><code>yes-selling</code> - For tags to block for opt-out users because applicable regulations or policies prohibit tracking after a user has opted out.</li>\n</ul>\n<h3 id=\"trustarc\">TrustArc</h3>\n<p>Test this snippet on <a href=\"https://trustarc.com/\">trustarc.com</a> or on your website by following the instructions in the <a href=\"#how-it-works\">How it works section</a> to check compatibility and get the information needed for integration.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">trustarc</span> (window) {\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;TrustArc&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;trustarc-1.0.3&#39;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">modeCookieValue</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">truste</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;function&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span>(<span style=\"color:#e6db74\">&#39;notice_behavior&#39;</span>)) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;expressed|eu&#39;</span> <span style=\"color:#75715e\">// default to strict EU rules if no cookie\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">modeCookieValue</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#e6db74\">&#39;expressed&#39;</span>) <span style=\"color:#f92672\">===</span> <span style=\"color:#ae81ff\">0</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">truste</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">&#34;&#34;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cookieValue</span> <span style=\"color:#f92672\">=</span>  window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span>(<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">eu</span>.<span style=\"color:#a6e22e\">COOKIE_GDPR_PREF_NAME</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;0,&#39;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// if we&#39;re in the opt-out model and it&#39;s an implicit decision, we should allow all tags to fire\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">map</span> <span style=\"color:#f92672\">=</span> (window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span> <span style=\"color:#f92672\">&amp;&amp;</span> Object.<span style=\"color:#a6e22e\">keys</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span>)[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span>[Object.<span style=\"color:#a6e22e\">keys</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span>)[<span style=\"color:#ae81ff\">0</span>]]) <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">cookieValue</span> <span style=\"color:#f92672\">=</span> Object.<span style=\"color:#a6e22e\">keys</span>(<span style=\"color:#a6e22e\">map</span>).<span style=\"color:#a6e22e\">join</span>(<span style=\"color:#e6db74\">&#39;,&#39;</span>) <span style=\"color:#75715e\">// all purpose keys that have been added in the UI are returned as consented\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    } \n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">cookie</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">cookieValue</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// just return whatever Vendor ID is expected be active to short-circuit the ID-based double check for now\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">return</span> (window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span> <span style=\"color:#f92672\">&amp;&amp;</span> Object.<span style=\"color:#a6e22e\">keys</span>(window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">map</span>)[<span style=\"color:#ae81ff\">0</span>]) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;(Vendor ID check disabled)&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;object&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">cookie</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;string&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">truste</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">util</span>.<span style=\"color:#a6e22e\">readCookie</span>(<span style=\"color:#a6e22e\">truste</span>.<span style=\"color:#a6e22e\">eu</span>.<span style=\"color:#a6e22e\">COOKIE_GDPR_PREF_NAME</span>) <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;string&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)) <span style=\"color:#66d9ef\">return</span> []\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">cookieConsentValues</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">cookie</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#39;:&#39;</span>)[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#39;,&#39;</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">extraSplit</span> <span style=\"color:#f92672\">=</span> []\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cookieConsentValues</span>.<span style=\"color:#a6e22e\">forEach</span>((<span style=\"color:#a6e22e\">el</span>) =&gt; {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">el</span>) <span style=\"color:#66d9ef\">return</span>\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#a6e22e\">extraSplit</span>.<span style=\"color:#a6e22e\">push</span>.<span style=\"color:#a6e22e\">apply</span>(<span style=\"color:#a6e22e\">extraSplit</span>, <span style=\"color:#a6e22e\">el</span>.<span style=\"color:#a6e22e\">split</span>(<span style=\"color:#e6db74\">&#39;|&#39;</span>))\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">trustArcMap</span> <span style=\"color:#f92672\">=</span> {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#ae81ff\">0</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Required&#39;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Functional&#39;</span>,\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Personalization/Advertising&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">output</span> <span style=\"color:#f92672\">=</span> {}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">extraSplit</span>.<span style=\"color:#a6e22e\">forEach</span>((<span style=\"color:#a6e22e\">key</span>) =&gt; {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">key</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;&#39;</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">output</span>[<span style=\"color:#a6e22e\">key</span>] <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">trustArcMap</span>[<span style=\"color:#a6e22e\">key</span>] <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;Category name unknown&#39;</span>\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">output</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">permittedPurposesWithNames</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">keysOrValues</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;keys&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> Object[<span style=\"color:#a6e22e\">keysOrValues</span>](<span style=\"color:#a6e22e\">permittedPurposesWithNames</span>) <span style=\"color:#75715e\">// keys are IDs, values are names\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>})(window)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// Debugging / development output - uncomment this code and paste the integration into the console on your test pages each time you make a change to your consent state to test without publishing\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`CMP Found: </span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> (</span><span style=\"color:#e6db74\">${</span>window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">    Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">      - id:          </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">      - well-formed: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">      - explicit:    </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">      - group list:  </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()))<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">      - name lookup: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToLookupObject</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()), <span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">6</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\"></span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">false</span> <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;(All purposes are consented in opt-out mode with an implicit decision, but the full purpose list can\\&#39;t be shown in this debug output for technical reasons.)&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">    `</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"usercentrics\">Usercentrics</h3>\n<p>Test this snippet on your website by following the instructions in the <a href=\"#how-it-works\">How it works</a> section to check compatibility and get the information needed for integration.\nThe Usercentrics integration uses <strong>Vendors</strong> as <strong>Purposes</strong>.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">usercentricsBrowserSdkV2</span> (window) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Usercentrics Browser SDK&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;usercentrics-1.0.3&#39;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span>window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getServicesBaseInfo</span> <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;function&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getServicesBaseInfo</span>()\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> (window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getSettingsCore</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;function&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">getSettingsCore</span>().<span style=\"color:#a6e22e\">id</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// only support opt-In model for Usercentrics for now, can be added if needed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> window.<span style=\"color:#a6e22e\">UC_UI</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">isConsentRequired</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;function&#39;</span> <span style=\"color:#f92672\">&amp;&amp;</span> window.<span style=\"color:#a6e22e\">UC_UI</span>.<span style=\"color:#a6e22e\">isConsentRequired</span>() <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the first entry as a proxy for all\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#66d9ef\">typeof</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;string&#39;</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the first entry as a proxy for all\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">consentHistory</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>] <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>[<span style=\"color:#ae81ff\">0</span>].<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">history</span>) <span style=\"color:#f92672\">||</span> []\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">lastHistoryEntryType</span> <span style=\"color:#f92672\">=</span> (<span style=\"color:#a6e22e\">consentHistory</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">consentHistory</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">consentHistory</span>[<span style=\"color:#a6e22e\">consentHistory</span>.<span style=\"color:#a6e22e\">length</span> <span style=\"color:#f92672\">-</span> <span style=\"color:#ae81ff\">1</span>].<span style=\"color:#a6e22e\">type</span>) <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">lastHistoryEntryType</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#e6db74\">&#39;explicit&#39;</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>    }\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">foundOptIn</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">toString</span>.<span style=\"color:#a6e22e\">call</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#e6db74\">&#39;[object Array]&#39;</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// use the mapping if found, with a fallback (Usercentrics default value) if not specified in the mapping\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// check vendors if there&#39;s an object, look for at least one\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">tagInfo</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> ((<span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">status</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagInfo</span>.<span style=\"color:#a6e22e\">name</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">foundOptIn</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">true</span>\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">foundOptIn</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">vendorArray</span> <span style=\"color:#f92672\">=</span> []\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">cmpRawOutput</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">cmpRawOutput</span>.<span style=\"color:#a6e22e\">forEach</span>(<span style=\"color:#66d9ef\">function</span> (<span style=\"color:#a6e22e\">tagConsent</span>) {\n</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">consent</span> <span style=\"color:#f92672\">&amp;&amp;</span> <span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">consent</span>.<span style=\"color:#a6e22e\">status</span> <span style=\"color:#f92672\">===</span> <span style=\"color:#66d9ef\">true</span>) {\n</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">vendorArray</span>.<span style=\"color:#a6e22e\">push</span>(<span style=\"color:#a6e22e\">tagConsent</span>.<span style=\"color:#a6e22e\">name</span>)\n</span></span><span style=\"display:flex;\"><span>      }\n</span></span><span style=\"display:flex;\"><span>    })\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">vendorArray</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>\n</span></span><span style=\"display:flex;\"><span>})(window)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> - </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - vendor id:            </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed decision: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit decision:    </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - consented purposes:   </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()).<span style=\"color:#a6e22e\">sort</span>(),<span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">8</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n<h3 id=\"custom-integration-template\">Custom Integration template</h3>\n<p>For more information about the custom integration template and how to use it, see <a href=\"/iq-tag-management/consent/consent-integrations/custom-cmp/\">Custom integration</a>.</p>\n"
        }  

    , 
        {
            "weight": "475",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/validate-and-debug/",
            "title": "Validate and debug Consent Integrations",
            "body": "<h2 id=\"validate-consent-integrations-before-publishing\">Validate Consent Integrations before publishing</h2>\n<p>Validate and debug your consent integration by pasting the integration template into your site&rsquo;s JavaScript console without any other dependencies. Consent Integration templates can be edited and are designed to be stand-alone, which enables debugging from the website console.</p>\n<p>Using templates is useful for <a href=\"/iq-tag-management/consent/consent-integrations/custom-cmp/\">writing custom integrations</a> and can also be used to retrieve your vendor ID, purpose keys, or ensure that the default template works for your instance of a CMP without customization before configuration. Current templates with validation snippets are provided in the <a href=\"/iq-tag-management/consent/consent-integrations/supported-vendors/\">documentation</a>.</p>\n<h2 id=\"activate-debug-mode-after-publishing\">Activate debug mode after publishing</h2>\n<p>The Tealium iQ <a href=\"/platforms/javascript/debugging/\">debug mode</a> contains detailed status and error messages from your Consent Integrations when the feature is active, unless an exemption applies. When exempt, <code>window.tealiumCmpIntegration</code> is defined and displays your active exemption in <code>window.tealiumCmpIntegration.exemptionMap</code>.</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Use <code>/SENDING|****/</code> as a filter in the console output to show only relevant debug messages.</p>\n<h2 id=\"validate-consent-integrations-after-publishing\">Validate Consent Integrations after publishing</h2>\n<p>The Tealium iQ Consent Integrations creates a global object in the DOM called <code>window.tealiumCmpIntegration</code> that has a number of helpful properties for debugging. You can also call the component functions individually to facilitate debugging and validation. For details about the component functions, see <a href=\"/iq-tag-management/consent/consent-integrations/custom-cmp/\">Custom CMP Integrations</a></p>\n<h3 id=\"example\">Example</h3>\n<p>This example describes how to retrieve important information about your CMP integration.</p>\n<p>Complete the following steps to see important information about your CMP integration and confirm that it correctly captures customer decisions:</p>\n<ol>\n<li>Visit this <a href=\"https://www.otprivacy.com/user/jmyles/TagManagerDemo/OTKicks_Tealium/index.html?otreset=false&amp;otpreview=true&amp;otgeo=IE\">demo site</a> or any site with an active consent integration and paste the following snippet into your browser console:\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">outputString</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">`</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> - </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>() <span style=\"color:#f92672\">?</span> <span style=\"color:#e6db74\">&#39;Opt-in&#39;</span> <span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;Opt-out&#39;</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - vendor id:            </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>()<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - well-formed decision: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - explicit decision:    </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>())<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">  - consented purposes:   </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">JSON</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>()).<span style=\"color:#a6e22e\">sort</span>(),<span style=\"color:#66d9ef\">null</span>, <span style=\"color:#ae81ff\">8</span>)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">`</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">outputString</span>)\n</span></span></code></pre></div></li>\n<li>Paste the above snippet into the console of the demo site, it returns:\n<pre tabindex=\"0\"><code>OneTrust - Opt-in Model\n\nChecks:\n  - vendor id:            b38364e4-b2c4-4349-8e4e-48cf28a35db8\n  - well-formed decision: true\n  - explicit decision:    false\n  - consented purposes:   [\n        &#34;C0001&#34;\n]\n</code></pre></li>\n<li>Click <strong>Accept All Cookies</strong> on the web page and paste the same snippet again. The following output indicates that the decision was correctly understood and captured by the integration:\n<pre tabindex=\"0\"><code>OneTrust - Opt-in Model\n\nChecks:\n  - vendor id:            b38364e4-b2c4-4349-8e4e-48cf28a35db8\n  - well-formed decision: true\n  - explicit decision:    true\n  - consented purposes:   [\n        &#34;C0001&#34;,\n        &#34;C0002&#34;,\n        &#34;C0003&#34;,\n        &#34;C0004&#34;\n]\n</code></pre></li>\n</ol>\n<h2 id=\"debug-collisions-and-enforcement-rules-after-publishing\">Debug collisions and Enforcement Rules after publishing</h2>\n<p>​<code>window.tealiumCmpIntegrations</code> has a number of useful properties that help you understand which integrations are enforced on a page. For instance, <code>loadRules</code> has child properties that show which consent integrations are enforced and whether there was a collision (which blocks Tealium iQ and all tags).</p>\n<ul>\n<li><code>map</code> and <code>tagBasedMap</code> show different views of the relationship between tag UIDs and Purpose Keys.</li>\n<li><code>tiqGroupName</code> shows the mapping of the Purpose Key to Tealium iQ itself.</li>\n<li><code>cmpName</code> shows the currently active CMP (according to the template).</li>\n<li><code>cmpIntegrationVersion</code> shows the current version of the vendor specific integration template you&rsquo;re using.</li>\n<li><code>version</code> shows the version of the underlying consent enforcement framework you&rsquo;re using.</li>\n</ul>\n<p>For more information about each of the specific integration features also included in this object, see the related <a href=\"/iq-tag-management/consent/consent-integrations/custom-cmp/\">documentation</a> on writing custom integrations.</p>\n"
        }  

    , 
        {
            "weight": "480",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/custom-cmp/",
            "title": "Custom CMP integrations",
            "body": "<h2 id=\"how-it-works\">How it works</h2>\n<p>Tealium Consent Integrations consist of two parts:</p>\n<ul>\n<li>A consent enforcement framework for Tealium iQ (the <code>utcm_framework</code> template).</li>\n<li>CMP-specific integration templates that leverage the Tealium iQ consent enforcement framework. These integration templates are designed to be as lightweight as possible.</li>\n</ul>\n<p>Our <a href=\"/iq-tag-management/consent/consent-integrations/supported-vendors/\">pre-built integrations</a> supports integration with various consent management platforms (CMPs). However, there are instances where a custom integration is recommended, such as:</p>\n<ul>\n<li>Using a CMP without a pre-built integration.</li>\n<li>Using an internal tool to capture consent.</li>\n<li>Using a supported CMP with extensive customizations that break the standard integration.</li>\n</ul>\n<p>In such cases, you can use a custom integration. By using JavaScript functions, any consent capture tool can leverage the enforcement framework.</p>\n<p>To add a new custom integration, use the existing integrations and the provided template as a guide.</p>\n<p>The following describes a basic workflow for creating a custom integration:</p>\n<ol>\n<li>Develop and debug the integration outside Tealium iQ (website where CMP is implemented).</li>\n<li>In Tealium iQ, add a new custom consent integration and purpose group. For more information, see <a href=\"/iq-tag-management/consent/consent-integrations/manage/\">Manage Consent Integrations and purpose groups</a>.</li>\n<li>Assign Tealium iQ and the appropriate tags to the purposes within the purpose group.</li>\n<li>To create the template, save your profile.</li>\n<li>Edit the newly created template. For details, see <a href=\"/iq-tag-management/templates/manage/\">Manage templates</a>.</li>\n<li>Publish the template to a development or test environment to verify that everything works as expected, and then follow your normal testing and publishing flow.</li>\n</ol>\n<h2 id=\"develop-debug-and-validate-custom-integrations\">Develop, debug, and validate custom integrations</h2>\n<p>To create your custom CMP integration, edit the <a href=\"#custom-integration-template\">custom template</a> below to meet your CMP requirements. See the comments in the custom template for a working example.</p>\n<h3 id=\"develop-and-debug-before-publish\">Develop and debug before publish</h3>\n<p>Complete the following steps to debug during development:</p>\n<ol>\n<li>Uncomment the <strong>Debugging</strong> block at the end of the <a href=\"#custom-integration-template\">custom template</a>.</li>\n<li>Paste the template into the console of a website running the CMP you want to support.</li>\n<li>The debugging code block outputs the consent decision.</li>\n<li>Customize your decision and paste the template again to see the newly interpreted consent decision.</li>\n<li>When you are satisfied with your template, comment out the debugging block again before pasting and publishing it to Tealium iQ.</li>\n</ol>\n<p>You can also find the debugging snippet by saving your profile and <a href=\"/iq-tag-management/templates/manage/\">editing the template</a>.</p>\n<h3 id=\"validate-after-publish\">Validate after publish</h3>\n<p>There are two ways to debug and validate your template after publishing: using debug mode or using the <code>window.tealiumCmpOutput</code> object.</p>\n<h4 id=\"using-debug-mode\">Using debug mode</h4>\n<p>To use <a href=\"/platforms/javascript/debugging/\">debug mode</a>:</p>\n<ul>\n<li>Set the <code>utagdb</code> cookie to <code>true</code> with <code>document.cookie = &quot;utagdb=true&quot;</code> in the console.</li>\n<li>Set your console filter to see only the relevant output (the suggested filter is in the debug output).</li>\n<li>Test different options to make sure things work as expected.</li>\n</ul>\n<h4 id=\"using-the-windowtealiumcmpoutput-object\">Using the <code>window.tealiumCmpOutput</code> object</h4>\n<p>To use the <code>window.tealiumCmpOutput</code> object:</p>\n<ul>\n<li>Paste the commented out debugging code block at the bottom of the template into the console to output only your decision and related output.</li>\n<li>If needed, you can also call the functions in the template individually or access the other useful properties of this object.</li>\n</ul>\n<p>For more detailed debugging tips for prebuilt and custom integrations, see <a href=\"/iq-tag-management/consent/consent-integrations/validate-and-debug/\">Validate and debug consent integrations</a>.</p>\n<h2 id=\"integration-functions\">Integration functions</h2>\n<p>The CMP-specific component of the integration is defined using the <code>window.tealiumCmpIntegration</code> object.</p>\n<p>The <code>window.tealiumCmpIntegration</code> object consists of a name <code>.cmpName</code>, version <code>.cmpIntegrationVersion</code>, and the following functions:</p>\n<h3 id=\"determine-operating-mode\">Determine operating mode</h3>\n<ul>\n<li><code>.cmpCheckIfOptInModel</code> - determines whether the integration should operate on the <code>opt-in</code> or <code>opt-out</code> model. Returns a boolean value.</li>\n</ul>\n<h3 id=\"fetch-decision\">Fetch decision</h3>\n<ul>\n<li><code>.cmpFetchCurrentConsentDecision</code> - retrieves the current raw version of the consent decision (raw version, from the CMP). The result must be an object and is passed as an argument to all subsequent functions.</li>\n</ul>\n<h3 id=\"validate-and-standardize-the-decision\">Validate and standardize the decision</h3>\n<ul>\n<li>\n<p><code>.cmpCheckForWellFormedDecision</code> - checks if the raw version of the consent decision is well-formed and understandable. Returns a boolean value.</p>\n</li>\n<li>\n<p><code>.cmpCheckForTiqConsent</code> - determines whether the raw consent decision contains permission for data processing by Tealium iQ. If false, nothing is executed. Returns a boolean value.</p>\n</li>\n<li>\n<p><code>.cmpCheckForExplicitConsentDecision</code> - determines whether the raw consent decision is <code>explicit</code> or <code>implicit</code>. Returns a boolean value.</p>\n</li>\n<li>\n<p><code>.cmpConvertResponseToGroupList</code> - converts the raw decision into a simple array of allowed purpose keys for downstream enforcement. Returns an array of consented purpose keys.</p>\n</li>\n</ul>\n<h3 id=\"monitor-and-trigger-consent-updates\">Monitor and trigger consent updates</h3>\n<ul>\n<li>\n<p><code>.cmpAddCallbackToTriggerRecheck</code> - registers a callback function to be invoked whenever the CMP&rsquo;s consent status changes. This ensures Tealium iQ is promptly updated with the latest consent decisions without relying on polling.</p>\n<p>Ensure that <code>cmpAddCallbackToTriggerRecheck</code> is configured to call <code>triggerRecheck()</code> whenever the CMP signals a consent status change through callbacks or alternative implementation methods. Call <code>triggerRecheck()</code> when the banner pops up for implicit consent or at a similar point in the CMP load. See the comments in the <a href=\"#custom-integration-template\">custom integration template</a> for more details. For integrations that currently support callbacks, see <a href=\"/iq-tag-management/consent/consent-integrations/supported-vendors/\">Supported vendor integrations</a>.</p>\n</li>\n</ul>\n<h2 id=\"custom-integration-template\">Custom Integration template</h2>\n<p>The following is a blank template to help you get started with your own custom integration. The template includes a debugging snippet at the end of the template that you can use to debug and validate your consent integration.</p>\n\n<div class=\"pv2\">\n<div class=\"expand ba pa2 b--black-20 pv3\">\n    <div class=\"expand-label\" style=\"cursor: pointer;\" onclick=\"$h = $(this);$h.next('div').slideToggle(100,function () {$h.children('i').attr('class',function () {return $h.next('div').is(':visible') ? 'fas fa-chevron-down' : 'fas fa-chevron-right';});});\">\n        <i style=\"font-size:x-small;\" class=\"fas fa-chevron-right\"></i>\n        <span style=\"font-weight:bold;\">\n        \n    \t\n    \tExpand to view code snippet\n    \t\n    \t</span>\n    </div>\n    <div class=\"expand-content pa2\" style=\"display: none;\">\n        <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>;(<span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">myCustomConsentIntegration</span> (window) {\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">/**\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * This template is meant to be edited, for you to build your own support for a custom CMP / capture tool.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * The example code (commented out) is taken from an integration that checks for an opt-out cookie and returns one of two decisions:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *  - [&#39;no-selling&#39;] (opt-out cookie with any value found) - always an explicit decision (an opt-out cookie has been set)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *  - [&#39;no-selling&#39;, &#39;yes-selling&#39;] (no opt-out cookie found) - always an implicit decision (no cookie is set)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * The (case-sensitive) name of the opt-out cookie is taken from the &#39;Vendor ID&#39; field in the UI.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    *\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * For more, see https://docs.tealium.com/iq-tag-management/consent-integrations/supported-vendors/#opt-out-cookie--gpc \n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * \n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    * (The above integration was simplified for this example - the GPC logic was removed)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// CMP specific functionality and labels\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">=</span> window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span> <span style=\"color:#f92672\">||</span> {}\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;Custom Example&#39;</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpIntegrationVersion</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;v1.1.0&#39;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span>\n</span></span><span style=\"display:flex;\"><span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// REMOVE THE BELOW LINE (comment it out) if you want to use polling / your solution doesn&#39;t support a callback\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  window.<span style=\"color:#a6e22e\">tealiumCmpIntegration</span>.<span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span>;\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  // pull whatever&#39;s been entered as the Vendor ID in the UI for the single relevant integration\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  var optOutCookieName = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map &amp;&amp; Object.keys(window.tealiumCmpIntegration.map)[0]) || &#39;error-no-map-found-so-no-cookie-name-available&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  */</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean, true if the CMP is running the &#39;Opt-in&#39; model (GDPR style)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// This opt-out cookie example only supports the Opt-out model (CCPA/CPRA style), so this is hardcoded to return false.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckIfOptInModel</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return false\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return some CMP-specific raw object (must be an object) that contains the needed information about the decision.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// This output is used as the cmpRawOutput argument in functions below.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentConsentDecision</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // we can&#39;t use any tag manager functionality here because it hasn&#39;t been allowed to load yet\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var readCookie = function (name) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var reString = &#39;(?:(?:^|.*;\\\\s*)&#39; + name + &#39;\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var re = new RegExp(reString)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      var cookieValue = document.cookie.replace(re, &#39;$1&#39;)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      if (!cookieValue) return undefined\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      return cookieValue\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var cookie = readCookie(optOutCookieName) || &#39;opt-out-cookie-not-found&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return { cookieState: cookie } // we have to return an object for the integration to work - this lets us add in other properties (like Global Privacy Control) later\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a string that helps Tealium iQ confirm that it&#39;s got the right CMP configuration (and not one from some other page / customer of the CMP)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpFetchCurrentLookupKey</span> () {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return optOutCookieName\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean - true if the raw decision meets our expectations for the CMP\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return typeof cmpRawOutput === &#39;object&#39; &amp;&amp; typeof cmpRawOutput.cookieState === &#39;string&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return a boolean - true if the consent decision was explicitly made by the user\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForExplicitConsentDecision</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // The only way we can tell if the decision is explicit in this example is to check if an opt-out cookie is set\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    if ((typeof cmpRawOutput === &#39;object&#39; &amp;&amp; typeof cmpRawOutput.cookieState === &#39;string&#39; &amp;&amp; cmpRawOutput.cookieState !== &#39;opt-out-cookie-not-found&#39;)) return true\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return false\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Should return an array of consented vendors/purposes - these should match the Purposes in Tealium iQ exactly\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    var consentDecision = [&#39;no-selling&#39;] // tags that don&#39;t sell/share data are always allowed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    // very simple check for a non-empty opt-out cookie to determine if tags that sell data are allowed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    if (cmpRawOutput.cookieState === &#39;opt-out-cookie-not-found&#39;) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      consentDecision.push(&#39;yes-selling&#39;) // we don&#39;t see a cookie, so we have to assume selling/sharing data is fine\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    return consentDecision\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// Use the incoming callback feature to avoid some polling when the underlying framework supports it\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// It&#39;s better to call the triggerRecheck function too often (no negative impact) than too little (missed consent changes and the corresponding data).\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// Make sure to call triggerRecheck every time the CMP has a change in consent status, such as:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">//  - initial consent pop-up (implicit consent in opt-in model)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">//  - explicit consent changes\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">//  - initial CMP load when a previous decision has been made\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#75715e\">// If this function isn&#39;t included in the window-scoped object, polling will be used instead\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpAddCallbackToTriggerRecheck</span> (<span style=\"color:#a6e22e\">triggerRecheck</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// this example sets up a listener for cookie changes to stay consistent with the example, but you can listen for anything appropriate\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    (function() {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        // Original document.cookie descriptor\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        const originalCookieDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, &#39;cookie&#39;);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        // Create a custom event\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        function emitCookieChange(value) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          const event = new CustomEvent(&#39;cookieUpdated&#39;, {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            detail: {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">              cookies: value\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          });\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          document.dispatchEvent(event);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        // Override the document.cookie property\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        Object.defineProperty(document, &#39;cookie&#39;, {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          get: function() {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            return originalCookieDescriptor.get.call(document);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          },\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          set: function(value) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            originalCookieDescriptor.set.call(document, value);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            emitCookieChange(value);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">          }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        });\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      })();\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      // Example listener\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      document.addEventListener(&#39;cookieUpdated&#39;, (e) =&gt; {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        // trigger the callback function when the opt-out cookie is updated (some false positives are fine here)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        if ((e.detail.cookies.indexOf(optOutCookieName)) !== -1) {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">            triggerRecheck();\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">        }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">      });\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    */</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#75715e\">// You shouldn&#39;t need to change this function, or anything below it\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>  <span style=\"color:#66d9ef\">function</span> <span style=\"color:#a6e22e\">cmpCheckForTiqConsent</span> (<span style=\"color:#a6e22e\">cmpRawOutput</span>, <span style=\"color:#a6e22e\">tiqGroupName</span>) {\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// treat things we don&#39;t understand as an opt-out\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span>    <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#a6e22e\">cmpCheckForWellFormedDecision</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#66d9ef\">true</span>) <span style=\"color:#66d9ef\">return</span> <span style=\"color:#66d9ef\">false</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">tiqGroupName</span> <span style=\"color:#f92672\">||</span> <span style=\"color:#e6db74\">&#39;tiq-group-name-missing&#39;</span>\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">allowedGroups</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">cmpConvertResponseToGroupList</span>(<span style=\"color:#a6e22e\">cmpRawOutput</span>)\n</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">allowedGroups</span>.<span style=\"color:#a6e22e\">indexOf</span>(<span style=\"color:#a6e22e\">tiqGroupName</span>) <span style=\"color:#f92672\">!==</span> <span style=\"color:#f92672\">-</span><span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>  }\n</span></span><span style=\"display:flex;\"><span>})(window)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">/*\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  // Debugging / development output - uncomment this block, then paste/repaste this entire template on your test pages\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  var outputString = `${tealiumCmpIntegration.cmpCheckIfOptInModel() ? &#39;Opt-in&#39; : &#39;Opt-out&#39;} Model\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  Checks:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - id:          ${tealiumCmpIntegration.cmpFetchCurrentLookupKey()}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - well-formed: ${tealiumCmpIntegration.cmpCheckForWellFormedDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - explicit:    ${tealiumCmpIntegration.cmpCheckForExplicitConsentDecision(tealiumCmpIntegration.cmpFetchCurrentConsentDecision())}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">    - group list:  ${JSON.stringify(tealiumCmpIntegration.cmpConvertResponseToGroupList(tealiumCmpIntegration.cmpFetchCurrentConsentDecision()))}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  `\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">  console.log(outputString);\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">*/</span>\n</span></span></code></pre></div>\n    </div>\n</div>\n</div>\n"
        }  

    , 
        {
            "weight": "485",
            "url": "https://docs.tealium.com/iq-tag-management/consent/consent-integrations/enforcement-conditions-conflict/",
            "title": "Handling conflicts in enforcement conditions",
            "body": "<h2 id=\"privacy-principles\">Privacy principles</h2>\n<p>We built Consent Integrations with strict adherence to privacy by design and privacy by default principles. Consent Integrations ensures that data activation for your business complies with relevant policies and regulations, and protects against data leaks caused by user error or misconfiguration. These principles require that data processing and activation are allowed only when explicit consent or clear conditions are met.</p>\n<h2 id=\"how-consent-integrations-handles-conflicts-in-enforcement-conditions\">How Consent Integrations handles conflicts in enforcement conditions</h2>\n<ul>\n<li><strong>When at least one consent integration or exemption is active</strong>: No data processing is allowed without a specific signal from your consent management platform (CMP).</li>\n<li><strong>When two or more enforcement rules overlap for integrations</strong>: Tealium iQ does not load, and no tags fire.</li>\n<li><strong>When an integration overlaps exemptions</strong>: If a single integration overlaps with any number of exemptions, the integration is enforced and the exemptions are disregarded.</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>In ambiguous scenarios, such as when two integrations are active and both of their enforcement rules evaluate to <code>true</code>, Consent Integrations withholds data processing and activation to protect against potential data leaks. This behavior may result in the loss of data from blocked tags, but it is a precautionary measure to mitigate the risk of data leaks.</p>\n<p>The following table shows how Consent Integrations handles conflicts depending on the number of active exemptions and integrations:</p>\n<table>\n<thead>\n<tr>\n<th>Exemptions</th>\n<th>Integrations</th>\n<th>Conflict Handling</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>Block all data processing</td>\n</tr>\n<tr>\n<td>1+</td>\n<td>0</td>\n<td>Allow all data processing</td>\n</tr>\n<tr>\n<td>Any</td>\n<td>1</td>\n<td>Apply purpose-specific blocking</td>\n</tr>\n<tr>\n<td>Any</td>\n<td>2+</td>\n<td>Block all data processing</td>\n</tr>\n</tbody>\n</table>\n"
        }  

    ]
}
