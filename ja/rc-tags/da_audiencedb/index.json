
{
    "kind": "term",
    "name": "da_audiencedb",
    "count": 4,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs.tealium.com/ja/server-side/data-storage/audiencedb-eventdb/about/",
            "title": "AudienceDBとEventDBについて",
            "body": "<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>EventDBとAudienceDBをアカウントとプロフィールで有効にするには、カスタマーサクセスマネージャーに連絡してください。</p>\n<h2 id=\"仕組み\">仕組み</h2>\n<p>AudienceDBとEventDBサービスは、構造化された視聴者とイベントのデータをAmazon Redshiftに保存します。これはPostgreSQLに基づくデータウェアハウスです。お好みのSQLクライアントやビジネスインテリジェンス（BI）ツールを使用して、Amazon Redshiftのデータをクエリおよび分析することができます。</p>\n<p>EventDBはEventStoreをデータソースとして使用し、EventStoreのS3バケットからのデータをTealiumが提供するAmazon Redshiftデータベースにインポートします。</p>\n<p>AudienceStoreはAudienceDBを有効化するための前提条件ではありません。これらのサービスは独立して動作します。AudienceDBは、各訪問セッションの終了時に訪問プロファイルデータを保存します。</p>\n<p>AudienceDBとEventDBが有効になった後、保存する属性を選択する必要があります。詳細については、<a href=\"/ja/server-side/data-storage/audiencedb-eventdb/configure/\">AudienceDBとEventDBの構成</a>を参照してください。</p>\n<h3 id=\"データの保存タイミング\">データの保存タイミング</h3>\n<p>新しいデータは、Redshiftクラスタの負荷に応じて、EventDBとAudienceDBに30分から90分以内に保存されます。</p>\n<h3 id=\"データベーススキーマ\">データベーススキーマ</h3>\n<p>EventDBとAudienceDBが有効になると、データを保存するためのAmazon Redshiftにデータベースが作成されます。各プロファイルは同じRedshiftインスタンス内に独自のデータベーススキーマを持ち、これは各ユーザーが各データベーススキーマ（プロファイル）に対して独自のユーザー名とパスワードを持つことを意味します。AudienceDBとEventDBのデータベーススキーマは、プロファイルでEventDBまたはAudienceDBが有効になったときに自動的に作成されます。</p>\n<h3 id=\"データの保持\">データの保持</h3>\n<p>EventDBとAudienceDBに保存されたデータは、契約で定められた期間、Amazon RedShiftで利用可能なままです。データが保存される期間を決定する契約の条件を確認するために、アカウントマネージャーに連絡してください。</p>\n<h4 id=\"eventdbとaudiencedbの属性の変更\">EventDBとAudienceDBの属性の変更</h4>\n<p>EventDBに以前に追加された属性を削除すると、その属性はEventDBに送信されなくなり、EventDBからも削除されます。EventDBの属性の変更はEventStoreのファイルに影響を与えません。</p>\n<p>AudienceDBに以前に追加された属性を削除すると、その属性はAudienceDBに送信されなくなり、AudienceDBからも削除されます。AudienceDBの属性の変更はAudienceStoreのファイルに影響を与えません。</p>\n<h2 id=\"テーブルビュー正規化ビュー\">テーブル、ビュー、正規化ビュー</h2>\n<p>Redshiftデータベーステーブルの列は、属性タイプと内部属性IDに基づいて命名されます。データのビューと正規化ビューはテーブルと同じデータを含みますが、クエリを書きやすくするためにユーザーフレンドリーな名前が付けられています。正規化ビューの名前はビュー名に似ていますが、テーブル名から属性IDが省略されています。テーブル名とビュー名は以下のように作成されます：</p>\n<ul>\n<li><strong>テーブル名</strong><br>\n列名は属性タイプと属性IDの組み合わせです。<br>\n例：<code>badge_30</code></li>\n<li><strong>ビュー名</strong><br>\n列名はユーザーフレンドリーな名前と属性IDの組み合わせです。<br>\n例：<code>visitor - badge - fan (30)</code></li>\n<li><strong>正規化ビュー名</strong><br>\n列名は属性IDなしのユーザーフレンドリーな名前です。<br>\n例：<code>visitor - badge - fan</code></li>\n</ul>\n<p>ビューと正規化ビューは、<code>SUM()</code>、<code>MIN()</code>、<code>MAX()</code>などの集計を含むクエリを実行するプロセスを簡素化します。</p>\n<h2 id=\"audiencedbのテーブル\">AudienceDBのテーブル</h2>\n<p>訪問と訪問の属性は、その属性タイプと名前に基づいてデータベーステーブルの列に保存されます。視聴者は訪問テーブルの列として保存されます。テーブルのキーは<code>visit_id</code>または<code>visitor_id</code>です。</p>\n<p>訪問と訪問のデータに利用可能な以下のテーブルがあります：</p>\n<ul>\n<li>訪問/セッションデータ：<code>visits</code></li>\n<li>訪問データ：<code>visitors</code></li>\n</ul>\n<p>さらに、特別な属性タイプのための以下のテーブルが存在します：</p>\n<ul>\n<li>配列：<code>visit_arrays</code>, <code>visitor_arrays</code></li>\n<li>文字列のセット：<code>visit_lists</code>, <code>visitor_lists</code></li>\n<li>集計：<code>visit_tallies</code>, <code>visitor_tallies</code></li>\n</ul>\n<p>詳細情報については、<a href=\"/ja/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/\">AudienceDBデータガイド</a>を参照してください。</p>\n<h2 id=\"eventdbのテーブル\">EventDBのテーブル</h2>\n<p>EventDBテーブルデータには、イベントフィード内のすべてのイベントのイベント属性が含まれます。テーブルの列は属性タイプと名前に基づいて命名され、一部の属性だけが内部IDを参照します。標準的なUniversal Data Object (UDO)変数は<code>udo_</code>プレフィックスで命名され、ほとんどの列名は対応する属性名と一致します。例：<code>udo_event_name</code>。詳細情報については、<a href=\"/ja/server-side/live-events-feeds/\">ライブイベントとフィード</a>を参照してください。</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>Tealium Collectタグから来るイベントデータには、ページ上で実行されたタグとページパフォーマンスメトリクスに関する情報も含まれています。詳細については、<a href=\"/ja/client-side-tags/tealium-collect-tag/\">Tealium Collect</a>を参照してください。</p>\n<p>イベントデータに利用可能な以下のテーブルがあります：</p>\n<ul>\n<li>イベントフィードデータ：<code>events_{FEED}</code></li>\n</ul>\n"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/ja/server-side/data-storage/audiencedb-eventdb/configure/",
            "title": "AudienceDBとEventDBの構成",
            "body": "<h2 id=\"要件\">要件</h2>\n<ul>\n<li>EventDBにデータを送信するには、イベントフィードを構成し、EventStoreを有効にする必要があります。</li>\n<li>AudienceDBにデータを送信するには、AudienceStoreを有効にする必要があります。</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>EventDBとAudienceDBをアカウントとプロファイルで有効にするには、アカウントマネージャーに連絡してください。</p>\n<h2 id=\"動作方法\">動作方法</h2>\n<p>データストレージは属性レベルで制御されます。イベント属性、訪問属性、訪問属性を作成するときに、属性をEventDBまたはAudienceDBに送信するオプションを選択できます。\n<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-attribute-checkbox.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-attribute-checkbox.png\"\n         alt=\"EventDBに属性を追加するためのチェックボックスを示す属性編集画面\"\n         title=\"EventDBに属性を追加するためのチェックボックスを示す属性編集画面\"/>\n    </a>\n</figure></p>\n<h3 id=\"訪問と訪問の属性\">訪問と訪問の属性</h3>\n<p>アカウント内のすべてのオーディエンスはデフォルトでAudienceDBに送信されます。<strong>AudienceDB</strong>画面でAudienceDBに送信するオーディエンスと属性を選択できます。詳細については、<a href=\"#configure-audiencedb-attributes\">AudienceDB属性の構成</a>を参照してください。</p>\n<h3 id=\"イベント属性\">イベント属性</h3>\n<p>すべてのプリロードされた属性（Tealiumによって定義され、すべてのアカウントで利用可能な属性）はデフォルトでEventDBに送信されます。<strong>EventDB属性</strong>画面でカスタム属性を選択してEventDBに送信できます。</p>\n<p>プリロードされた属性は<strong>EventDB属性</strong>画面で変更できません。<strong>DataAccessコンソール</strong>を使用して、EventDBに保存されるプリロードされた属性を調整します。詳細については、<a href=\"#configure-eventdb-attributes\">EventDB属性の構成</a>を参照してください。</p>\n<p>DOM属性（例えば、URL、ドメイン、リファラ、ユーザーエージェント）は常に送信され、EventDBから除外することはできません。また、Tealiumのイベント属性、例えば<code>tealium_account</code>、<code>tealium_profile</code>、<code>tealium_event</code>も常に送信され、除外することはできません。</p>\n<p class=\"tip\"><i class=\"fa fa-info-circle\"></i>データ量が非常に大きくなる可能性があるため、必要な特定のイベントフィードのみにEventDBを有効にすることをお勧めします。詳細については、<a href=\"/ja/server-side/live-events-feeds/about-event-feeds/\">ライブイベントとフィード</a>を参照してください。</p>\n<p>属性についての詳細は、<a href=\"/ja/server-side/attributes/about/\">属性の使用</a>を参照してください。</p>\n<h2 id=\"audiencedb属性の構成\">AudienceDB属性の構成</h2>\n<p>デフォルトでは、すべてのオーディエンスがAudienceDBに選択されています。AudienceDBからオーディエンスを削除するためにオーディエンスの選択を解除できます。また、必要に応じて訪問と訪問の属性を選択または選択解除できます。</p>\n<p>AudienceDBに保存される属性とオーディエンスを構成するには、次の手順を使用します：</p>\n<ol>\n<li><strong>DataAccess &gt; AudienceDB</strong>に移動します。<br>\nアカウントで利用可能なオーディエンスと属性のリストが表示されます。以下に示すように。<br>\n<figure><a class=\"slb\" href=\"/images/server-side/data-access/audiencedb-screen.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/audiencedb-screen.png\"\n         alt=\"AudienceDBのオーディエンスと属性のリスト\"\n         title=\"AudienceDBのオーディエンスと属性のリスト\"/>\n    </a>\n</figure><br>\n<strong>Scope</strong>、<strong>Type</strong>、または<strong>Data Type</strong>で属性のリストをフィルタリングできます。</li>\n<li>必要に応じてオーディエンスの選択を解除して、AudienceDBから削除します。</li>\n<li>AudienceDBに追加または削除するために属性を選択または選択解除します。</li>\n<li>保存して公開します。</li>\n</ol>\n<h2 id=\"eventdb属性の構成\">EventDB属性の構成</h2>\n<p>デフォルトでは、イベントストリームにはアカウントで定義されたすべてのイベント属性が含まれています。Tealium Collectタグからデータを収集するストリームでは、イベント中に発火する各タグに対して追加のブール属性が含まれています。例えば、Tealium iQタグ管理アカウントにGoogle AnalyticsとTealium Collectタグがある場合、イベントストリームには、各イベントで発火したかどうかを示すブール属性<code>Google Analytics</code>が含まれます。</p>\n<p>EventDBに保存される属性を構成するには、次の手順を実行します：</p>\n<ol>\n<li>\n<p><strong>DataAccess &gt; EventDB</strong>に移動します。</p>\n</li>\n<li>\n<p><strong>Show EventDB Attributes</strong>をクリックします。<br>\nアカウントで利用可能なイベント属性のリストが表示されます。</p>\n   <p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Restricted Dataとマークされた属性はデフォルトで除外されますが、チェックボックスをチェックして含めることができます。</p>\n</li>\n<li>\n<p>必要に応じてEventDBから属性を追加または削除します。<br>\nすべてのプリロードされたEventDB属性はデフォルトで追加されます。\n<figure><a class=\"slb\" href=\"/images/server-side/data-access/eventdb-attr-select.png\"><img src=\"https://docs.tealium.com/images/server-side/data-access/eventdb-attr-select.png\"\n               alt=\"EventDBに選択する属性のリスト\"\n               title=\"EventDBに選択する属性のリスト\"/>\n          </a>\n      </figure></p>\n</li>\n<li>\n<p><strong>Save</strong>をクリックします。</p>\n</li>\n<li>\n<p>保存して公開します。</p>\n</li>\n</ol>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>EventDB属性を構成し、変更を公開した後、データがデータベースに表示されるまでに最大1時間かかる場合があります。</p>\n<h2 id=\"保存された属性の変更\">保存された属性の変更</h2>\n<p>EventDBまたはAudienceDBの保存に以前に追加された属性を削除し、変更を公開すると、その属性はEventDBまたはAudienceDBから削除されます。</p>\n<p>属性を削除し、その後再度追加して変更を公開すると、削除されたEventDBまたはAudienceDBのデータは復元できません。</p>\n"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/ja/server-side/data-storage/audiencedb-eventdb/audiencedb-data-guide/",
            "title": "AudienceDBデータガイド",
            "body": "<h2 id=\"動作原理\">動作原理</h2>\n<p>AudienceDBは、Amazon Redshift™のPostgresライクなデータベースに訪問レベルと訪問レベルのデータを保存し、お好みのSQLクライアントやビジネスインテリジェンス（BI）ツールを使用してデータを直接クエリおよび分析できるようにします。</p>\n<p>AudienceDBがアクティブ化されると、AudienceStreamデータを保存するためにAmazon Redshift™にデータベースが作成されます。新しいデータベースには、保存できる各データタイプに対応するテーブルが含まれています。訪問レベルのデータに関連するデータは、<code>visit_</code>で接頭辞が付いたテーブルに保存されます。訪問レベルのデータに関連するデータは、<code>visitor_</code>で接頭辞が付いたテーブルに保存されます。テーブルに加えて、クエリの作成を容易にするためにいくつかのビューも作成されます。</p>\n<p>AudienceDBに初めて取り組む場合は、<a href=\"/ja/server-side/data-storage/audiencedb-eventdb/about/\">AudienceDBとEventDBの操作方法</a>を確認してください。</p>\n<h2 id=\"eventdbとaudiencedbのダイアグラム\">EventDBとAudienceDBのダイアグラム</h2>\n<p>Event、visitor、およびvisit属性は、EventDBとAudienceDBで連携して動作します。次のダイアグラムは、EventDBとAudienceDBの属性間の関係を示しています。これらの関係は、特定の訪問または訪問のイベントデータを返すクエリを作成する際に重要です。</p>\n<figure><a class=\"slb\" href=\"/images/server-side/eventdb-and-audiencedb-diagram.jpg\"><img src=\"https://docs.tealium.com/images/server-side/eventdb-and-audiencedb-diagram.jpg\"\n         alt=\"EventDBとAudienceDBのダイアグラムのTLC用の更新\"\n         title=\"EventDBとAudienceDBのダイアグラムのTLC用の更新\"/>\n    </a>\n</figure>\n<h2 id=\"属性と列名\">属性と列名</h2>\n<p>AudienceDBで有効になっている各訪問と訪問の属性は、1つ以上のデータベーステーブルの列として表示されます。</p>\n<p>以下は、属性のデータ型と列の命名規則の一覧です。ここで、「###」は属性IDを表します。表に示されている例は、訪問属性を示しています。訪問属性では、「visitor」の代わりに「visit」の単語が使用されます。</p>\n<table>\n<thead>\n<tr>\n<th>属性のデータ型</th>\n<th>テーブルの列名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>配列</td>\n<td><ul><li><strong>テーブル</strong>: <code>array_###</code></li><li><strong>ビュー</strong>: <code>visitor array - array_name (###)</code></li><li><strong>正規化</strong>: <code>visitor array - array_name</code></li></ul></td>\n</tr>\n<tr>\n<td>オーディエンス<br> <code>t</code>はtrueを、<code>f</code>はfalseを示し、オーディエンスに存在することを示します。</td>\n<td><ul><li><strong>テーブル</strong>: <code>audience_account_profile_###</code></li><li><strong>ビュー</strong>: <code>visitor - audience - audience_name (account_profile_###)</code></li><li><strong>正規化</strong>: <code>visitor - audience - audience_name</code></li></ul></td>\n</tr>\n<tr>\n<td>バッジ<br> <code>t</code>はtrueを、<code>f</code>はfalseを示し、バッジの存在を示します。</td>\n<td><ul><li><strong>テーブル</strong>: <code>badge_###</code></li><li><strong>ビュー</strong>: <code>visitor - badge - badge_name (###)</code></li><li><strong>正規化</strong>: <code>visitor - badge - badge_name</code></li></ul></td>\n</tr>\n<tr>\n<td>ブール値</td>\n<td><ul><li><strong>テーブル</strong>: <code>flag_###</code></li><li><strong>ビュー</strong>: <code>visitor - flag - boolean_name (###)</code></li><li><strong>正規化</strong>: <code>visitor - flag - boolean_name</code></li></ul></td>\n</tr>\n<tr>\n<td>日付</td>\n<td><ul><li><strong>テーブル</strong>: <code>date_###</code></li></ul> <ul><li><strong>ビュー</strong>: <code>visitor - date - date_name (###)</code></li><li><strong>正規化</strong>: <code>visitor - date - date_name</code></li></ul></td>\n</tr>\n<tr>\n<td>数値</td>\n<td><ul><li><strong>テーブル</strong>: <code>metric_###</code></li><li><strong>ビュー</strong>: <code>visitor - metric - metric_name (###)</code></li><li><strong>正規化</strong>: <code>visitor - metric - metric_name</code></li></ul></td>\n</tr>\n<tr>\n<td>文字列のセット</td>\n<td><ul><li><strong>テーブル</strong>: <code>list_###</code></li><li><strong>ビュー</strong>: <code>visitor list - set_name (###)</code></li><li><strong>正規化</strong>: <code>visitor list - set_name</code></li></ul></td>\n</tr>\n<tr>\n<td>文字列</td>\n<td><ul><li><strong>テーブル</strong>: <code>property_###</code></li><li><strong>ビュー</strong>: <code>visitor - property - property_name (###)</code></li><li><strong>正規化</strong>: <code>visitor - property - property_name</code></li></ul></td>\n</tr>\n<tr>\n<td>集計</td>\n<td><ul><li><strong>テーブル</strong>: <code>visitor_tally_###_key</code> <code>visitor_tally_###_value</code></li><li><strong>ビュー</strong>: <code>visitor tally - tally_name (###) - key</code> &ldquo;visitor tally - tally_name (###) - value&rdquo;</li><li><strong>正規化</strong>: <code>visitor tally - tally_name - key</code> &ldquo;visitor tally - tally_name - value&rdquo;</li></ul></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"audiencedbテーブル\">AudienceDBテーブル</h2>\n<p>以下の表は、オーディエンスデータに使用されるAudienceDBテーブルの種類と、対応する「ビュー」と「正規化」テーブルの名前を説明しています。</p>\n<table>\n<thead>\n<tr>\n<th>データ型と説明</th>\n<th>テーブル/ビュー/正規化名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>配列</strong><br>配列内の各アイテムは、ゼロベースの配列位置の追加列を持つテーブルの行です。</td>\n<td><code>visit_arrays</code><br> <code>visit_arrays_view</code><br> <code>visitor_arrays</code><br> <code>visitor_arrays_view</code><br> <code>visitor_arrays_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>文字列のセット</strong><br>セット内の各アイテムは、テーブルの行です。</td>\n<td><code>visit_lists</code><br> <code>visit_lists_view</code><br> <code>visitor_lists</code><br> <code>visitor_lists_view</code><br> <code>visitor_lists_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>集計</strong><br>集計内の各アイテムは、キー（接尾辞 <code>_key</code>）と値（接尾辞 <code>_value</code>）の2つの列を持つテーブルの行です。</td>\n<td><code>visit_tallies</code><br> <code>visit_tallies_view</code><br> <code>visitor_tallies</code><br> <code>visitor_tallies_view</code><br> <code>visitor_tallies_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>ステッチされた訪問</strong><br><a href=\"/ja/server-side/visitor-stitching/about/\">訪問スティッチング</a>の一部としてプロファイルにステッチされた訪問ID。</td>\n<td><code>visitor_replaces</code><br> <code>visitor_replaces_view</code></td>\n</tr>\n<tr>\n<td><strong>訪問</strong><br>現在の訪問属性とそれに属するオーディエンス。</td>\n<td><code>visits</code><br> <code>visits_view</code></td>\n</tr>\n<tr>\n<td><strong>訪問</strong><br>訪問属性とそれに属するオーディエンス。</td>\n<td><code>visitors</code><br> <code>visitors_view</code><br> <code>visitors_view_normalized</code></td>\n</tr>\n<tr>\n<td><strong>訪問バッチ</strong></td>\n<td>内部使用のみ</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"サンプルデータベース構造\">サンプルデータベース構造</h2>\n<p>以下のセクションでは、各ビューのサンプル構造の例を提供し、各ビューのユニークな要素と他のビューとの違いを把握するのに役立ちます。</p>\n<h3 id=\"訪問配列\">訪問配列</h3>\n<p>以下の例は、<code>visit_arrays</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\"> visit_id                          | index | updated                 | visit_array_421\n ----------------------------------+--------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | スマートフォン\n 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | 携帯電話の充電器\n 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | スマートフォンケース\n</code></pre><h3 id=\"訪問リスト\">訪問リスト</h3>\n<p>以下の例は、<code>visit_lists</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_list_284 from visit_lists;\n\n visit_id                          | updated                 | visit_list_284\n ----------------------------------+-------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | 携帯電話とアクセサリ\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | コンピュータとタブレット\n 13e1a63890793caa346f90607a76c1c98 | 2018-04-22 12:50:20.471 | オフィス用品\n</code></pre><h3 id=\"訪問集計\">訪問集計</h3>\n<p>以下の例は、<code>visitor_tallies</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, updated, visit_tally_5144_key, visit_tally_5144_value from visit_tallies;\n\n                        visit_id                                 | updated                 | visit_tally_5144_key | visit_tally_5144_value\n-----------------------------------------------------------------+-------------------------+----------------------+-----------------------\n19fd8716d2f8341b81f84f471b5f950873d5c88acee9c61089f286fb8b5d4903 | 2017-09-04 20:39:05.303 | ホーム具                 | 2\n06db172cf2a8fd7f9ff882a28a14ad266ee67824c9bc3ee0b1fcc451b42cec68 | 2017-09-05 06:20:16.209 | ホーム具                 | 14\n162e22ba6c168bff2385bcfba9d4ba8e15767d1ad8b519b3a872a2ad89d3f3dd | 2017-09-05 06:04:59.671 | 検索                 | 2\n4225575ce21a7f9454c56c269eccfee9782e03c6f647a743f058b7b667dd3bbb | 2017-09-20 06:30:14.63  | ホーム               | 1\ne1e5dd5e58bc97056f8340e242205e1ec2ab0a88c94c890563399f55828638f7 | 2017-09-09 14:22:08.575 | ホーム具                 | 3\n(5 rows)\n</code></pre><h3 id=\"訪問配列ビュー\">訪問配列ビュー</h3>\n<p>以下の例は、<code>visitor_arrays_view</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select &#34;visitor - id&#34;, &#34;index&#34;, &#34;updated&#34;, &#34;visitor array - cart product name (421)&#34; from visitor_arrays_view;\n\n &#34;visitor array - visitor id&#34;      | index | updated                 | &#34;visitor array - cart product name (421)&#34;\n ----------------------------------+--------------------------------------------------------------------------\n 13e1a63890793caa346f90607a76c1c98 | 0     | 2018-05-17 01:03:30.344 | スマートフォン\n 13e1a63890793caa346f90607a76c1c98 | 1     | 2018-05-17 01:03:30.344 | 携帯電話の充電器\n 13e1a63890793caa346f90607a76c1c98 | 2     | 2018-05-17 01:03:30.344 | スマートフォンケース\n</code></pre><h3 id=\"訪問リスト-1\">訪問リスト</h3>\n<p>以下の例は、<code>visitor_lists</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_list_5168 from visitor_lists;\n\n                  visitor_id                   |         updated         | visitor_list_5168\n-----------------------------------------------+-------------------------+-------------------\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | 携帯電話\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | 携帯電話のアクセサリ\n 015e94db670900084e37016b9b7300087002f07f00432 | 2017-11-04 13:30:33.553 | オフィス用品\n</code></pre><h3 id=\"訪問ステッチ\">訪問ステッチ</h3>\n<p>以下の例は、<code>visitor_replaces</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_replaces_id, visitor_id, updated from visitor_replaces where updated is not null;\n\n                visitor_replaces_id           | visitor_id                                      | updated\n----------------------------------------------+-------------------------------------------------+------------------------\n015f8d82498b00132b921ecf890d00089001c08100432 | myexample_main__5216_username@gmail.com         | 2017-11-23 15:32:28.81\n015f4a0302b9009e17205a49027005079001c07100c48 | myexample_main__5216_username@myexample.com     | 2017-11-24 22:50:31.105\n015feb1537cc00305e319fca622400085001d07d00720 | myexample_main__5216_username@yahoo.com         | 2017-11-26 01:22:27.57\n015decf4f3170011afb0979834420007e007b07600720 | myexample_main__5216_username@hotmail.com       | 2018-01-03 22:03:20.837\n015e3b903e48000c7944f6af4b8e00087016907f0049e | myexample_main__5216_username@cox.net           | 2018-01-28 03:59:45.031\n(5 rows)\n</code></pre><h3 id=\"訪問集計-1\">訪問集計</h3>\n<p>以下の例は、<code>visitor_tallies</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visitor_id, updated, visitor_tally_57_key, visitor_tally_57_value from visitor_tallies;\n\n                 visitor_id                   |         updated         | visitor_tally_57_key | visitor_tally_57_value\n----------------------------------------------+-------------------------+----------------------+------------------------\n015dcd068996007c1f95a24aa47002075008d06d0093c | 2017-09-01 03:14:18.519 | Safari               |                      8\n015e40b27e55004ec842e2b9d0f800090001c08800408 | 2017-09-02 13:35:40.834 | Chrome               |                      2\n015e34c9fd270014a6799597769a00088008808000408 | 2017-08-31 05:44:14.013 | Chrome               |                      1\n(5 rows)\n</code></pre><h3 id=\"訪問ビュー\">訪問ビュー</h3>\n<p>以下の例は、<code>visitors_view</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">select &#34;visitor - id&#34;, &#34;visitor - created&#34;, &#34;updated&#34;, &#34;visitor - audience - bedroom shoppers (myexample_main_102)&#34; from visitors_view limit 1;\n\n                 visitor - id                  |  visitor - created  |        updated         | visitor - audience - bedroom shoppers (myexample_main_102)\n-----------------------------------------------+---------------------+------------------------+---------------------------------------------------------------\n 015de32cbb1e00265733c8c3c5bc00080001c07800976 | 2017-08-14 23:55:46 | 2017-08-20 15:27:48.75 | f\n(1 rows)\n</code></pre><h3 id=\"訪問テーブル\">訪問テーブル</h3>\n<p>以下の例は、<code>visits</code>テーブルの基本的なフォーマットを示しています。</p>\n<pre tabindex=\"0\"><code class=\"language-nohl\" data-lang=\"nohl\">myexample=# select visit_id, visitor_id, start_time, last_event_time, updated, property_5300, flag_5432 from visits limit 5;\n\n                       visit_id                                  | visitor_id                                    |     start_time      | last_event_time     | updated                 | property_5300 | flag_5432\n-----------------------------------------------------------------+-----------------------------------------------+---------------------+---------------------+-------------------------+---------------+-----------\n4af5f070998b6e471d05a809d55c62811784c57ee196c39a599c0a352e925e01 | 015c9e257f220048ebb26bfdb68405072001c06a00bd0 | 2017-07-18 17:04:31 | 2017-07-18 17:39:27 | 2017-07-18 18:09:28.994 |               |\n42fd5d3067b5472a57aa7fe6e8cf12d5d60ea2a9399d54de01bfb0b06e33bd73 | 015cc166a9b100028f7070a6e51d01049003e00d00bd0 | 2017-07-18 21:10:21 | 2017-07-18 21:13:32 | 2017-07-18 21:43:32.948 |               |\n9729e709ec80bc476dc6c36c6bf33f998f92c3f2e3af5509078c6402ceff29bf | 015d56a5ec3d00128011a73f446404079001c07100838 | 2017-07-19 18:28:26 | 2017-07-19 18:28:26 | 2017-07-19 18:38:27.903 |               |\n6d1c801fb894234347d27a61b9b0f82ac918bfdc36a0510ab3be8ea6a72b9038 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 19:30:08 | 2017-07-19 19:30:08 | 2017-07-19 19:40:12.802 |               |\nc97a0a0c9dfc4cb58e23dbfdb98528cddc8a989c9d65f0e6fd89ffdc5e82c727 | 015c662062aa00474d60cc4f7b4005072001c06a00bd0 | 2017-07-19 21:33:00 | 2017-07-19 21:33:00 | 2017-07-19 21:43:02.803 |               |\n(5 rows)\n</code></pre><h2 id=\"ステッチされた訪問の理解\">ステッチされた訪問の理解</h2>\n<p>AudienceDBでは、ステッチされた訪問の場合、訪問テーブルには1つの訪問プロファイルのみが保持されます。ステッチされた訪問の訪問プロファイルは、異なるIDを持つものとして表示されます。<code>visitor_replaces</code>テーブルは、このような表示を実現するための参照方法を提供します。</p>\n<p>訪問置換テーブルの例：</p>\n<table>\n<thead>\n<tr>\n<th><code>visitor_replaces_id</code></th>\n<th><code>visitor_id</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>6</td>\n</tr>\n<tr>\n<td>5</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>このテーブルでは、以下のような関係があります：</p>\n<ul>\n<li>Visitor1とVisitor2はVisitor3にステッチされます。</li>\n<li>Visitor4とVisitor5はVisitor6にステッチされます。</li>\n</ul>\n<p>上記の情報は、<code>visitors</code>テーブルを<code>visits</code>テーブルやEventDBテーブルと結合するために使用できます。</p>\n<p>EventDBからAudienceDBにイベントを結合するためには：</p>\n<ul>\n<li>ステッチされていない訪問の場合、<code>events_x</code>を<code>visitors</code>テーブルに直接結合します。</li>\n<li>ステッチされた訪問の場合、<code>visitor_replaces</code>テーブルを経由して結合します。以下の例を参照してください：</li>\n</ul>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-sql\" data-lang=\"sql\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">SELECT</span> e.<span style=\"color:#e6db74\">&#34;event - id&#34;</span>, v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">FROM</span> account__profile.events_view__all_events__all_events e\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">LEFT</span> <span style=\"color:#66d9ef\">JOIN</span> account__profile.visitor_replaces_view r <span style=\"color:#66d9ef\">ON</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - replaces id&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">JOIN</span> account__profile.visitors_view_normalized v <span style=\"color:#66d9ef\">ON</span> (v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> r.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#66d9ef\">or</span> v.<span style=\"color:#e6db74\">&#34;visitor - id&#34;</span> <span style=\"color:#f92672\">=</span> e.<span style=\"color:#e6db74\">&#34;event - visitor id&#34;</span>)\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">limit</span> <span style=\"color:#ae81ff\">1000</span>;\n</span></span></code></pre></div><ul>\n<li>この例では、<code>events_all_events</code>の訪問IDが<code>visitors</code>または<code>visitor_replaces</code>にあることを考慮しています。</li>\n</ul>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>単一のイベントセッションに関連付けられた訪問は、訪問テーブルに保存されません。</p>\n<h2 id=\"追加リソース\">追加リソース</h2>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_designing-queries-best-practices.html\">(Amazon Redshift™) クエリの設計のベストプラクティス</a>。</li>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c-optimizing-query-performance.html\">(Amazon Redshift™) クエリのパフォーマンスのチューニング</a>。</li>\n</ul>\n"
        }  

    , 
        {
            "weight": "50",
            "url": "https://docs.tealium.com/ja/server-side/data-storage/audiencedb-eventdb/connect/",
            "title": "EventDBとAudienceDBに接続する",
            "body": "<h2 id=\"redshiftに接続する\">Redshiftに接続する</h2>\n<p>EventDBとAudienceDBのデータにアクセスするには、PostgreSQLスタイルのデータベースに接続できるサードパーティのツールが必要です。</p>\n<ul>\n<li><strong>初めてのユーザー</strong>\nEventDBとAudienceDBがアカウントで有効になると、Redshift Spectrumが自動的に有効になります。</li>\n<li><strong>既存の顧客</strong>\nDataAccessを使用していた既存の顧客に対してSpectrumを有効にする前に、既存のデータと新しいデータが正しい場所に書き込まれるようにデータ移行が必要です。事前にチームと調整して進めてください。</li>\n</ul>\n<h2 id=\"データベースの認証情報を取得する\">データベースの認証情報を取得する</h2>\n<p>PostgreSQLをサポートするサードパーティのツールは、接続するための認証情報が必要です。認証情報はDataAccess Consoleで提供されます。</p>\n<p>データベースの認証情報は現在、各ユーザーごとに生成されます。以前は、すべてのユーザーがアカウントとプロファイルに対して生成された認証情報を共有していました。誰かがグローバルな認証情報を再生成すると、すべてのユーザーの接続が終了し、すべてのユーザーが再接続しなければなりませんでした。</p>\n<p>ユーザー固有の認証情報の場合、生成される認証情報はアカウント、プロファイル、およびユーザーのメールアドレスに基づいています。ユーザーは他の接続を終了することなく自分の認証情報を再生成することができます。特定のユーザーのアクセスを削除しても他の接続は終了しません。特定のユーザーの認証情報を無効にするには、Tealiumサポートに連絡してください。</p>\n<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>以前に生成されたグローバルな認証情報は引き続き使用できますが、再生成することはできません。</p>\n<p>データベースの認証情報を取得するには、以下の手順を使用します：</p>\n<ol>\n<li><strong>DataAccess &gt; EventDB</strong> または <strong>DataAccess &gt; AudienceDB</strong> に移動します。</li>\n<li><strong>Get DB Connection Details</strong> をクリックします。</li>\n<li><strong>Regenerate DB Credentials</strong> をクリックします。<br>\nこれが初めての認証情報取得であっても、認証情報を再生成する必要があります。<br>\n<figure><a class=\"slb\" href=\"/images/server-side/connection-details.png\"><img src=\"https://docs.tealium.com/images/server-side/connection-details.png\"\n               alt=\"connection details\"\n               title=\"connection details\"/>\n          </a>\n      </figure></li>\n<li>既存の認証情報を削除し、新しいものを生成することを確認するために <strong>Yes</strong> をクリックします。<br>\n<strong>DB Connection Details</strong> 画面には以下のフィールドが表示されます：\n<ul>\n<li><strong>Username</strong><br>\nデータベース接続のユーザー名。これはあなたのアカウント、プロファイル名、およびメールアドレスの組み合わせです。例えば、<code>account__profile__email</code>。</li>\n<li><strong>Password</strong><br>\nデータベース接続のパスワード。</li>\n<li><strong>Database</strong><br>\nデータベースの名前。通常はあなたのアカウントの名前です。</li>\n<li><strong>Host</strong><br>\nデータベースサーバーのホスト名。あなたのデータ保存地域に特化しています。</li>\n<li><strong>Port</strong><br>\n接続のポート番号。</li>\n</ul>\n</li>\n<li>将来の使用のために接続詳細を保存し、<strong>Close</strong> をクリックします。</li>\n</ol>\n<h3 id=\"redshiftデータベースを閲覧する\">Redshiftデータベースを閲覧する</h3>\n<p>データベースの認証情報を取得したら、サードパーティのツールを使用してデータベースに接続できます。以下の例では、SQL Workbench/J（フリーウェアアプリケーション）を使用しています（<a href=\"/ja/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">SQL Workbenchを使用してEventDBに接続する</a>を参照）。スキーマの命名規則は <code>account__profile</code> です。</p>\n<p>以下の例は、関連するすべてのテーブルと列を結合するビューを示しています。</p>\n<figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-db-explorer.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-db-explorer.jpg\"/>\n    </a>\n</figure>\n<p>この例は、生のデータテーブルビューを示しています。列名は各テーブルで同じ位置にあり、ビューに関係なく同じです。これら二つのビューの主な違いはエントリの可読性です。</p>\n<figure><a class=\"slb\" href=\"/images/server-side/sql-workbench-columns.jpg\"><img src=\"https://docs.tealium.com/images/server-side/sql-workbench-columns.jpg\"/>\n    </a>\n</figure>\n<h2 id=\"sqlクエリの作成\">SQLクエリの作成</h2>\n<p>以下の記事では、ベストプラクティスと有用なクエリの例を提供しています：</p>\n<ul>\n<li><a href=\"/ja/server-side/data-storage/data-viz-tools/connecting-sql-workbench/\">SQL Workbench/Jを使用してEventDBとAudienceDBに接続する</a></li>\n<li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363364-best-practices-for-writing-queries-for-eventdb-and-audiencedb/preview\">EventDBとAudienceDBのクエリ作成のベストプラクティス</a></li>\n<li><a href=\"https://support.tealiumiq.com/en/support/solutions/articles/36000363427-helpful-sql-queries-for-eventdb-and-audiencedb\">EventDBとAudienceDBのための便利なSQLクエリ</a></li>\n</ul>\n"
        }  

    ]
}
