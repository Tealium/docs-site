
{
    "kind": "term",
    "name": "ss_functions_overview",
    "count": 11,
    "items": [

    
        {
            "weight": "5",
            "url": "https://docs.tealium.com/ja/server-side/functions/about/",
            "title": "関数について",
            "body":"<h2 id=\"関数の種類\">関数の種類</h2><p>Tealiumは現在、以下の種類の関数をサポートしています：</p><ul><li><strong>データ変換関数</strong> – Tealium Collectがイベントを受信した後、関数のトリガー条件が満たされたときにトリガーされる関数です。詳細については、<a href=\"/ja/server-side/functions/data-transformation-functions/about/\">データ変換関数について</a>を参照してください。</li><li><strong>イベント関数</strong> – イベントが処理された後にトリガーされる関数です。詳細については、<a href=\"/ja/server-side/functions/event-visitor-functions/about/\">イベントと訪問の関数について</a>を参照してください。処理されたイベントによってトリガーされる関数を使用するには、Tealium EventStream API Hubを有効にする必要があります。詳細については、<a href=\"/ja/server-side/getting-started/eventstream-api-hub/introduction/\">EventStreamの紹介</a>を参照してください。</li><li><strong>訪問関数</strong> – 訪問が処理された後にトリガーされる関数です。詳細については、<a href=\"/ja/server-side/functions/event-visitor-functions/about/\">イベントと訪問の関数について</a>を参照してください。処理された訪問によってトリガーされる関数を使用するには、Tealium AudienceStream CDPを有効にする必要があります。詳細については、<a href=\"/ja/server-side/getting-started/audiencestream-cdp/introduction/\">AudienceStreamの紹介</a>を参照してください。</li></ul><h2 id=\"主な利点\">主な利点</h2><p>関数は、Customer Data Hubの機能をあなたのニーズに合わせて拡張することができるサーバーレス環境を提供します。</p><h3 id=\"サーバーレス環境\">サーバーレス環境</h3><p>サーバーレス関数環境では、関数はTealiumプラットフォーム上にホストされています。Tealiumがサーバーとプラットフォームソフトウェアを管理し、あなたは独自のデータニーズに対応する関数の実装に集中できます。関数が呼び出されるたびに、リソース（メモリなど）が自動的に割り当てられます。詳細については、<a href=\"/ja/server-side/functions/environment/\">実行環境とレート制限</a>を参照してください。</p><h3 id=\"customer-data-hubの拡張\">Customer Data Hubの拡張</h3><p>データ変換関数を使用して、受信イベントデータを変更することができます。例えば、データ変換関数を使用して、ネストされたオブジェクトをフラット化したり、機密データを削除したり、イベントオブジェクト内の変数を埋め込むことができます。</p><p>イベント関数と訪問関数を使用して、他のシステムからデータを取得したり、Tealiumのデータを増強したり、他のエンドポイントにデータを送信したりすることができます。関数が訪問やイベントのデータを変更する場合、変更は関数にローカルであり、Tealiumのデータには影響しません。関数は変更されたデータをTealium Collectに送信し、再度処理され、変更がTealiumのデータに反映されます。</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>イベントまたは訪問のデータをTealium Collectエンドポイントに送信することにはコストがかかります。なぜなら、データが送信されるたびにイベントの数が増えるからです。詳細については、<a href=\"/ja/server-side/administration/understanding-the-usage-report/#billing-estimation\">課金見積もり</a>を参照してください。</p>"
        }  

    , 
        {
            "weight": "10",
            "url": "https://docs.tealium.com/ja/server-side/functions/triggers/",
            "title": "関数トリガー",
            "body":"<p>関数は、関数のタイプにより、データパイプラインの異なるポイントでイベントによってトリガーされます。</p><h2 id=\"データ変換関数\">データ変換関数</h2><p>データ変換関数にはカスタムトリガーがあり、これらは関数の実行をトリガーする条件を指定するルールです。データ変換関数のトリガー条件が満たされると、イベントがデータソースから収集され、イベントが処理される前に関数が呼び出されます。次のデータパイプライン図に示されています。データ変換関数は、ファイルインポートイベントを除くすべてのイベントタイプをサポートします。</p><figure><a class=\"slb\" href=\"/images/server-side/data-source-event-collected.png\"><img src=\"https://docs.tealium.com/images/server-side/data-source-event-collected.png\"         alt=\"data-source-event-collected.png\"         title=\"data-source-event-collected.png\"/>    </a></figure><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>カスタムトリガーによってトリガーされる関数は1つだけです。イベントが複数の関数トリガーと一致する場合、最も古い<strong>更新日</strong>を持つ関数のみがトリガーされます。</p><p>詳細については、<a href=\"/ja/server-side/functions/data-transformation-functions/about/\">データ変換関数について</a>を参照してください。</p><h2 id=\"イベントとビジター関数\">イベントとビジター関数</h2><p>イベントとビジター関数は、イベントまたはビジターが処理された後に呼び出されます。次のデータパイプライン図に示されています。</p><figure><a class=\"slb\" href=\"/images/server-side/processedeventfeed-full.png\"><img src=\"https://docs.tealium.com/images/server-side/processedeventfeed-full.png\"         alt=\"ProcessedEventFeed_Full.png\"         title=\"ProcessedEventFeed_Full.png\"/>    </a></figure><p>詳細については、<a href=\"/ja/server-side/functions/event-visitor-functions/about/\">イベントとビジター関数について</a>を参照してください。</p>"
        }  

    , 
        {
            "weight": "15",
            "url": "https://docs.tealium.com/ja/server-side/functions/environment/",
            "title": "実行環境とレート制限",
            "body":"<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>2024年6月15日に、アカウントごとの関数ごとのログメッセージの許容量と、すべての関数のアカウントごとの合計ログメッセージの許容量に制限を導入します。詳細は、<a href=\"#function-limitations\">関数の制限</a>を参照してください。</p><h2 id=\"実行環境\">実行環境</h2><p>関数の実行環境は、<a href=\"https://www.graalvm.org/%22\">GraalVM</a> JavaScriptランタイム上に構築され、ECMAScript 2020互換のコードを実行します。</p><h3 id=\"関数の制限\">関数の制限</h3><ul><li>関数は、<a href=\"/ja/server-side/functions/modules/\">関数用のAPIとライブラリ</a>に記載されているライブラリを除き、サードパーティのライブラリを使用することはできません。</li><li>関数は32MBのメモリを持っています。<br>関数が32MB以上のメモリを使用しようとすると、次のエラーがログに書き込まれます：<br><code>Exception 400 BAD REQUEST - OutOfMemoryError: memory limit 32 mb is exceeded.</code></li><li>最大関数サイズは64KBで、これは約1500行のコードに相当します。<br>64KB以上の関数は、サイズが縮小されるまで保存できません。</li><li>関数のログメッセージは以下のように制限されます：<ul><li><strong>アカウントごとの関数ごとの制限</strong>：1分あたり5MBのログメッセージ。この制限に達すると、関数のログは1分間スロットリングされます。関数がスロットリングされると、情報メッセージはログに書き込まれません。エラーメッセージと警告メッセージは引き続きログに書き込まれます。完全なログは1分後に再開します。</li><li><strong>すべての関数のアカウント制限</strong>：1分あたり50MBのログメッセージ。現在、ログはスロットリングされません。この制限を超えると、Tealiumはログメッセージの数を制限するように要求する場合があります。</li></ul></li></ul><h3 id=\"ランタイムバージョン\">ランタイムバージョン</h3><p>関数の実行環境、つまりランタイムバージョンは、関数のタイプにより異なります：</p><ul><li><strong>データ変換関数</strong> – 現在のランタイムバージョンはTransformation V0です。詳細は、<a href=\"/ja/server-side/functions/data-transformation-functions/about/\">データ変換関数について</a>を参照してください。</li><li><strong>イベントと訪問者の関数</strong> – 最新のランタイムバージョンはAction V3です。既存の関数はAction V2を使用しており、これは非推奨です。詳細は以下を参照してください：<ul><li><a href=\"/ja/server-side/functions/event-visitor-functions/v2-functions/\">イベントと訪問者の関数 V2</a></li><li><a href=\"/ja/server-side/functions/event-visitor-functions/event-visitor-v3/\">イベントと訪問者の関数 V3</a></li><li><a href=\"/ja/server-side/functions/event-visitor-functions/migrate-v2-to-v3/\">V2関数をV3に移行する</a></li></ul></li></ul><p>関数のランタイムバージョンは、コードエディタのコードタブに表示されます。以下に示すように：<figure><a class=\"slb\" href=\"/images/server-side/functions-runtime-version-location.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-runtime-version-location.png\"/>    </a></figure></p><p>ランタイムバージョンは新機能を提供するために更新されることがあります。新しいランタイムバージョンが利用可能になると、以下のようなメッセージが<strong>関数概要</strong>ページに表示されます：<figure><a class=\"slb\" href=\"/images/server-side/functions-new-runtime-available.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-new-runtime-available.png\"         alt=\"新しいランタイムバージョンが利用可能であることを示す警告メッセージ。更新の名前と概要が含まれています。\"         title=\"新しいランタイムバージョンが利用可能であることを示す警告メッセージ。更新の名前と概要が含まれています。\"/>    </a></figure></p><p>Tealiumが新しいランタイムバージョンをリリースすると、古いバージョンは非推奨となり、最終的には廃止されます。使用中のランタイムバージョンが非推奨または廃止された場合、<strong>関数概要</strong>画面と関数の<strong>コード</strong>タブにメッセージが表示されます。</p><h2 id=\"データ変換関数の実行時間制限\">データ変換関数の実行時間制限</h2><p>データ変換関数には以下の実行制限があります：</p><ul><li>1分あたりの実行時間は1時間 OR</li><li>1分あたりの呼び出し回数は250,000回（1時間あたり15mm）</li><li>各関数呼び出しの実行時間は150ミリ秒<br>関数が150ミリ秒の実行時間を超えると、次のエラーがログに書き込まれます：<br><code>Invocation timeout limit of 150 milliseconds is exceeded</code></li></ul><p>これらの実行制限は、アカウントと地域に基づいています。アカウントのすべての関数の実行時間と呼び出し回数の合計は、これらの制限を超えることはできません。</p><p>いずれかの制限を超えると、関数の実行は一時的に停止（スロットリング）されます。以下のメッセージが<strong>関数概要</strong>に表示され、スロットリングされた関数の隣に黄色の警告アイコンが表示されます：</p><figure><a class=\"slb\" href=\"/images/server-side/throttle-msg.png\"><img src=\"https://docs.tealium.com/images/server-side/throttle-msg.png\"         alt=\"過去24時間で、プロファイルの一部の関数がレート制限に達し、スロットリングされています。\"         title=\"過去24時間で、プロファイルの一部の関数がレート制限に達し、スロットリングされています。\"/>    </a></figure><p>スロットリングされた関数の詳細を表示する方法については、<a href=\"/ja/server-side/functions/manage-functions/view-function-statistics/\">関数統計を表示する</a>を参照してください。</p><h2 id=\"イベントと訪問者の関数の実行時間制限\">イベントと訪問者の関数の実行時間制限</h2><p>イベントと訪問者の関数には以下の実行制限があります：</p><ul><li>実行レート：1分あたり180,000イベント</li><li>実行時間：1分あたり8時間</li><li>各関数呼び出しの実行時間：10秒<br>関数が10秒の実行時間を超えると、次のエラーがログに書き込まれます：<br><code>Exception 504 - Invocation timeout limit of 10000 milliseconds is exceeded.</code></li></ul><h2 id=\"実行レートと実行時間例1\">実行レートと実行時間：例1</h2><p>この例では、外部APIと通信する関数が呼び出しごとに約100msかかると仮定します。また、アカウントに設定されている関数は1つだけで、この関数の平均実行レートは1秒あたり1000回の呼び出しとします。</p><p>1分間の時間窓内での実行レートと実行時間は以下の通りです：</p><p>実行レート = 1000 * 60 * 1分 = <strong>1分あたり60,000回の呼び出し</strong></p><p>実行時間 = 1000回/秒 * 100ms / 1000 = 100分 = <strong>1分あたり1.66時間の実行時間</strong></p><p>この場合、実行レートと実行時間はどちらも制限以下です。</p><h2 id=\"実行レートと実行時間例2\">実行レートと実行時間：例2</h2><p>この例では、一時的に外部APIのパフォーマンスが低下し、関数の実行時間が呼び出しごとに800msになると仮定します。つまり、実行時間が8倍になります。</p><p>実行時間 = (1000回/秒 * 100ms / 1000) * 8 = 800分 = <strong>1分あたり13.28時間の実行時間</strong>。</p><p>この場合、実行時間は1分あたり13.28時間で、これは最大8時間/分を超えています。関数の呼び出しはスロットリングされる可能性があります。</p>"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/ja/server-side/functions/event-visitor-functions/v2-functions/",
            "title": "イベントと訪問関数 V2",
            "body":"<p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>Action V2ランタイムは廃止され、サポートされていません。V2ランタイムを使用する関数はまだ実行されていますが、コードの変更を保存することはできません。コードの変更を保存するには、ランタイムバージョンを更新する必要があり、これには関数コードの変更が必要になる場合があります。必要なコード変更については、<a href=\"/ja/server-side/functions/event-visitor-functions/migrate-v2-to-v3/\">V2関数をV3ランタイムに移行する</a>を参照してください。</p><p>新しい関数はデフォルトでV3ランタイムを使用します。詳細については、<a href=\"/ja/server-side/functions/event-visitor-functions/event-visitor-v3/\">イベントと訪問関数 V3</a>を参照してください。</p><h2 id=\"名前付きエクスポート\">名前付きエクスポート</h2><p>Tealiumモジュールは、イベントと訪問関数のために5つの名前付きエクスポートを提供します：<code>auth</code>、<code>event</code>、<code>visitor</code>、<code>store</code>、および<code>tealium</code>。関数は次のようにこれらの名前付きエクスポートをインポートします：</p><pre tabindex=\"0\"><code>import { auth, visitor, event, store, tealium } from &#34;tealium&#34;; </code></pre><h2 id=\"authオブジェクト-authget\">Authオブジェクト: auth.get()</h2><p>イベントと訪問関数は、FacebookやGoogleなどの一部のサービスプロバイダにアクセスするために認証を必要とします。詳細については、<a href=\"/ja/server-side/functions/event-visitor-functions/authentication/\">関数に認証を追加する</a>を参照してください。認証を追加すると、アクセストークンが返されます。</p><p>アクセストークンは<code>auth.get()</code>メソッドに渡され、HTTPリクエストで使用できる認証のIDを返します。</p><table><thead><tr><th><strong>パラメータ</strong></th><th><strong>データ型</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td>authName</td><td>string</td><td>認証の名前を指定します。これは、関数に認証が追加されたときに入力された名前です。</td></tr></tbody></table><h2 id=\"eventオブジェクト\">Eventオブジェクト</h2><p><code>event</code>オブジェクトは、関数がイベントフィードによってトリガーされたときに利用可能で、イベントデータを含みます。</p><table><thead><tr><th><strong>プロパティ</strong></th><th><strong>データ型</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td><code>event.id</code></td><td>string</td><td>TealiumイベントID。</td></tr><tr><td><code>event.visitor_id</code></td><td>string</td><td>Tealium訪問ID。</td></tr><tr><td><code>event.account</code></td><td>string</td><td>Tealiumアカウント。</td></tr><tr><td><code>event.profile</code></td><td>string</td><td>Tealiumプロファイル。</td></tr><tr><td><code>event.data</code></td><td>object</td><td>イベント属性データを含むオブジェクト。例：<code>event.data.udo.page_category</code>や<code>event.data.udo.order_id</code>。</td></tr><tr><td><code>function getAttributeNameById(id)</code></td><td>string</td><td>指定した属性の名前を含む文字列を返します。<code>id</code>は属性IDを指定する文字列です。</td></tr><tr><td><code>function getAttributeValueById(id)</code></td><td>any</td><td>指定した属性の値を返します。<code>id</code>は属性IDを指定する文字列です。</td></tr></tbody></table><h3 id=\"eventオブジェクトの例\">Eventオブジェクトの例</h3><p>以下にイベントオブジェクトデータの例を示します：</p><pre tabindex=\"0\"><code>{  &#34;account&#34;: &#34;your-account&#34;,  &#34;profile&#34;: &#34;main&#34;,  &#34;event_id&#34;: &#34;run-test-event-id&#34;,  &#34;visitor_id&#34;: &#34;run-test-visitor-id&#34;,  &#34;data&#34;: {    &#34;dom&#34;: {      &#34;viewport_height&#34;: 766,      &#34;referrer&#34;: &#34;&#34;,      &#34;viewport_width&#34;: 1440,      &#34;domain&#34;: &#34;www.example.com&#34;,      &#34;title&#34;: &#34;Home Page&#34;,      &#34;query_string&#34;: &#34;q=help&#34;,      &#34;hash&#34;: &#34;&#34;,      &#34;url&#34;: &#34;https://www.example.com/?q=help&#34;,      &#34;pathname&#34;: &#34;/&#34;    },    &#34;udo&#34;: {      &#34;tealium_event&#34;: &#34;page_view&#34;,      &#34;ut.account&#34;: &#34;your-account&#34;,      &#34;ut.visitor_id&#34;: &#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;,      &#34;page_name&#34;: &#34;Home Page&#34;,      &#34;ut.event&#34;: &#34;view&#34;,      &#34;search_keyword&#34;: &#34;help&#34;,      &#34;ut.domain&#34;: &#34;example.com&#34;,      &#34;tealium_profile&#34;: &#34;main&#34;,      &#34;ut.version&#34;: &#34;ut4.46.202006020705&#34;,      &#34;tealium_session_id&#34;: &#34;1609910608323&#34;,      &#34;tealium_account&#34;: &#34;your-account&#34;,      &#34;ut.profile&#34;: &#34;main&#34;,    },    &#34;firstparty_tealium_cookies&#34;: {      &#34;utag_main__sn&#34;: &#34;12&#34;,      &#34;utag_main_dc_visit&#34;: &#34;12&#34;,      &#34;utag_main_ses_id&#34;: &#34;1609910610822&#34;,      &#34;utag_main_dc_region&#34;: &#34;us-east-1&#34;,      &#34;utag_main__st&#34;: &#34;1609913306118&#34;,      &#34;utag_main_v_id&#34;: &#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;,      &#34;utag_main__se&#34;: &#34;66&#34;,      &#34;utag_main__ss&#34;: &#34;0&#34;,      &#34;utag_main_dc_event&#34;: &#34;60&#34;,      &#34;utag_main__pn&#34;: &#34;5&#34;    }  },  &#34;env&#34;: &#34;prod&#34;,  &#34;post_time&#34;: 1537305808000}</code></pre><p>イベントデータは、関数内で以下のようにアクセスできます：</p><pre tabindex=\"0\"><code>const data = {};    // DOM変数はevent.domに格納されています    data.current_url = event?.dom?.url;    // 標準のUDOイベント変数はevent.data.udoに格納されています    data.session_id = event?.data?.udo?.tealium_session_id;    // First Party cookiesはevent.firstparty_tealium_cookiesに格納されています    data.trace_id = event?.firstparty_tealium_cookies?.trace_id;    // メタ変数はevent.metaに格納されています    data.meta_description = event?.meta?.description;    data.tealium_event = event?.data?.udo?.tealium_event;    data.tealium_account = event?.data?.udo?.tealium_account;    data.tealium_profile = event?.data?.udo?.tealium_profile;</code></pre><h2 id=\"storeオブジェクト-storeget\">Storeオブジェクト: store.get()</h2><p><code>store</code>オブジェクトは、キー/値のペア（グローバル変数と呼ばれます）を格納するために使用され、複数の関数でデータを共有するために使用できます。キーは変数の名前です。値は数値または文字列の定数であることができます。関数のコードエディタの<strong>Code</strong>タブでグローバル変数を追加、編集、削除することができます。関数はグローバル変数の値を取得することができますが、変更することはできません。</p><p>V2関数は、<code>store.get()</code>メソッドを呼び出し、キーをパラメータとして渡すことで、キーの値を取得することができます。</p><table><thead><tr><th><strong>パラメータ</strong></th><th><strong>データ型</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td>globalParameterKey</td><td>string</td><td>取得するグローバル変数のキーを指定します。</td></tr></tbody></table><p>グローバル変数の追加、編集、使用についての詳細は、<a href=\"/ja/server-side/functions/manage-functions/manage-global-variables/\">グローバル変数の管理</a>を参照してください。</p><h2 id=\"tealiumオブジェクト-sendcollectevent\">Tealiumオブジェクト: sendCollectEvent()</h2><p><code>sendCollectEvent()</code>メソッドは、イベントをTealium Collect HTTP APIに送信し、文字列を返します。</p><table><thead><tr><th><strong>パラメータ</strong></th><th><strong>データ型</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td>event</td><td>EventsClientEventObject</td><td>Tealium Collect HTTP APIに送信するイベントオブジェクト。</td></tr><tr><td>account</td><td>string</td><td>任意。指定された場合、event.tealium_accountの値を置き換えます。</td></tr><tr><td>profile</td><td>string</td><td>任意。指定された場合、event.tealium_profileの値を置き換えます。</td></tr><tr><td>dataSourceId</td><td>string</td><td>任意。指定された場合、event.tealium_datasourceの値を置き換えます。</td></tr></tbody></table><p>Tealium Collect HTTP APIの<code>Response</code>インターフェースは、リクエストへのレスポンスを表します。<code>Response</code>モデルは<code>fetch</code> APIと同じですが、結果からURLはcollectクライアントで利用できません。</p><h2 id=\"visitorオブジェクト\">Visitorオブジェクト</h2><p><code>visitor</code>オブジェクトは、関数がオーディエンスフィードによってトリガーされたときに利用可能で、訪問データを含みます。</p><table><thead><tr><th><strong>プロパティ</strong></th><th><strong>データ型</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td><code>visitor.metrics</code></td><td>Record&lt;string, number&gt;</td><td>訪問のメトリクス。</td></tr><tr><td><code>visitor.metrics_sets</code></td><td>Tally&lt;string, number&gt;</td><td></td></tr><tr><td><code>visitor.dates</code></td><td>Record&lt;string, number&gt;</td><td>訪問の日付。</td></tr><tr><td><code>visitor.audiences_joined_at</code></td><td>Record&lt;string, number&gt;</td><td>訪問がオーディエンスに参加したタイムスタンプ。</td></tr><tr><td><code>visitor.properties</code></td><td>Record&lt;string, any&gt;</td><td>訪問のプロパティ。</td></tr><tr><td><code>visitor.properties.account</code></td><td>string</td><td>Tealiumアカウント。</td></tr><tr><td><code>visitor.properties.profile</code></td><td>string</td><td>Tealiumプロファイル。</td></tr><tr><td><code>visitor.properties.visitor_id</code></td><td>string</td><td>Tealium訪問ID。</td></tr><tr><td><code>visitor.property_sets</code></td><td>Set&lt;string, any&gt;</td><td></td></tr><tr><td><code>visitor.audiences</code></td><td>string[]</td><td>参加したオーディエンスのリスト。</td></tr><tr><td><code>visitor.badges</code></td><td>string[]</td><td>バッジのリスト。</td></tr><tr><td><code>visitor.creation_ts</code></td><td>number</td><td>訪問の作成タイムスタンプ。</td></tr><tr><td><code>visitor.flags</code></td><td>Map&lt;string, Boolean&gt;</td><td></td></tr><tr><td><code>visitor.current_visit</code></td><td>Record&lt;string, any&gt;</td><td>現在の訪問オブジェクト。</td></tr><tr><td><code>visitor.current_visit.metrics</code></td><td>Record&lt;string, number&gt;</td><td>現在の訪問のメトリクス。</td></tr><tr><td><code>visitor.current_visit.metrics_sets</code></td><td>Tally&lt;string, number&gt;</td><td></td></tr><tr><td><code>visitor.current_visit.dates</code></td><td>Record&lt;string, number&gt;</td><td>現在の訪問の日付。</td></tr><tr><td><code>visitor.current_visit.properties</code></td><td>Record&lt;string, any&gt;</td><td>現在の訪問のプロパティ。</td></tr><tr><td><code>visitor.current_visit.flags</code></td><td>Map&lt;string, Boolean&gt;</td><td>現在の訪問のフラグ。</td></tr><tr><td><code>visitor.current_visit.property_sets</code></td><td>Set&lt;string, any&gt;</td><td>現在の訪問のプロパティセット。</td></tr><tr><td><code>visitor.current_visit.creation_ts</code></td><td>number</td><td>現在の訪問の作成タイムスタンプ。</td></tr><tr><td><code>visitor.current_visit.total_event_count</code></td><td>number</td><td>現在の訪問の総イベント数。</td></tr><tr><td><code>visitor.current_visit.events_compressed</code></td><td>boolean</td><td>現在の訪問のイベントが圧縮されているかどうか。</td></tr><tr><td><code>function getAttributeNameById(id)</code></td><td>string</td><td>指定した属性の名前を含む文字列を返します。<code>id</code>は属性IDを指定する文字列です。</td></tr><tr><td><code>function getAttributeValueById(id)</code></td><td>any</td><td>指定した属性の値を返します。<code>id</code>は属性IDを指定する文字列です。</td></tr></tbody></table><h3 id=\"訪問オブジェクトの例\">訪問オブジェクトの例</h3><p>以下は訪問オブジェクトデータの例です：</p><pre tabindex=\"0\"><code>{  &#34;metrics&#34;: {    &#34;Metric 1&#34;: 1,    &#34;Metric 2&#34;: 2  },  &#34;dates&#34;: {    &#34;Date 1&#34;: 1603373790000,    &#34;Date 2&#34;: 1603373522000,  },  &#34;properties&#34;: {    &#34;profile&#34;: &#34;username&#34;,    &#34;visitor_id&#34;: &#34;017560818b67001bc185a07f1cd703078003405000b7e&#34;,    &#34;account&#34;: &#34;user-account&#34;,  },  &#34;audiences&#34;: [    &#34;Audience 1&#34;,    &#34;Audience 2&#34;  ],  &#34;badges&#34;: [    &#34;Badge 1&#34;,    &#34;Badge 2&#34;  ],  &#34;creation_ts&#34;: 1603373522000,  &#34;current_visit&#34;: {    &#34;metrics&#34;: {      &#34;Metric 1&#34;: 1.3,      &#34;Metric 2&#34;: 6,    },    &#34;dates&#34;: {      &#34;Date 1&#34;: 1603373868000,      &#34;Date 2&#34;: 1603373790000,    },    &#34;properties&#34;: {      &#34;Property 1&#34;: &#34;Chrome&#34;,      &#34;Property 2&#34;: &#34;https://URL-for-website &#34;,    },    &#34;flags&#34;: {      &#34;Flag 1&#34;: true,      &#34;Flag 2&#34;: false    },    &#34;property_sets&#34;: {      &#34;Property Set 1&#34;: [        &#34;Mac desktop&#34;      ],      &#34;Property Set 2&#34;: [        &#34;Chrome&#34;      ]    },    &#34;creation_ts&#34;: 1603373790000,    &#34;total_event_count&#34;: 2,    &#34;events_compressed&#34;: false  },  &#34;audiences_joined_at&#34;: {    &#34;Audience 1&#34;: 1603363523014,    &#34;Audience 2&#34;: 1603363523014  }}</code></pre>"
        }  

    , 
        {
            "weight": "20",
            "url": "https://docs.tealium.com/ja/server-side/functions/code-editor/",
            "title": "関数コードエディタ",
            "body":"<p>Tealiumの関数コードエディタは、関数の作成、構成、テスト、監視、ログの表示、認証トークンの取得のためのタブを提供します。</p><figure><a class=\"slb\" href=\"/images/server-side/functions-code-editor.png\"><img src=\"https://docs.tealium.com/images/server-side/functions-code-editor.png\"         alt=\"functions-code-editor.png\"         title=\"functions-code-editor.png\"/>    </a></figure><h2 id=\"コードタブ\">コードタブ</h2><p>新しい関数を作成すると、<strong>コード</strong>タブにはコメントで説明された例示関数コードが表示されます。この例示コードを修正したり、自分のコードに置き換えることができます。</p><h2 id=\"モニタリングタブ\">モニタリングタブ</h2><p><strong>モニタリング</strong>タブでは、過去1時間、12時間、1日、7日、30日の関数統計を表示します：</p><ul><li>呼び出し</li><li>平均実行時間</li><li>エラー</li></ul><h2 id=\"ログタブ\">ログタブ</h2><p><strong>ログ</strong>タブでは、関数実行からのログファイルのリストを表示します。ログファイルは30日間保持されます。関数はJavaScriptコンソール関数を使用してメッセージとエラーをログに書き込むことができます。詳細については、<a href=\"/ja/server-side/functions/modules/#javascript-console-api\">JavaScript console API</a>を参照してください。</p><h2 id=\"構成タブ\">構成タブ</h2><p><strong>構成</strong>タブを使用して、関数名を変更したり、関数についてのメモを追加または変更したり、関数をトリガーするイベントやオーディエンスを変更したりします。フィードは初期関数構成後には変更できません。</p><h2 id=\"テストタブ\">テストタブ</h2><p><strong>テスト</strong>タブを使用して、テストペイロードを作成し、関数をテストします。<strong>テスト</strong>タブに表示される例示ペイロードを修正したり、ウェブサイトからのテストデータを使用したりできます。ウェブサイトからのテストデータの取得方法についての詳細は、<a href=\"/ja/server-side/functions/manage-functions/test-functions/\">Test Functions</a>を参照してください。テスト結果とログファイルは、関数が実行された後に利用可能です。</p><h2 id=\"アドバンスタブ\">アドバンスタブ</h2><p><strong>アドバンス</strong>タブを使用して、関数に認証トークンを割り当てます。</p>"
        }  

    , 
        {
            "weight": "25",
            "url": "https://docs.tealium.com/ja/server-side/functions/modules/",
            "title": "関数用のAPIとライブラリ",
            "body":"<p>関数では以下のAPIとライブラリを使用できます：</p><ul><li>Crypto-ES.js</li><li>TweetNaCl.js</li><li>JavaScript Console API</li></ul><h2 id=\"crypto-esjs\">Crypto-ES.js</h2><p>Crypto-ES.jsは、ハッシュ化、エンコーディング、暗号アルゴリズムを提供する暗号化アルゴリズムのライブラリです。詳細については、<a href=\"https://www.npmjs.com/package/crypto-es/v/1.2.7\">Crypto-ES</a>を参照してください。</p><p>以下の例は、テキストの暗号化と復号化の方法を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">encrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">encrypt</span>(<span style=\"color:#e6db74\">&#34;Message&#34;</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">encrypted</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">var</span> <span style=\"color:#a6e22e\">decrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">decrypt</span>(<span style=\"color:#a6e22e\">encrypted</span>, <span style=\"color:#e6db74\">&#34;Secret Passphrase&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>.<span style=\"color:#a6e22e\">stringify</span>(<span style=\"color:#a6e22e\">decrypted</span>));</span></span></code></pre></div><h3 id=\"aes暗号化のgcmモード\">AES暗号化のGCMモード</h3><p>Crypto-ESライブラリは、AES暗号化のGCMモードをサポートしています。以下の例は、AES GCMモードを使用してテキストを暗号化および復号化する方法を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// crypto-es libの一部としてインポート</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es&#34;</span>;</span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// コンピューティングリソースを節約するために名前付きエクスポートとしてインポート（全ライブラリが上記のようにインポートされている場合は機能しません）</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">GCM</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/mode-gcm.js&#34;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// 暗号化</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">msg</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;Original Message&#34;</span>;</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">key</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Hex</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;0123456789ABCDEF11113333555577770123456789ABCDEF1111333355557777&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">iv</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Hex</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;0102030405060708090A0B0C&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">authData</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>.<span style=\"color:#a6e22e\">parse</span>(<span style=\"color:#e6db74\">&#34;Additional authentication data&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">encrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">encrypt</span>(<span style=\"color:#a6e22e\">msg</span>, <span style=\"color:#a6e22e\">key</span>, { <span style=\"color:#a6e22e\">iv</span>, <span style=\"color:#a6e22e\">mode</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span> });</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">authTag</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span>.<span style=\"color:#a6e22e\">mac</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">algo</span>.<span style=\"color:#a6e22e\">AES</span>, <span style=\"color:#a6e22e\">key</span>, <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">iv</span>,  <span style=\"color:#a6e22e\">authData</span>, <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">ciphertext</span>, <span style=\"color:#ae81ff\">16</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">enveloped</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">iv</span>.<span style=\"color:#a6e22e\">toString</span>() <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">encrypted</span>.<span style=\"color:#a6e22e\">ciphertext</span>.<span style=\"color:#a6e22e\">toString</span>() <span style=\"color:#f92672\">+</span> <span style=\"color:#a6e22e\">authTag</span>.<span style=\"color:#a6e22e\">toString</span>();</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;encrypted: &#34;</span>, <span style=\"color:#a6e22e\">encrypted</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;authTag: &#34;</span>, <span style=\"color:#a6e22e\">authTag</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;enveloped: &#34;</span>, <span style=\"color:#a6e22e\">enveloped</span>);</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\">// 復号化</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">decrypted</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">AES</span>.<span style=\"color:#a6e22e\">decrypt</span>(<span style=\"color:#a6e22e\">encrypted</span>, <span style=\"color:#a6e22e\">key</span>, { <span style=\"color:#a6e22e\">iv</span>, <span style=\"color:#a6e22e\">mode</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">mode</span>.<span style=\"color:#a6e22e\">GCM</span> });</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;decrypted: &#34;</span>, <span style=\"color:#a6e22e\">decrypted</span>.<span style=\"color:#a6e22e\">toString</span>(<span style=\"color:#a6e22e\">CryptoES</span>.<span style=\"color:#a6e22e\">enc</span>.<span style=\"color:#a6e22e\">Utf8</span>));</span></span></code></pre></div><h3 id=\"sha3アルゴリズム\">SHA3アルゴリズム</h3><p>crypto-ESライブラリは、オリジナルのSHA3アルゴリズムを提供しています。以下の例は、SHA3アルゴリズムの使用方法を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">SHA3</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/sha3-original.js&#34;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">SHA3</span>(<span style=\"color:#e6db74\">&#34;Original Message&#34;</span>, { <span style=\"color:#a6e22e\">outputLength</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">256</span> });</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;hash: &#34;</span>, <span style=\"color:#a6e22e\">hash</span>);</span></span></code></pre></div><h3 id=\"crc32アルゴリズム\">CRC32アルゴリズム</h3><p>crypto-ESライブラリは、CRC32アルゴリズムを提供しています。各CRC32関数は、データを表す引数と、オプションの2番目の引数（ローリングCRCの開始シード）を取ります。戻り値は符号付き32ビット整数です。サポートされている関数は次のとおりです：</p><ul><li><code>CRC32.buf(byte array[, seed])</code> – 最初の引数は8ビット符号なし整数のシーケンス（<code>Uint8Array</code>またはバイトの配列）です。</li><li><code>CRC32.bstr(binary string[, seed])</code> – 最初の引数はバイナリ文字列で、バイト<code>i</code>はUCS-2文字の低バイトです：<code>str.charCodeAt(i) &amp; 0xFF</code></li><li><code>CRC32.str(string[, seed])</code> – 最初の引数は標準的なJS文字列で、UTF-8エンコーディングのハッシュを計算します。</li></ul><p>以下の例は、CRC32アルゴリズムの使用方法を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CRC32</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;crypto-es/lib/crc32.js&#34;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">CRC32</span>.<span style=\"color:#a6e22e\">str</span>(<span style=\"color:#e6db74\">&#34;Original Message&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;hex value: &#34;</span>, (<span style=\"color:#a6e22e\">hash</span> <span style=\"color:#f92672\">&gt;&gt;&gt;</span> <span style=\"color:#ae81ff\">0</span>).<span style=\"color:#a6e22e\">toString</span>(<span style=\"color:#ae81ff\">16</span>));</span></span></code></pre></div><h2 id=\"tweetnacljs\">TweetNaCl.js</h2><p>TweetNaClは、秘密鍵認証暗号化、公開鍵認証暗号化、ハッシュ化、公開鍵署名を実装する暗号ライブラリです。TweetNaClライブラリは、イベント関数と訪問者関数のみで利用可能です。</p><p>イベント関数または訪問者関数にTweetNaCl.jsモジュールを次のようにインポートします：</p><p><code>import nacl from 'tweetnacl';</code></p><p>詳細については、<a href=\"https://www.npmjs.com/package/tweetnacl\">NPM TweetNaCl.js</a>を参照してください。</p><h2 id=\"javascript-console-api\">JavaScript console API</h2><p>JavaScriptのコンソール関数を使用して、メッセージとエラーをログに書き込みます。</p><p><code>console.log()</code> , <code>console.info(),</code> および <code>console.debug()</code> ログメッセージは情報出力ストリームに行きます。<code>console.warn()</code> および <code>console.error()</code> ログメッセージはエラー出力ストリームに行きます。</p><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>情報とエラーの出力ストリームはそれぞれ関数の呼び出し毎に10Kbのデータに制限されています。ログメッセージがこの制限を超えると、ログファイルには最初の10Kbのデータが含まれ、次のメッセージで終わります：<br><code>出力が大きすぎて切り捨てられました。</code></p><p>コンソールオブジェクトは、関数でサポートされている他のメソッドを提供します。詳細については、コンソールオブジェクトのJavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\" title=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\">仕様</a>を参照してください。以下の追加のコンソールメソッドがサポートされています：</p><ul><li><code>assert()</code></li><li><code>count()</code></li><li><code>countReset()</code></li><li><code>group()</code></li><li><code>groupEnd()</code></li><li><code>time()</code></li><li><code>timeEnd()</code></li><li><code>timeLog()</code></li></ul><h3 id=\"console-apiの出力\">Console APIの出力</h3><p>ほとんどのコンソール関数の出力は、<strong>ログ</strong>表示の<strong>メッセージ</strong>セクションに表示されます。例えば：</p><pre tabindex=\"0\"><code>メッセージ：関数開始</code></pre><p><code>console.warn()</code> および <code>console.error()</code> の出力は、<strong>メッセージ</strong>出力の下の<strong>エラー</strong>セクションに表示されます：</p><pre tabindex=\"0\"><code>エラー：警告 - ページが見つかりませんエラー - 変数が定義されていません</code></pre><h3 id=\"consoleassert\">console.assert()</h3><p>関数がEventStreamでトリガーされ、<code>console.assert()</code>が次のように呼び出された場合：</p><pre tabindex=\"0\"><code>console.assert(visitor, &#34;visitor not defined&#34;);</code></pre><p><code>visitor</code>オブジェクトは、トリガーがAudienceStreamの場合にのみ定義されるため、アサーションは偽であり、出力は次のようになります：</p><pre tabindex=\"0\"><code>アサーションに失敗しました：visitorが定義されていません</code></pre><h3 id=\"consolegroupとconsolegroupend\">console.group()とconsole.groupEnd()</h3><p><code>console.group()</code>と<code>console.groupEnd()</code>は、ログに関連メッセージをフォーマットするために使用できます。<code>console.group()</code>に続く<code>console.log()</code>メッセージはログにインデントされます。インデントは<code>console.groupEnd()</code>が呼び出された後に終了します。</p><p>関数コードに以下の内容が含まれている場合：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">group</span>(<span style=\"color:#e6db74\">&#34;Event info:&#34;</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Account: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#34;Visitor ID: &#34;</span>, <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">visitor_id</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">groupEnd</span>();</span></span></code></pre></div><p>出力は次のようになります：</p><pre tabindex=\"0\"><code>イベント情報：  アカウント： Acme Mfg  訪問者ID： 017407a1d9e50019633c3cea732703079011607100bd6</code></pre><h3 id=\"consoletimeとconsoletimelog\">console.time()とconsole.timeLog()</h3><p>関数が<code>console.time()</code>を呼び出すと、出力はありません。<code>console.time()</code>がその文字列で呼び出された時間が記録されます。<code>console.timeLog()</code>が同じ文字列で呼び出されると、出力は指定された文字列に続く経過時間です：</p><pre tabindex=\"0\"><code>現在の時間： : 1ms</code></pre><p>関数が<code>console.timeEnd()</code>を呼び出した後、<code>console.time()</code>が再度呼び出されるまで<code>console.timeLog()</code>を呼び出すことはできません。</p><h3 id=\"consolecountとconsolecountreset\">console.count()とconsole.countReset()</h3><p><code>console.count()</code>が同じ文字列で呼び出されるたびに、カウントが増加します。<code>console.count()</code>の出力は、文字列に続くカウントです。<code>console.count(&quot;Current count: &quot;);</code>が2回呼び出された場合、出力は次のようになります：</p><pre tabindex=\"0\"><code>現在のカウント： : 1現在のカウント： : 2</code></pre><p><code>console.countReset()</code>は、指定された文字列のカウントをゼロにリセットします。</p>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/ja/server-side/functions/event-visitor-functions/event-visitor-v3/",
            "title": "イベントと訪問関数 V3",
            "body":"<h2 id=\"入力データ\">入力データ</h2><p>入力パラメータは、関数のタイプにより異なります：</p><ul><li>イベント関数には <code>event</code> パラメータがあります。<code>visit</code> と <code>visitor</code> パラメータは null です。</li><li>訪問関数には <code>visitor</code> と <code>visit</code> パラメータがあります。<code>event</code> パラメータは null です。</li></ul><p>イベントと訪問関数には、認証を取得し、グローバル変数を取得するための <code>helper.getAuth()</code> と <code>helper.getGlobalVariable()</code> を提供する追加のパラメータ、<code>helper</code> があります。</p><h2 id=\"activate-関数\">activate() 関数</h2><p>V3イベントまたは訪問関数を作成すると、関数コードエディタの <strong>Code</strong> タブにデフォルトのコードが表示されます。このコードにはグローバル <code>activate</code> 関数が含まれています。関数の入力パラメータは <code>activate()</code> 関数に渡されます。以下の例はイベント関数の <code>activate()</code> を示しています：</p><pre tabindex=\"0\"><code>activate(async ({ event, helper }) =&gt; {  ...});</code></pre><p>デフォルトのコードの最初と最後の行の間のコードを、あなたのニーズに合わせて変更します。</p><h2 id=\"track-関数\">track() 関数</h2><p>関数はグローバル <code>track()</code> 関数を使用して、イベントをTealium Collectに送信することができます。<code>track()</code> には2つの入力パラメータがあります：</p><ul><li><code>data</code> オブジェクト – Tealium Collectに送信するイベントデータ。</li><li><code>config</code> オブジェクト – 任意。以下のフィールドを含みます：<ul><li><code>tealium_account</code> – アカウント名を指定します。</li><li><code>tealium_profile</code> – プロファイルを指定します。</li><li><code>tealium_datasource</code> – データソースを指定します。<br>アカウント、プロファイル、データソースのフィールドが <code>data</code> オブジェクトに含まれている場合、<code>config</code> オブジェクトは必要ありません。</li></ul></li></ul><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>各関数の呼び出しは、<code>track()</code> を最大6回まで呼び出すことができます。</p><p>以下の例は、<code>data</code> と <code>config</code> パラメータで <code>track()</code> を呼び出す例を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">data</span>, {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;x3p4b7&#39;</span></span></span><span style=\"display:flex;\"><span>        })  </span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>        <span style=\"color:#75715e\">// レスポンスを処理するコードはここに入ります</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span></span></span><span style=\"display:flex;\"><span>        })</span></span></code></pre></div><p>以下の例は、<code>data</code> パラメータのみで <code>track()</code> を呼び出す例を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">data</span>)  </span></span><span style=\"display:flex;\"><span>  .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#75715e\">// レスポンスを処理するコードはここに入ります</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#75715e\"></span></span></span><span style=\"display:flex;\"><span>  })</span></span></code></pre></div><p><code>track()</code> 関数の詳細な例については、<a href=\"/ja/server-side/functions/event-visitor-functions/v3-function-examples/#send-an-event-to-the-tealium-collect-http-api\">Tealium Collect HTTP APIにイベントを送信する</a>を参照してください。</p><h2 id=\"イベントオブジェクト\">イベントオブジェクト</h2><p><code>event</code> オブジェクトはイベント関数で利用可能で、イベントデータを含みます。</p><table><thead><tr><th>プロパティ</th><th>データタイプ</th><th>説明</th></tr></thead><tbody><tr><td><code>account</code></td><td>string</td><td>Tealiumのアカウント。</td></tr><tr><td><code>data</code></td><td>object</td><td>イベントデータを含むデータレイヤー。</td></tr><tr><td><code>env</code></td><td>string</td><td>実行環境。値は <code>qa</code>、<code>dev</code>、または <code>prod</code> です。</td></tr><tr><td><code>event_id</code></td><td>string</td><td>TealiumのイベントID。</td></tr><tr><td><code>post_time</code></td><td>number</td><td>イベントが発生した時刻を示すタイムスタンプ。</td></tr><tr><td><code>profile</code></td><td>string</td><td>Tealiumのプロファイル。</td></tr><tr><td><code>useragent</code></td><td>string</td><td>ブラウザなどのユーザーエージェントを表す文字列。</td></tr><tr><td><code>visitor_id</code></td><td>string</td><td>Tealiumの訪問ID。</td></tr><tr><td><code>function getAttributeNameById(id)</code></td><td>string</td><td>指定した属性の名前を含む文字列を返します。<code>id</code> は属性IDを指定する文字列です。</td></tr><tr><td><code>function getAttributeValueById(id)</code></td><td>any</td><td>指定した属性の値を返します。<code>id</code> は属性IDを指定する文字列です。</td></tr></tbody></table><h3 id=\"データオブジェクト\">データオブジェクト</h3><p><code>data</code> オブジェクトは、着信イベントのデータを含みます。</p><table><thead><tr><th>プロパティ</th><th>タイプ</th><th>説明</th></tr></thead><tbody><tr><td><code>dom</code></td><td>Object</td><td>標準的なページデータ。</td></tr><tr><td><code>firstparty_tealium_cookies</code></td><td>Object</td><td>ブラウザからのすべてのクッキー。</td></tr><tr><td><code>js</code></td><td>Object</td><td>ページからのJavaScript変数。</td></tr><tr><td><code>meta</code></td><td>Object</td><td>ウェブページのメタタグからのデータ。</td></tr><tr><td><code>udo</code></td><td>Object</td><td>着信イベントのプロパティを含むユニバーサルデータオブジェクト。</td></tr></tbody></table><h3 id=\"イベントオブジェクトの例\">イベントオブジェクトの例</h3><p>以下は、イベントオブジェクトデータの例を示しています：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;event_id&#34;</span>: <span style=\"color:#e6db74\">&#34;run-test-event-id&#34;</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;run-test-visitor-id&#34;</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;data&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dom&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;viewport_height&#34;</span>: <span style=\"color:#ae81ff\">766</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;referrer&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;viewport_width&#34;</span>: <span style=\"color:#ae81ff\">1440</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;domain&#34;</span>: <span style=\"color:#e6db74\">&#34;www.example.com&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;title&#34;</span>: <span style=\"color:#e6db74\">&#34;Home Page&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;query_string&#34;</span>: <span style=\"color:#e6db74\">&#34;q=help&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;hash&#34;</span>: <span style=\"color:#e6db74\">&#34;&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;url&#34;</span>: <span style=\"color:#e6db74\">&#34;https://www.example.com/?q=help&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;pathname&#34;</span>: <span style=\"color:#e6db74\">&#34;/&#34;</span></span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;udo&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_event&#34;</span>: <span style=\"color:#e6db74\">&#34;page_view&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;page_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Home Page&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.event&#34;</span>: <span style=\"color:#e6db74\">&#34;view&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;search_keyword&#34;</span>: <span style=\"color:#e6db74\">&#34;help&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.domain&#34;</span>: <span style=\"color:#e6db74\">&#34;example.com&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.version&#34;</span>: <span style=\"color:#e6db74\">&#34;ut4.46.202006020705&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_session_id&#34;</span>: <span style=\"color:#e6db74\">&#34;1609910608323&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;tealium_account&#34;</span>: <span style=\"color:#e6db74\">&#34;your-account&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;ut.profile&#34;</span>: <span style=\"color:#e6db74\">&#34;main&#34;</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;firstparty_tealium_cookies&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__sn&#34;</span>: <span style=\"color:#e6db74\">&#34;12&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_visit&#34;</span>: <span style=\"color:#e6db74\">&#34;12&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_ses_id&#34;</span>: <span style=\"color:#e6db74\">&#34;1609910610822&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_region&#34;</span>: <span style=\"color:#e6db74\">&#34;us-east-1&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__st&#34;</span>: <span style=\"color:#e6db74\">&#34;1609913306118&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_v_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0176cb4f3482110a5ba4702e147b0006d005a065104f2&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__se&#34;</span>: <span style=\"color:#e6db74\">&#34;66&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__ss&#34;</span>: <span style=\"color:#e6db74\">&#34;0&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main_dc_event&#34;</span>: <span style=\"color:#e6db74\">&#34;60&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;utag_main__pn&#34;</span>: <span style=\"color:#e6db74\">&#34;5&#34;</span></span></span><span style=\"display:flex;\"><span>    }</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;env&#34;</span>: <span style=\"color:#e6db74\">&#34;prod&#34;</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;post_time&#34;</span>: <span style=\"color:#ae81ff\">1537305808000</span></span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div><h2 id=\"ヘルパーオブジェクト\">ヘルパーオブジェクト</h2><p><code>helper</code> オブジェクトは <code>helper.getGlobalVariable()</code> と <code>helper.getAuth()</code> メソッドを提供します。</p><h3 id=\"helpergetglobalvariable\"><code>helper.getGlobalVariable()</code></h3><p>関数は <code>helper.getGlobalVariable()</code> を使用してグローバル変数を取得し、グローバル変数のキーをパラメータとして渡します：</p><pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {  console.log(helper.getGlobalVariable(&#34;TEST_GLOBAL_VAR&#34;));});</code></pre><p>グローバル変数の追加と編集についての詳細は、<a href=\"/ja/server-side/functions/manage-functions/manage-global-variables/\">グローバル変数の管理</a>を参照してください。</p><h3 id=\"helpergetauth\"><code>helper.getAuth()</code></h3><p>関数は <code>helper.getAuth()</code> を使用して、関数に追加された認証を取得します。関数は認証トークンを <code>helper.getAuth()</code> に渡します：</p><pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {    console.log(helper.getAuth(&#34;auth_token_name&#34;));})</code></pre><p>認証トークンは、認証が関数に追加されたときに作成されます。関数に認証を追加する方法については、<a href=\"/ja/server-side/functions/event-visitor-functions/authentication/\">イベントまたは訪問関数に認証を追加する</a>を参照してください。</p><h2 id=\"訪問オブジェクト\">訪問オブジェクト</h2><p><code>visitor</code> オブジェクトは訪問関数で利用可能で、訪問データを含みます。</p><table><thead><tr><th><strong>プロパティ</strong></th><th><strong>データタイプ</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td><code>badges</code></td><td>string[]</td><td>バッジ属性。</td></tr><tr><td><code>metrics</code></td><td>object(key, number)</td><td>数値属性。</td></tr><tr><td><code>properties</code></td><td>object(key, string)</td><td>文字列属性。</td></tr><tr><td><code>dates</code></td><td>object(key, epoch)</td><td>エポック形式の日付属性。</td></tr><tr><td><code>flags</code></td><td>object(key, boolean)</td><td>ブール属性。</td></tr><tr><td><code>metrics_sets</code></td><td>object(key, object(key, number))</td><td>テリー属性。</td></tr><tr><td><code>property_sets</code></td><td>object(key, string[])</td><td>文字列のセット属性。</td></tr><tr><td><code>funnels</code></td><td>object (例を参照)</td><td>ファネル属性。</td></tr><tr><td><code>sequences</code></td><td>object (例を参照)</td><td>タイムライン属性。</td></tr><tr><td><code>property_lists</code></td><td>object(key, string[])</td><td>文字列の配列属性。</td></tr><tr><td><code>metric_lists</code></td><td>object(key, number[])</td><td>数値の配列属性。</td></tr><tr><td><code>flag_lists</code></td><td>object(key, boolean[])</td><td>ブール値の配列属性。</td></tr><tr><td><code>secondary_ids</code></td><td>string</td><td>メールアドレス、ソーシャルメディアID、または顧客IDなどのユーザー識別子。</td></tr><tr><td><code>audiences</code></td><td>string[]</td><td>訪問が現在所属しているオーディエンス。</td></tr><tr><td><code>creation_ts</code></td><td>epoch</td><td>訪問の作成タイムスタンプ。</td></tr><tr><td><code>new_visitor</code></td><td>boolean</td><td>これが新しい訪問であることを示します。</td></tr><tr><td><code>audiences_joined_at</code></td><td>number</td><td>訪問がオーディエンスに参加したときのタイムスタンプ。</td></tr><tr><td><code>current_visit</code></td><td>visit object</td><td>現在の訪問のデータ。</td></tr><tr><td><code>function getAttributeNameById(id)</code></td><td>string</td><td>指定した属性IDの名前を含む文字列を返します。<code>id</code>は属性IDを含む文字列です。</td></tr><tr><td><code>function getAttributeValueById(id)</code></td><td>any</td><td>指定した属性IDの値を返します。<code>id</code>は属性IDを含む文字列です。</td></tr></tbody></table><h3 id=\"visitorオブジェクトの例\">Visitorオブジェクトの例</h3><p>以下は<code>visitor</code>オブジェクトデータの例です：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">2</span></span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;dates&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373522000</span>,</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;properties&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;profile&#34;</span>: <span style=\"color:#e6db74\">&#34;username&#34;</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;visitor_id&#34;</span>: <span style=\"color:#e6db74\">&#34;017560818b67001bc185a07f1cd703078003405000b7e&#34;</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;account&#34;</span>: <span style=\"color:#e6db74\">&#34;user-account&#34;</span>,</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;metrics_sets&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Product Categories Purchased&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Shoes&#34;</span>: <span style=\"color:#ae81ff\">1</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Pants&#34;</span>: <span style=\"color:#ae81ff\">3</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Shirts&#34;</span>: <span style=\"color:#ae81ff\">7</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Shorts&#34;</span>: <span style=\"color:#ae81ff\">2</span></span></span><span style=\"display:flex;\"><span>    }</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;sequences&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Hotel Search Timeline&#34;</span>: [</span></span><span style=\"display:flex;\"><span>      {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681858801598</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Paradise Island&#34;</span></span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      },</span></span><span style=\"display:flex;\"><span>      {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860398985</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Skokie&#34;</span></span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      },</span></span><span style=\"display:flex;\"><span>      {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860423335</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Las Vegas&#34;</span></span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      }</span></span><span style=\"display:flex;\"><span>    ]</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;funnels&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Purchase Funnel&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;completed&#34;</span>: <span style=\"color:#66d9ef\">true</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;steps&#34;</span>: {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;1&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624226</span>,</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;product_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Skinny Jeans&#34;</span></span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        },</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;2&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624227</span>,</span></span><span style=\"display:flex;\"><span>        },</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;3&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624228</span>,</span></span><span style=\"display:flex;\"><span>        },</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;4&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624229</span>,</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;order_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0123456789&#34;</span>,</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;order_total&#34;</span>: <span style=\"color:#e6db74\">&#34;34.98&#34;</span></span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      }</span></span><span style=\"display:flex;\"><span>    }</span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;audiences&#34;</span>: [</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;Audience 1&#34;</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;Audience 2&#34;</span></span></span><span style=\"display:flex;\"><span>  ],</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;badges&#34;</span>: [</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;Badge 1&#34;</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#e6db74\">&#34;Badge 2&#34;</span></span></span><span style=\"display:flex;\"><span>  ],</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373522000</span>,</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;current_visit&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1.3</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">6</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dates&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373868000</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;properties&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property 1&#34;</span>: <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property 2&#34;</span>: <span style=\"color:#e6db74\">&#34;https://URL-for-website &#34;</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;flags&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Flag 1&#34;</span>: <span style=\"color:#66d9ef\">true</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Flag 2&#34;</span>: <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;property_sets&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property Set 1&#34;</span>: [</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Mac desktop&#34;</span></span></span><span style=\"display:flex;\"><span>      ],</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property Set 2&#34;</span>: [</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Chrome&#34;</span></span></span><span style=\"display:flex;\"><span>      ]</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;total_event_count&#34;</span>: <span style=\"color:#ae81ff\">2</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;events_compressed&#34;</span>: <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>  },</span></span><span style=\"display:flex;\"><span>  <span style=\"color:#f92672\">&#34;audiences_joined_at&#34;</span>: {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Audience 1&#34;</span>: <span style=\"color:#ae81ff\">1603363523014</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;Audience 2&#34;</span>: <span style=\"color:#ae81ff\">1603363523014</span></span></span><span style=\"display:flex;\"><span>  }</span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div><h2 id=\"visitオブジェクト\">Visitオブジェクト</h2><p><code>visit</code>オブジェクトは訪問関数で利用可能で、現在の訪問のデータを含みます。</p><table><thead><tr><th><strong>プロパティ</strong></th><th><strong>データタイプ</strong></th><th><strong>説明</strong></th></tr></thead><tbody><tr><td><code>metrics</code></td><td>object(key, number)</td><td>数値属性。</td></tr><tr><td><code>properties</code></td><td>object(key, string)</td><td>文字列属性。</td></tr><tr><td><code>dates</code></td><td>object(key, epoch)</td><td>エポック形式の日付属性。</td></tr><tr><td><code>flags</code></td><td>object(key, boolean)</td><td>ブール属性。</td></tr><tr><td><code>metrics_sets</code></td><td>object(key, object(key, number))</td><td>集計属性。</td></tr><tr><td><code>property_sets</code></td><td>object(key, string[])</td><td>文字列のセット属性。</td></tr><tr><td><code>funnels</code></td><td>object (see example)</td><td>ファネル属性。</td></tr><tr><td><code>sequences</code></td><td>object (see example)</td><td>タイムライン属性。</td></tr><tr><td><code>property_lists</code></td><td>object(key, string[])</td><td>文字列の配列属性。</td></tr><tr><td><code>metric_lists</code></td><td>object(key, number[])</td><td>数値の配列属性。</td></tr><tr><td><code>flag_lists</code></td><td>object(key, boolean[])</td><td>ブールの配列属性。</td></tr><tr><td><code>events_compressed</code></td><td>boolean</td><td>イベントが圧縮されているかどうかを示します。</td></tr><tr><td><code>total_event_count</code></td><td>number</td><td>イベントの総数。</td></tr><tr><td><code>creation_ts</code></td><td>number</td><td>訪問作成のタイムスタンプ。</td></tr><tr><td><code>function getAttributeNameById(id)</code></td><td>string</td><td>指定した属性IDの名前を含む文字列を返します。<code>id</code>は属性IDを含む文字列です。</td></tr><tr><td><code>function getAttributeValueById(id)</code></td><td>any</td><td>指定した属性IDの値を返します。<code>id</code>は属性IDを含む文字列です。</td></tr></tbody></table><h3 id=\"visitオブジェクトの例\">Visitオブジェクトの例</h3><p>以下は<code>visit</code>オブジェクトデータの例です：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Metric 1&#34;</span>: <span style=\"color:#ae81ff\">1.3</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Metric 2&#34;</span>: <span style=\"color:#ae81ff\">6</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;dates&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Date 1&#34;</span>: <span style=\"color:#ae81ff\">1603373868000</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Date 2&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;properties&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property 1&#34;</span>: <span style=\"color:#e6db74\">&#34;Chrome&#34;</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property 2&#34;</span>: <span style=\"color:#e6db74\">&#34;https://URL-for-website &#34;</span>,</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;flags&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Flag 1&#34;</span>: <span style=\"color:#66d9ef\">true</span>,</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Flag 2&#34;</span>: <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;metrics_sets&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Product Categories Purchased&#34;</span>: {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Shoes&#34;</span>: <span style=\"color:#ae81ff\">1</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Pants&#34;</span>: <span style=\"color:#ae81ff\">3</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Shirts&#34;</span>: <span style=\"color:#ae81ff\">7</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;Shorts&#34;</span>: <span style=\"color:#ae81ff\">2</span></span></span><span style=\"display:flex;\"><span>      }</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;property_sets&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property Set 1&#34;</span>: [</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Mac desktop&#34;</span></span></span><span style=\"display:flex;\"><span>      ],</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Property Set 2&#34;</span>: [</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#34;Chrome&#34;</span></span></span><span style=\"display:flex;\"><span>      ]</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;sequences&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Hotel Search Timeline&#34;</span>: [</span></span><span style=\"display:flex;\"><span>        {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681858801598</span>,</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Paradise Island&#34;</span></span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        },</span></span><span style=\"display:flex;\"><span>        {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860398985</span>,</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Skokie&#34;</span></span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        },</span></span><span style=\"display:flex;\"><span>        {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1681860423335</span>,</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>              <span style=\"color:#f92672\">&#34;Searched Hotel City&#34;</span>: <span style=\"color:#e6db74\">&#34;Las Vegas&#34;</span></span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      ]</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;funnels&#34;</span>: {</span></span><span style=\"display:flex;\"><span>      <span style=\"color:#f92672\">&#34;Purchase Funnel&#34;</span>: {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;completed&#34;</span>: <span style=\"color:#66d9ef\">true</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#f92672\">&#34;steps&#34;</span>: {</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;1&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624226</span>,</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>              <span style=\"color:#f92672\">&#34;product_name&#34;</span>: <span style=\"color:#e6db74\">&#34;Skinny Jeans&#34;</span></span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>          },</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;2&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624227</span>,</span></span><span style=\"display:flex;\"><span>          },</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;3&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624228</span>,</span></span><span style=\"display:flex;\"><span>          },</span></span><span style=\"display:flex;\"><span>          <span style=\"color:#f92672\">&#34;4&#34;</span>: {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;timestamp&#34;</span>: <span style=\"color:#ae81ff\">1636661624229</span>,</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#f92672\">&#34;snapshot&#34;</span>: {</span></span><span style=\"display:flex;\"><span>              <span style=\"color:#f92672\">&#34;order_id&#34;</span>: <span style=\"color:#e6db74\">&#34;0123456789&#34;</span>,</span></span><span style=\"display:flex;\"><span>              <span style=\"color:#f92672\">&#34;order_total&#34;</span>: <span style=\"color:#e6db74\">&#34;34.98&#34;</span></span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>          }</span></span><span style=\"display:flex;\"><span>        }</span></span><span style=\"display:flex;\"><span>      },</span></span><span style=\"display:flex;\"><span>    },</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;creation_ts&#34;</span>: <span style=\"color:#ae81ff\">1603373790000</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;total_event_count&#34;</span>: <span style=\"color:#ae81ff\">2</span>,</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#f92672\">&#34;events_compressed&#34;</span>: <span style=\"color:#66d9ef\">false</span></span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div>"
        }  

    , 
        {
            "weight": "30",
            "url": "https://docs.tealium.com/ja/server-side/functions/best-practices/",
            "title": "関数のベストプラクティス",
            "body":"<h2 id=\"実行時間を決定するためのテストを実行する\">実行時間を決定するためのテストを実行する</h2><p>データ変換関数の実行時間は150ミリ秒に制限されています。イベントと訪問の関数は、実行時間が10秒に制限されています。</p><p>関数の実行時間に影響を与える要素は多くあります。関数が許された時間内に実行できるかを確認するためには、予想されるイベントペイロードで複数のテストを実行します。</p><h2 id=\"ユニバーサルデータオブジェクトudoを正規化する\">ユニバーサルデータオブジェクト（UDO）を正規化する</h2><p>データレイヤーには、イベントが発生したページに関する基本情報が含まれています。UDOは、特定のイベントタイプの情報を含むより動的な構造で、これはイベントのサイズが変動する可能性があることを意味します。推奨される最大イベントサイズは50KBです。データをコンパクトに保つために、冗長なデータエントリを削除します。同じデータが複数のフィールド（例えば、データレイヤーとUDO）に存在する場合、それはUDOからの削除候補です。特定のイベントタイプに必要ないデータの塊も、イベントUDOからの削除候補です。</p><h2 id=\"標準モジュールの部分的なインポートを使用する\">標準モジュールの部分的なインポートを使用する</h2><p>実行環境は、CryptoESを含む部分的なインポートをサポートする標準モジュールを提供します。</p><p>モジュール全体をインポートするのではなく、必要な機能だけをインポートします。例えば：</p><pre tabindex=\"0\"><code>import { MD5 } from &#39;crypto-es/lib/md5.js&#39;;</code></pre><h2 id=\"デバッグ用のログメッセージの使用を避ける\">デバッグ用のログメッセージの使用を避ける</h2><p>関数を本番環境に公開する前に、デバッグ目的で使用される<code>console.log</code>メッセージを削除またはコメントアウトします。</p><p>例えば、ログに全イベントを送るために<code>JSON.stringify</code>を使用するのを避けます。代わりに、次の例のように特定の変数のログメッセージを使用します：</p><pre tabindex=\"0\"><code>console.log(event.data.udo.property_to_track);</code></pre><h2 id=\"flatten組み込みモジュールを使用する\">flatten()組み込みモジュールを使用する</h2><p>組み込みの<code>flatten()</code>モジュールは、任意のネストされたオブジェクトをフラット化するために使用できます。これは、データ変換関数に特に有用です。変換関数は、オブジェクトの配列やネストされたオブジェクトなどのネストされたデータ構造を扱うことができますが、入力イベントをフラット化する必要があります。</p><h2 id=\"javascriptの最適化を使用する\">JavaScriptの最適化を使用する</h2><p>配列やオブジェクトのプロパティを反復処理するなど、集中的なタスクにはJavaScriptの最適化を使用します。</p><h3 id=\"配列の反復処理の例\">配列の反復処理の例</h3><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">array</span> <span style=\"color:#f92672\">=</span> [<span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#ae81ff\">3</span>];</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>.<span style=\"color:#a6e22e\">length</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">arrayLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">arrayItem</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">array</span>[<span style=\"color:#a6e22e\">i</span>];</span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div><h3 id=\"オブジェクトのプロパティの反復処理の例\">オブジェクトのプロパティの反復処理の例</h3><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">obj</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">a</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">1</span>, <span style=\"color:#a6e22e\">b</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">2</span>, <span style=\"color:#a6e22e\">c</span><span style=\"color:#f92672\">:</span> <span style=\"color:#ae81ff\">3</span> };</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keys</span> <span style=\"color:#f92672\">=</span> Object.<span style=\"color:#a6e22e\">getOwnPropertyNames</span>(<span style=\"color:#a6e22e\">obj</span>);</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keysLength</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>.<span style=\"color:#a6e22e\">length</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">for</span> (<span style=\"color:#66d9ef\">let</span> <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>; <span style=\"color:#a6e22e\">i</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#a6e22e\">keysLength</span>; <span style=\"color:#a6e22e\">i</span><span style=\"color:#f92672\">++</span>) {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">keyName</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">keys</span>[<span style=\"color:#a6e22e\">i</span>];</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">value</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">obj</span>[<span style=\"color:#a6e22e\">keyName</span>];</span></span><span style=\"display:flex;\"><span>}</span></span></code></pre></div>"
        }  

    , 
        {
            "weight": "40",
            "url": "https://docs.tealium.com/ja/server-side/functions/event-visitor-functions/migrate-v2-to-v3/",
            "title": "V2関数をV3ランタイムに移行する",
            "body":"<h2 id=\"v3とv2の関数の違い\">V3とV2の関数の違い</h2><p>V3ランタイムを使用するイベントとビジター関数は、V2関数と以下のように異なります：</p><ul><li><strong>パラメータと名前付きエクスポート</strong> – 入力データは名前付きエクスポートではなく、パラメータとして提供されます。<ul><li>イベント関数には二つのパラメータがあります：<code>event</code>と<code>helper</code>。</li><li>ビジター関数には三つのパラメータがあります：<code>visitor</code>、<code>visit</code>、そして<code>helper</code>。</li></ul></li><li><strong>ヘルパー関数</strong> – <code>helper</code>オブジェクトは認証トークンIDを取得したり、グローバル変数を取得するために使用されます。<ul><li><code>auth.get()</code>は<code>helper.getAuth()</code>に置き換えられました。</li><li><code>store.get()</code>は<code>helper.getGlobalVariable()</code>に置き換えられました。</li></ul></li><li><strong>イベントの収集</strong><ul><li><code>tealium.sendCollectEvent()</code>は、名前付きパラメータを使用する<code>track()</code>に置き換えられました。</li></ul></li></ul><p class=\"note\"><i class=\"fa fa-exclamation-triangle\"></i>データ変換関数は<strong>Transformation V0</strong>ランタイムを使用し、V3ランタイムのリリースには影響を受けません。</p><h3 id=\"v2関数の例\">V2関数の例</h3><p>以下のコード例は、イベントを収集エンドポイントに送信するV2イベント関数と、このイベント関数のV3バージョンを示しています。</p><div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;tealium&#34;</span>;</span></span><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> () =&gt; {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">searchQuery</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">URLSearchParams</span>({ <span style=\"color:#a6e22e\">path</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">pathname</span>, <span style=\"color:#a6e22e\">query</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">search_query</span> });</span></span><span style=\"display:flex;\"><span>    </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">fetch</span>(<span style=\"color:#e6db74\">`https://getnew.event.com?</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">searchQuery</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">`</span>)</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>) {</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);</span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">json</span>();</span></span><span style=\"display:flex;\"><span>        });</span></span><span style=\"display:flex;\"><span>    </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tealium</span>.<span style=\"color:#a6e22e\">sendCollectEvent</span>(</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">newEvent</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;abc123&#39;</span>)</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>){</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);</span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">text</span>();</span></span><span style=\"display:flex;\"><span>        })</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">data</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Result : &#39;</span>, <span style=\"color:#a6e22e\">data</span>))</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#66d9ef\">catch</span>(<span style=\"color:#a6e22e\">error</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">error</span>(<span style=\"color:#e6db74\">&#39;Error:&#39;</span>, <span style=\"color:#a6e22e\">error</span>.<span style=\"color:#a6e22e\">message</span>));</span></span><span style=\"display:flex;\"><span>})();</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {  </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">searchQuery</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">new</span> <span style=\"color:#a6e22e\">URLSearchParams</span>({ <span style=\"color:#a6e22e\">path</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">pathname</span>, <span style=\"color:#a6e22e\">query</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">dom</span>.<span style=\"color:#a6e22e\">search_query</span> });</span></span><span style=\"display:flex;\"><span>        </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">await</span> <span style=\"color:#a6e22e\">fetch</span>(<span style=\"color:#e6db74\">`https://getnew.event.com?</span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">searchQuery</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">`</span>)</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span> (<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>) {</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);</span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">json</span>();</span></span><span style=\"display:flex;\"><span>        });</span></span><span style=\"display:flex;\"><span>        </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">newEvent</span>, {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;abc123&#39;</span></span></span><span style=\"display:flex;\"><span>        })</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">response</span> =&gt; {</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">if</span>(<span style=\"color:#f92672\">!</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">ok</span>){</span></span><span style=\"display:flex;\"><span>                <span style=\"color:#66d9ef\">throw</span> <span style=\"color:#66d9ef\">new</span> Error(<span style=\"color:#e6db74\">`Network response was not ok. Status code: </span><span style=\"color:#e6db74\">${</span><span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">status</span><span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">.`</span>);</span></span><span style=\"display:flex;\"><span>            }</span></span><span style=\"display:flex;\"><span>            <span style=\"color:#66d9ef\">return</span> <span style=\"color:#a6e22e\">response</span>.<span style=\"color:#a6e22e\">text</span>();</span></span><span style=\"display:flex;\"><span>        })</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#a6e22e\">then</span>(<span style=\"color:#a6e22e\">data</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">log</span>(<span style=\"color:#e6db74\">&#39;Result : &#39;</span>, <span style=\"color:#a6e22e\">data</span>))</span></span><span style=\"display:flex;\"><span>        .<span style=\"color:#66d9ef\">catch</span>(<span style=\"color:#a6e22e\">error</span> =&gt; <span style=\"color:#a6e22e\">console</span>.<span style=\"color:#a6e22e\">error</span>(<span style=\"color:#e6db74\">&#39;Error:&#39;</span>, <span style=\"color:#a6e22e\">error</span>.<span style=\"color:#a6e22e\">message</span>));</span></span><span style=\"display:flex;\"><span>})();</span></span></code></pre></div></div></div></div><h2 id=\"v3関数を作成する\">V3関数を作成する</h2><p>イベント関数またはビジター関数をV3に移行するには、移行する関数のタイプに応じてV3イベント関数またはビジター関数を作成します。詳細については、<a href=\"/ja/server-side/functions/manage-functions/create-function/\">関数を作成する</a>を参照してください。次に以下の手順を実行します：</p><ol><li><p>コードエディタで、V3関数のデフォルトコードをすべて削除し、次のイベントまたはビジターコードを追加します。これは空の関数です。<br>次のステップで関数コードを追加し、コードを修正します。<div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"Event function\" title=\"Event function\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {  </span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>});</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"Visitor function\" title=\"Visitor function\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">visitor</span>, <span style=\"color:#a6e22e\">visit</span> }) =&gt; {  </span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>});</span></span></code></pre></div></div></div></div></p></li><li><p>V2関数からコードをコピーします。以下に示す関数の最初の行から始めます：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> (<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span>) =&gt; {</span></span></code></pre></div><p>そして関数の最後の行の上で終わります：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span>})();</span></span></code></pre></div></li><li><p>コピーしたコードを空のV3関数に貼り付けます。<code>activate</code>行と終了行<code>});</code>の間に貼り付けます。</p></li></ol><h2 id=\"関数コードを更新する\">関数コードを更新する</h2><p>関数がライブラリやヘルパー関数を使用している場合、またはTealium Collectにイベントを送信している場合、空の関数にコピーしたコードは、以下のセクションで説明するように修正する必要があります。</p><h3 id=\"tealium-collectにイベントを送信する\">Tealium Collectにイベントを送信する</h3><p>例の関数は<code>tealium.sendCollectEvent()</code>を使用しています。この呼び出しは<code>track()</code>呼び出しに置き換える必要があります。以下の例は、V2の<code>tealium.sendCollectEvent()</code>呼び出しとV3の<code>track()</code>呼び出しを示しています。</p><div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>(<span style=\"color:#66d9ef\">async</span> () =&gt; {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">udo</span> };</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">tealium</span>.<span style=\"color:#a6e22e\">sendCollectEvent</span>(<span style=\"color:#a6e22e\">newEvent</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#e6db74\">&#39;abc123&#39;</span>)</span></span><span style=\"display:flex;\"><span>    ...</span></span><span style=\"display:flex;\"><span>})();</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({ <span style=\"color:#a6e22e\">event</span> }) =&gt; {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">newEvent</span> <span style=\"color:#f92672\">=</span> { <span style=\"color:#a6e22e\">data</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">data</span>.<span style=\"color:#a6e22e\">udo</span> };</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span>    <span style=\"color:#a6e22e\">track</span>(<span style=\"color:#a6e22e\">newEvent</span>, {</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_account</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">account</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_profile</span><span style=\"color:#f92672\">:</span> <span style=\"color:#a6e22e\">event</span>.<span style=\"color:#a6e22e\">profile</span>,</span></span><span style=\"display:flex;\"><span>        <span style=\"color:#a6e22e\">tealium_datasource</span><span style=\"color:#f92672\">:</span> <span style=\"color:#e6db74\">&#39;abc123&#39;</span></span></span><span style=\"display:flex;\"><span>    })</span></span><span style=\"display:flex;\"><span>    ...</span></span><span style=\"display:flex;\"><span>})</span></span></code></pre></div></div></div></div><p><code>track()</code>呼び出しで、<code>'abc123'</code>をあなたのデータソースキーに置き換えます。</p><h3 id=\"ライブラリを使用する\">ライブラリを使用する</h3><p>V2関数がライブラリ（例：CrytpoES）を使用している場合、<code>activate</code>行の前にインポート行を追加します。</p><div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">tealium</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#34;tealium&#34;</span>;</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;</span></span><span style=\"display:flex;\"><span>...</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">CryptoES</span> <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;crypto-es&#39;</span>;</span></span><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {  </span></span><span style=\"display:flex;\"><span>    ...</span></span><span style=\"display:flex;\"><span>});</span></span></code></pre></div></div></div></div><h3 id=\"認証トークンとグローバル変数\">認証トークンとグローバル変数</h3><p>V2関数が認証トークンやグローバル変数を使用している場合、V3関数の<code>activate</code>行の関数パラメータに<code>helper</code>を追加します。例えば：</p><div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(<span style=\"color:#66d9ef\">async</span> ({ <span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {</span></span><span style=\"display:flex;\"><span>});</span></span></code></pre></div><p>V2コードの<code>auth.get()</code>のすべてのインスタンスを<code>helper.getAuth()</code>に置き換えます。例えば：</p><div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> { <span style=\"color:#a6e22e\">auth</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">token</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">auth</span>.<span style=\"color:#a6e22e\">get</span>(<span style=\"color:#e6db74\">&#34;myAuthToken&#34;</span>);</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {</span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">token</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">helper</span>.<span style=\"color:#a6e22e\">getAuth</span>(<span style=\"color:#e6db74\">&#34;myAuthToken&#34;</span>);</span></span><span style=\"display:flex;\"><span>})</span></span></code></pre></div></div></div></div><p><code>store.get()</code>のすべてのインスタンスを<code>helper.getGlobalVariable()</code>に置き換えます。例えば：</p><div class=\"code-tabs\">  <ul class=\"nav nav-tabs\"></ul>  <div class=\"tab-content\"><div class=\"tab-pane\" data-lang=\"V2\" title=\"V2\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">import</span> {<span style=\"color:#a6e22e\">store</span> } <span style=\"color:#a6e22e\">from</span> <span style=\"color:#e6db74\">&#39;tealium&#39;</span>;</span></span><span style=\"display:flex;\"><span></span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">gVar</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">store</span>.<span style=\"color:#a6e22e\">get</span>(<span style=\"color:#e6db74\">&#34;myGlobalVar&#34;</span>);</span></span></code></pre></div></div><div class=\"tab-pane\" data-lang=\"V3\" title=\"V3\">  <div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-js\" data-lang=\"js\"><span style=\"display:flex;\"><span><span style=\"color:#a6e22e\">activate</span>(({<span style=\"color:#a6e22e\">event</span>, <span style=\"color:#a6e22e\">helper</span> }) =&gt; {    </span></span><span style=\"display:flex;\"><span>    <span style=\"color:#66d9ef\">const</span> <span style=\"color:#a6e22e\">gVar</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#a6e22e\">helper</span>.<span style=\"color:#a6e22e\">getGlobalVariable</span>(<span style=\"color:#e6db74\">&#34;myGlobalVar&#34;</span>);</span></span><span style=\"display:flex;\"><span>})</span></span></code></pre></div></div></div></div>"
        }  

    , 
        {
            "weight": "50",
            "url": "https://docs.tealium.com/ja/server-side/functions/event-visitor-functions/function-examples-v2/",
            "title": "イベントと訪問の関数の例（V2）",
            "body":"<h2 id=\"http-postでイベントデータを送信する\">HTTP POSTでイベントデータを送信する</h2><p>以下の例では、イベントデータをリクエストボディのJSONでエンドポイントにHTTP POSTリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>// イベントデータを送信 - HTTP POSTimport {event} from &#39;tealium&#39;;console.log(JSON.stringify(event));fetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,    {        method: &#39;POST&#39;,        body: JSON.stringify(event),        headers: {            &#39;Content-Type&#39;: &#39;application/json&#39;        }    })    .then(response =&gt; {        if (!response.ok) {            throw new Error(&#39;ネットワークの応答が正常ではありませんでした。ステータスコード：${response.status}。&#39;);        }        return response.json();    })    .then(data =&gt; console.log(&#39;レスポンス：&#39;, JSON.stringify(data)))    .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h2 id=\"http-getでイベントデータを送信する\">HTTP GETでイベントデータを送信する</h2><p>以下の例では、イベントデータをクエリ文字列パラメータとしてエンドポイントにHTTP GETリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>// イベントデータを送信 - HTTP GETimport {event} from &#39;tealium&#39;;console.log(JSON.stringify(event));fetch(encodeURI(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${event.data}&#39;))    .then(response =&gt; {        if (!response.ok) {            throw new Error(&#39;ネットワークの応答が正常ではありませんでした。ステータスコード：${response.status}。&#39;);        }        return response.json();    })    .then(data =&gt; console.log(&#39;レスポンス：&#39;, JSON.stringify(data)))    .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h2 id=\"http-postで訪問データを送信する\">HTTP POSTで訪問データを送信する</h2><p>以下の例では、訪問プロファイルデータをリクエストボディのJSONでエンドポイントにHTTP POSTリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>// 訪問データを送信 - HTTP POSTimport {visitor} from &#39;tealium&#39;;console.log(JSON.stringify(visitor));fetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,    {        method: &#39;POST&#39;,        body: JSON.stringify(visitor),         headers: {            &#39;Content-Type&#39;: &#39;application/json&#39;        }    })    .then(response =&gt; {        if (!response.ok) {            throw new Error(&#39;ネットワークの応答が正常ではありませんでした。ステータスコード：${response.status}。&#39;);        }        return response.json();    })    .then(data =&gt; console.log(&#39;レスポンス：&#39;, JSON.stringify(data)))    .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h2 id=\"http-getで訪問データを送信する\">HTTP GETで訪問データを送信する</h2><p>以下の例では、訪問プロファイルデータをクエリ文字列パラメータとしてエンドポイントにHTTP GETリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>// 訪問データを送信 - HTTP GETimport {visitor} from &#39;tealium&#39;;console.log(JSON.stringify(visitor));fetch(encodeURI(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${visitor.data}&#39;))    .then(response =&gt; {        if (!response.ok) {            throw new Error(&#39;ネットワークの応答が正常ではありませんでした。ステータスコード：${response.status}。&#39;);        }        return response.json();    })    .then(data =&gt; console.log(&#39;レスポンス：&#39;, JSON.stringify(data)))    .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h2 id=\"訪問データを取得してtealium-collectに送信する\">訪問データを取得してTealium Collectに送信する</h2><p>この例では、関数はIPアドレスを使用して場所の都市を取得し、その都市の天気情報を取得し、都市と天気情報をTealium Collect HTTP APIに送信します。</p><pre tabindex=\"0\"><code>import { auth, visitor, event } from &#34;tealium&#34;;console.log(JSON.stringify(visitor));const ip_stack_api_key = &#39;your_api_key&#39;,      weather_api_key = &#39;your_weather_api_key&#39;,      ip_address = visitor?.current_visit?.properties?.ip_address;console.log(ip_address);(async function() {    if(ip_address) {    try {        // IPアドレスを使用して場所の都市を取得        let city_response = await fetch(&#39;https://api.ipstack.com/${ip_address}?access_key=${ip_stack_api_key}&amp;format=1&#39;),        city_data = await city_response.json();        console.log(JSON.stringify(city_data));        // 都市を使用して現地の天気を取得        let weather_response = await fetch(encodeURI(&#39;https://api.openweathermap.org/data/2.5/weather?q=${city_data.city}&amp;appid=${weather_api_key}&#39;)),            weather_data = await weather_response.json();            console.log(JSON.stringify(weather_data));        // 都市と天気の説明をcollectエンドポイントに送信        await fetch(encodeURI(&#39;https://collect.tealiumiq.com/event?tealium_account=cloud-functions-usecases&amp;tealium_profile=main&amp;tealium_visitor_id=${visitor._id}&amp;lookup_city=${weather_data?.name}&amp;weather=${weather_data?.weather?.[0]?.description}&amp;country=isp=${city_data?.connection?.isp}&#39;));    } catch(e) {        console.error(e);        return false;    }    } else {        console.error(&#34;ユーザーのIPアドレスを特定できませんでした&#34;)    }})();</code></pre><h2 id=\"facebookの認証トークンを取得する\">Facebookの認証トークンを取得する</h2><p>以下のコード例は、Facebookの認証トークンを取得する方法を示しています。</p><pre tabindex=\"0\"><code>import { auth } from &#39;tealium&#39;;const token = auth.get(&#39;facebook_token&#39;);fetch(&#39;https://graph.facebook.com/v8.0/act_12345678/customaudiences??access_token=${token}&amp;fields=approximate_count%2Csubtype%2Cname%2Cdata_source&amp;limit=10&#39;)  .then(response =&gt; response.json())  .then(data =&gt; console.log(&#39;データ：&#39;, data))  .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h3 id=\"facebookにデータを送信する\">Facebookにデータを送信する</h3><p>この例では、イベントデータをFacebook GraphまたはMarketing APIに送信してキャンペーンを作成する方法を示しています。Facebookキャンペーンの詳細については、<a href=\"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group\">https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group).</a>を参照してください。</p><pre tabindex=\"0\"><code>import {auth, event} from &#39;tealium&#39;;const ACT_ID = 11111111111;const ACCESS_TOKEN = auth.get(&#34;facebook_token&#34;);fetch(&#39;https://graph.facebook.com/v8.0/act_${ACT_ID}/campaigns?access_token=${ACCESS_TOKEN}&#39;,    {        method: &#39;POST&#39;,        body: &#39;name=${event.data}&amp;objective=PAGE_LIKES&amp;status=PAUSED&amp;special_ad_categories=[]&#39;    })    .then(response =&gt; {            if (!response.ok) {                throw new Error(&#39;ネットワークの応答が正常ではありませんでした。ステータスコード：${response.status}。&#39;);            }            return response.json();        })    .then(data =&gt; console.log(&#39;レスポンス：&#39;, JSON.stringify(data)))    .catch(error =&gt; console.log(&#39;エラー：&#39;, error.message));</code></pre><h2 id=\"facebookキャンペーンを作成する\">Facebookキャンペーンを作成する</h2><p>この例では、Facebookキャンペーンを作成する方法を示しています。</p><pre tabindex=\"0\"><code>import { auth } from &#34;tealium&#34;;const ACT_ID = 11111111111;const ACCESS_TOKEN = auth.get(&#34;facebook_token&#34;);(async function () {    console.time(&#39;function&#39;);    try {        console.log(&#39;キャンペーンを作成中...&#39;);        let campaignId = await createCampaign({ campaignName: &#39;My Campaign&#39; });        console.log(&#39;キャンペーンID&#39;, campaignId);        console.log(&#39;カスタムオーディエンスを作成中...&#39;);        let customAudienceId = await createCustomAudience({ caName: &#39;My_Audience&#39; });        console.log(&#39;カスタムオーディエンスID&#39;, customAudienceId);        console.log(&#39;広告セットを作成中...&#39;);        customAudienceId = 23846304008770411;        let adSetId = await createAdSet({ campaignId: campaignId, customAudienceId: customAudienceId });        console.log(&#39;広告セットID&#39;, adSetId);        console.log(&#39;広告クリエイティブを作成中...&#39;);        // let adCreativeId = await createAdCreative();        // 現在のAPI呼び出しは機能していないため、事前に手動で作成したIDを使用します        let adCreativeId = &#39;adCreativeId&#39;;        console.log(&#39;広告クリエイティブID &#39;, adCreativeId);        console.log(&#39;広告を作成中...&#39;);        let adId = await createAd({ adsetId: adSetId, adCreativeId: adCreativeId });        console.log(&#39;広告ID&#39;, adId);        console.timeEnd(&#39;function&#39;);    } catch (error) {        console.log(error);    }})();async function createAd({ adsetId, adCreativeId }) {    const params = {        &#39;status&#39;: &#39;PAUSED&#39;,        &#39;adset_id&#39;: adsetId,        &#39;name&#39;: &#39;My Ad&#39;,        &#39;creative&#39;: { &#39;creative_id&#39;: adCreativeId },    };    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/ads?access_token=${ACCESS_TOKEN}&#39;,        {            method: &#39;POST&#39;,            body: jsonToRequestBodyString(params)        });    let json = await result.json();    return json.id;}async function createAdSet({ campaignId, customAudienceId }) {    const params = {        &#39;name&#39;: &#39;AdSet&#39;,        &#39;lifetime_budget&#39;: &#39;1000&#39;,        &#39;start_time&#39;: &#39;2020-07-01T23:41:41-0800&#39;,        &#39;end_time&#39;: &#39;2020-07-07T23:41:41-0800&#39;,        &#39;campaign_id&#39;: campaignId,        &#39;bid_amount&#39;: &#39;1&#39;,        &#39;billing_event&#39;: &#39;IMPRESSIONS&#39;,        &#39;optimization_goal&#39;: &#39;LINK_CLICKS&#39;,        &#39;targeting&#39;: {            &#34;geo_locations&#34;: {                &#34;countries&#34;: [&#34;US&#34;],            },            &#34;age_min&#34;: 25,            &#34;age_max&#34;: 40,            &#34;custom_audiences&#34;: [{ &#34;id&#34;: customAudienceId }]        },        &#39;status&#39;: &#39;PAUSED&#39;    };    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/adsets?access_token=${ACCESS_TOKEN}&#39;,        {            method: &#39;POST&#39;,            body: jsonToRequestBodyString(params)        });    let json = await result.json();    return json.id;}async function createCustomAudience({ caName }) {    const params = {        &#39;name&#39;: caName,        &#39;subtype&#39;: &#39;CUSTOM&#39;,        &#39;description&#39;: &#39;People who purchased on my website&#39;,        &#39;customer_file_source&#39;: &#39;USER_PROVIDED_ONLY&#39;,    };    let result = await fetch(&#39;https://graph.facebook.com/v7.0/act_${ACT_ID}/customaudiences?access_token=${ACCESS_TOKEN}&#39;,        {            method: &#39;POST&#39;,            body: jsonToRequestBodyString(params)        });    let json = await result.json();    return json.id;}async function createCampaign({ campaignName }) {    const params = {        &#39;objective&#39;: &#39;LINK_CLICKS&#39;,        &#39;status&#39;: &#39;PAUSED&#39;,        &#39;buying_type&#39;: &#39;AUCTION&#39;,        &#39;name&#39;: campaignName,        &#39;special_ad_categories&#39;: &#39;NONE&#39;    };    let result = await fetch(&#39;https://graph.facebook.com/v8.0/act_${ACT_ID}/campaigns?access_token=${ACCESS_TOKEN}&#39;,        {            method: &#39;POST&#39;,            body: jsonToRequestBodyString(params)        });    let json = await result.json();    return json.id;}function jsonToRequestBodyString(json) {    return Object.keys(json).map(function (key) {        return encodeURIComponent(key) + &#39;=&#39; +            ((typeof json[key] === &#39;string&#39; || json[key] instanceof String) ? encodeURIComponent(json[key]) : JSON.stringify(json[key]));    }).join(&#39;&amp;&#39;);}</code></pre>"
        }  

    , 
        {
            "weight": "60",
            "url": "https://docs.tealium.com/ja/server-side/functions/event-visitor-functions/v3-function-examples/",
            "title": "イベントと訪問関数の例 (V3)",
            "body":"<h2 id=\"http-getでイベントデータを送信\">HTTP GETでイベントデータを送信</h2><p>次の例は、イベントデータをクエリストリングパラメータとしてエンドポイントにHTTP GETリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>activate(({ event }) =&gt; {    console.log(JSON.stringify(event));    fetch(encodeURI(`https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${event.data}`))        .then(response =&gt; {            if (!response.ok) {                throw new Error(`ネットワーク応答が正常ではありませんでした。ステータスコード: ${response.status}.`);            }            return response.json();        })        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message)); })</code></pre><h2 id=\"http-postで訪問データを送信\">HTTP POSTで訪問データを送信</h2><p>次の例は、訪問プロファイルデータをリクエストボディのJSONに含めてエンドポイントにHTTP POSTリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>activate(({ visitor }) =&gt; {    console.log(JSON.stringify(visitor));    fetch(&#39;https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d&#39;,        {            method: &#39;POST&#39;,            body: JSON.stringify(visitor),             headers: {                &#39;Content-Type&#39;: &#39;application/json&#39;            }        })        .then(response =&gt; {            if (!response.ok) {                throw new Error(`ネットワーク応答が正常ではありませんでした。ステータスコード: ${response.status}.`);            }            return response.json();        })        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));})</code></pre><h2 id=\"http-getで訪問データを送信\">HTTP GETで訪問データを送信</h2><p>次の例は、訪問プロファイルデータをクエリストリングパラメータとしてエンドポイントにHTTP GETリクエストを行う方法を示しています。</p><pre tabindex=\"0\"><code>activate(({ visit }) =&gt; {    console.log(JSON.stringify(visit)); // notice separate visit property    fetch(encodeURI(`https://webhook.site/87bb160f-475a-4258-b117-693bb2378a4d?param=${visit.creation_ts}`))        .then(response =&gt; {            if (!response.ok) {                throw new Error(`ネットワーク応答が正常ではありませんでした。ステータスコード: ${response.status}.`);            }            return response.json();        })        .then(data =&gt; console.log(&#39;Response:&#39;, JSON.stringify(data)))        .catch(error =&gt; console.log(&#39;Error:&#39;, error.message));})</code></pre><h2 id=\"tealium-collect-http-apiにイベントを送信\">Tealium Collect HTTP APIにイベントを送信</h2><p>次の例は、データを取得し、イベントをTealium Collectに送信する方法を示しています。</p><pre tabindex=\"0\"><code>activate(async ({ event }) =&gt; {    const searchQuery = new URLSearchParams({ path: event.data.dom.pathname, query: event.data.dom.search_query });        const newEvent = await fetch(`https://getnew.event.com?${searchQuery}`)        .then(response =&gt; {            if (!response.ok) {                throw new Error(`ネットワーク応答が正常ではありませんでした。ステータスコード: ${response.status}.`);            }            return response.json();        });            track(newEvent, {            tealium_account: event.account,            tealium_profile: event.profile,            tealium_datasource: &#39;p9v81m&#39;        })        .then(response =&gt; {            if(!response.ok){                throw new Error(`ネットワーク応答が正常ではありませんでした。ステータスコード: ${response.status}.`);            }            return response.text();        })        .then(data =&gt; console.log(&#39;Result : &#39;, data))        .catch(error =&gt; console.error(&#39;Error:&#39;, error.message));})</code></pre><h2 id=\"認証トークンidを取得\">認証トークンIDを取得</h2><p>次のコード例は、認証トークンIDを取得する方法を示しています：</p><pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {    console.log(helper.getAuth(&#34;auth_token_name&#34;));})</code></pre><h2 id=\"グローバル変数の値を取得\">グローバル変数の値を取得</h2><p>次のコード例は、グローバル変数の値を取得する方法を示しています：</p><pre tabindex=\"0\"><code>activate(({ helper }) =&gt; {    console.log(helper.getGlobalVariable(&#34;global_variable_name&#34;));})</code></pre>"
        }  

    ]
}
